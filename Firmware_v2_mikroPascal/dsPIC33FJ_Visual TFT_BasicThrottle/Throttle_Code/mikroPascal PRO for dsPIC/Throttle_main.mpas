{*
 * Project name:
     Throttle.vtft
 * Generated by:
     Visual TFT
 * Date of creation
     3/24/2012
 * Time of creation
     12:48:16 PM
 * Test configuration:
     MCU:             P33FJ256GP710A
     Dev.Board:       MikroMMB_for_dsPIC33_hw_rev_1.10
                      http://www.mikroe.com/eng/products/view/586/mikrommb-for-dspic33-board/
     Oscillator:      64000000 Hz
     SW:              mikroPascal PRO for dsPIC
                      http://www.mikroe.com/eng/products/view/230/mikropascal-pro-for-dspic30-33-and-pic24/
 *}

program Throttle_main;

uses
  Throttle_events_code,
  MCU_Setup_dsPIC33FJ256GP710A,
  NMRAnetStateMachine,
  NMRAnetAppCallbacks,
  NMRAnetBufferPools,
  NMRAnetNode,
  NodeIDs;

const
  STATE_START         = 0;
  STATE_SPLASH_SCREEN = 1;
  STATE_GATHER_NODES  = 2;
  STATE_RUN           = 3;
  
var
  MainState: Byte;
  i: Integer;
  
procedure Interrupt_Timer2(); iv IVT_ADDR_T2INTERRUPT;                           // Called once every 100m
var
  i: Integer;
begin
  T2IF_bit := 0;                                                                // Clear the Flag
  for i := 0 to Nodes.AllocatedCount - 1 do
    NMRAnetStateMachine_100ms_Timer(Nodes.AllocatedList[i]);
  NMRAnetBufferPools_100ms_TimeTick;
end;

var
  ActiveNode: PNMRAnetNode;
begin
  NMRAnetStateMachine_Initialize(MUSTANGPEAK_ID_0_HI, MUSTANGPEAK_TFT_THROTTLE_ID_0_LO);
  MCU_Setup_Initialize;

  MainState := STATE_START;

  Start_TP();

  while (TRUE) do
  begin
    Check_TP;
    
      LATB1_bit := not LATB1_bit;  // Test Output;
      LATB2_bit := not LATB1_bit;  // Test Output;
      
      LATB3_bit := not LATB3_bit;  // Test Output;
      LATB4_bit := not LATB4_bit;  // Test Output;
      LATD10_bit := not LATD10_bit;  // Test Output;
      LATD9_bit := not LATD9_bit;  // Test Output;
      
   // Delay_us(2000);  // USB-CAN Board can't keep up
    
    ActiveNode := NMRAnetNode_NextNode;
    if ActiveNode <> PNMRAnetNode( nil) then
    begin
      NMRAnetStateMachine_Process(ActiveNode);
      
      case MainState of
        STATE_START :
          begin
            ProgressBarStart.Position := 0;
            DrawProgressBar(@ProgressBarStart);
            Delay_ms(1500);
            MainState := STATE_SPLASH_SCREEN;
          end;
        STATE_SPLASH_SCREEN :
          begin
            ProgressBarStart.Position := ProgressBarStart.Position + 1;
            DrawProgressBar(@ProgressBarStart);

            Delay_us(10000);
            if ProgressBarStart.Position >= 100 then
            begin
              DrawScreen(TrainSelectorScreenID);
              MainState := STATE_GATHER_NODES;
            end;
          end;
        STATE_GATHER_NODES :
          begin

          end;
        STATE_RUN          :
          begin
          end;
      end;
    end
  end;

end.