{*
 * Project name:
     Can_Spi_2nd (CAN Network demonstration with mikroE's CAN-SPI module)
 * Copyright:
     (c) MikroElektronika, 2005-2010.
 * Description:
     This code demonstrates how to use CANSPI library functions and procedures.
     It is used together with the CanSpi_1st example (on second PIC), and it can
     be used to test the connection of PIC to the CAN network.
     With minor adjustments, it should work with any other PIC MCU that has a SPI module.
 * Test configuration:
     MCU:             PIC16F887
                      http://ww1.microchip.com/downloads/en/DeviceDoc/41291F.pdf
     Dev.Board:       EasyPIC6
                      http://www.mikroe.com/eng/products/view/297/easypic6-development-system/
     Oscillator:      HS, 8.0000 MHz
     Ext. Modules:    ac:CAN_SPI_Board on PORTC
     SW:              mikroPascal PRO for PIC
                      http://www.mikroe.com/eng/products/view/10/mikropascal-pro-for-pic/
 * NOTES:
     - Consult the CAN standard about CAN bus termination resistance.
     - Turn on LEDs on PORTB SW9.2 (board specific)
 *}

program Can_Spi_2nd;

const
  CAN_SWJ        = 1;             // Set up for 125Khz Baud Rate with a 16Mhz Crystal
  CAN_BRP        = 3;
  CAN_PROP_SEG   = 3;
  CAN_PHASESEG_1 = 3;
  CAN_PHASESEG_2 = 4;
  

  ID_1st : DWord = $08002F4F;          // Set the NMRABus Frame Type to NMRABus Message (1)
  ID_2nd : DWord = $08000003;

var Can_Init_Flags, Can_Send_Flags, Can_Rcv_Flags : byte;    // can flags
    Rx_Data_Len : byte;                                      // received data length in bytes
    RxTx_Data    : array[8] of byte;                         // CAN rx/tx data buffer
    Msg_Rcvd : byte;                                         // reception flag
    Tx_ID, Rx_ID : DWord;                                  // can rx and tx ID

// CANSPI module connections
var CanSpi_CS : sbit at RC0_bit;
    CanSpi_CS_Direction : sbit at TRISC0_bit;
    CanSpi_Rst : sbit at RC2_bit;
    CanSpi_Rst_Direction : sbit at TRISC2_bit;
// End CANSPI module connections

begin

  ANSEL  := 0;                                                 // Configure AN pins as digital I/O
  ANSELH := 0;
  PORTA := 0;                                                  // clear PORTA
  TRISA := 0;                                                  // set PORTA as output
  PORTB := 0;                                                  // clear PORTC
  TRISB := 0;                                                  // set PORTC as output
  
  Can_Init_Flags := 0;                                         //
  Can_Send_Flags := 0;                                         // clear flags
  Can_Rcv_Flags  := 0;                                         //

  Can_Send_Flags := _CANSPI_TX_PRIORITY_0 and                  // form value to be used
                    _CANSPI_TX_XTD_FRAME and                   //  with CANSPIWrite
                    _CANSPI_TX_NO_RTR_FRAME;

  Can_Init_Flags := _CANSPI_CONFIG_SAMPLE_THRICE and           // Form value to be used
                    _CANSPI_CONFIG_PHSEG2_PRG_ON and           //  with CANSPIInit
                    _CANSPI_CONFIG_XTD_MSG and
                    _CANSPI_CONFIG_DBL_BUFFER_ON and
                    _CANSPI_CONFIG_VALID_XTD_MSG and
                    _CANSPI_CONFIG_LINE_FILTER_OFF;

  SPI1_Init();    // initialize SPI1 module      // With 8Mhz Clock 2Mhz is all she's got (8Mhz/4)......


  CANSPIInitialize(CAN_SWJ, CAN_BRP, CAN_PHASESEG_1, CAN_PHASESEG_2, CAN_PROP_SEG, CAN_INIT_FLAGS);   // Initialize external CANSPI module
  CANSPISetOperationMode(_CANSPI_MODE_CONFIG,0xFF);                            // set CONFIGURATION mode
  CANSPISetMask(_CANSPI_MASK_B1, LongInt($FFFFFFFF), _CANSPI_CONFIG_XTD_MSG);                    // set all mask1 bits to ones
  CANSPISetMask(_CANSPI_MASK_B2, LongInt($FFFFFFFF), _CANSPI_CONFIG_XTD_MSG);                    // set all mask2 bits to ones
  CANSPISetFilter(_CANSPI_FILTER_B2_F3, ID_1st, _CANSPI_CONFIG_XTD_MSG);          // set id of filter B2_F3 to 3
  CANSPISetOperationMode(_CANSPI_MODE_NORMAL,0xFF);                            // set NORMAL mode
  Tx_ID := ID_2nd;                                                             // set tx ID
  
  while (TRUE) do                                                              // endless loop
    begin
    
      ////
  //   CANSPIWrite(Tx_ID, RxTx_Data, 1, Can_Send_Flags);
  //    delay_ms(10);
  ///
      PORTA := not PORTA;
    
      Msg_Rcvd := CANSPIRead(Rx_ID , RxTx_Data , Rx_Data_Len, Can_Rcv_Flags);  // receive message
      if ((Rx_ID = ID_1st) and Msg_Rcvd) then                                   // if message received check id
        begin
          PORTB := RxTx_Data[0];                                               // id correct, output data at PORTB
          Inc(RxTx_Data[0]) ;                                                  // increment received data
          CANSPIWrite(Tx_ID, RxTx_Data, 1, Can_Send_Flags);                    // send incremented data back
        end;
    end;
end.