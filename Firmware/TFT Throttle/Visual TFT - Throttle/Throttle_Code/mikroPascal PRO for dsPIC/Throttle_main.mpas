{*
 * Project name:
     Throttle.vtft
 * Generated by:
     Visual TFT
 * Date of creation
     3/24/2012
 * Time of creation
     12:48:16 PM
 * Test configuration:
     MCU:             P33FJ256GP710A
     Dev.Board:       MikroMMB_for_dsPIC33_hw_rev_1.10
                      http://www.mikroe.com/eng/products/view/586/mikrommb-for-dspic33-board/
     Oscillator:      64000000 Hz
     SW:              mikroPascal PRO for dsPIC
                      http://www.mikroe.com/eng/products/view/230/mikropascal-pro-for-dspic30-33-and-pic24/
 *}

program Throttle_main;

uses
  Throttle_events_code,
  MCU_Setup_dsPIC33FJ256GP710A,
  NMRAnetStateMachine,
  NMRAnetDefines,
  CANDefines,
  CANStorage,
  NMRAnetEventDefines,
  NMRAnetBufferPools,
  NMRAnetBufferPoolsDefines,
  NMRAnetNode,
  NodeIDs;
  
const
  STATE_SPLASH_SCREEN = 0;
  STATE_GATHER_NODES  = 1;
  STATE_RUN           = 2;
  
var
  MainState: Byte;
  i: Integer;
  
procedure Interrupt_Timer2(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 100m
var
  i: Integer;
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  T2IF_bit := 0;                                                                // Clear the Flag
  for i := 0 to Nodes.Count - 1 do
    NMRAnetStateMachine_100ms_Timer(Nodes.AllocatedList[i]);
end;

procedure NMRABusPacketHandler(CANBuffer: PCANBuffer; var DoDefault: Boolean);
begin
  // Handle the message here
end;

var
  ActiveNode: PNMRAnetNode;
begin
  CANStorage_Initialize;
  dsPIC33_CAN_Initialize;
  NMRAnetStateMachine_Initialize(MUSTANGPEAK_ID_0_HI, MUSTANGPEAK_TFT_THROTTLE_ID_0_LO);       
  MCU_Setup_Initialize;

  MainState := STATE_SPLASH_SCREEN;
  BoxRoundProgressBar.Width := 0;
  i := 0;

  Start_TP();

  while (TRUE) do
  begin
    Check_TP;
    
    Delay_us(2000);  // USB-CAN Board can't keep up
    
    ActiveNode := NMRAnetNode_NextNode;
    if ActiveNode <> PNMRAnetNode( nil) then
    begin
      NMRAnetStateMachine_Process(ActiveNode);
      
      case MainState of
        STATE_SPLASH_SCREEN :
          begin
            Inc(i);
            if i = 2 then
            begin
              BoxRoundProgressBar.Width := BoxRoundProgressBar.Width + 1;
              DrawRoundBox(@BoxRoundProgressBar);
              i := 0;
            end;
            
            if BoxRoundProgressBar.Width >= 150 then
            begin
              DrawScreen(ScreenDetectingNodesScreenID);
              MainState := STATE_GATHER_NODES;
            end;
          end;
        STATE_GATHER_NODES :
          begin

          end;
        STATE_RUN          :
          begin
          end;
      end;
    end
  end;

end.