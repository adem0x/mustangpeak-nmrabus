unit Throttle_driver;

uses Throttle_objects, Throttle_resources;

/////////////////////////
// External Declarations
procedure BoxRoundCmdStationsClick(); external;
procedure BoxRoundAccyNodesClick(); external;
procedure BoxRoundProgStationsClick(); external;
procedure BoxRoundTrainNodesClick(); external;
procedure BoxRoundConsistNodesClick(); external;
/////////////////////////

procedure DrawScreen(aScreenID : word);
procedure Process_TP_Press( X : word; Y : word);
procedure Check_TP();
procedure Start_TP();
procedure DrawLabel(ALabel : ^TLabel);
procedure DrawCLabel(ALabel : ^TCLabel);
procedure DrawImage(AImage : ^TImage);
procedure DrawBox(ABox : ^TBox);
procedure DrawCBox(ABox : ^TCBox);
procedure DrawRoundBox(Around_box : ^TBox_Round);


// TFT module connections
var TFT_DataPort : char  at LATA;
    TFT_RST : sbit  at LATC1_bit;
    TFT_BLED : sbit  at LATD7_bit;
    TFT_RS : sbit  at LATB15_bit;
    TFT_CS : sbit  at LATC3_bit;
    TFT_RD : sbit  at LATD12_bit;
    TFT_WR : sbit  at LATD13_bit;
    TFT_DataPort_Direction : char  at TRISA;
    TFT_RST_Direction : sbit  at TRISC1_bit;
    TFT_BLED_Direction : sbit  at TRISD7_bit;
    TFT_RS_Direction : sbit  at TRISB15_bit;
    TFT_CS_Direction : sbit  at TRISC3_bit;
    TFT_RD_Direction : sbit  at TRISD12_bit;
    TFT_WR_Direction : sbit  at TRISD13_bit;
// End TFT module connections

// Touch Panel module connections
var DriveX_Left : sbit at LATB13_bit;
var DriveX_Right : sbit at LATB11_bit;
var DriveY_Up : sbit at LATB12_bit;
var DriveY_Down : sbit at LATB10_bit;
var DriveX_Left_Direction : sbit at TRISB13_bit;
var DriveX_Right_Direction : sbit at TRISB11_bit;
var DriveY_Up_Direction : sbit at TRISB12_bit;
var DriveY_Down_Direction : sbit at TRISB10_bit;
// End Touch Panel module connections

// Global variables
var Xcoord, Ycoord : word;
const ADC_THRESHOLD = 800;
var PenDown : byte;
type TPointer = dword;
var PressedObject : TPointer;
var PressedObjectType : integer;
var display_width, display_height : word;

var
    _object_count : integer;
    object_pressed : byte;
    local_label : ^TLabel;
    exec_label : ^TLabel;
    label_order : short;
    local_clabel : ^TCLabel;
    exec_clabel : ^TCLabel;
    clabel_order : short;
    local_image : ^TImage;
    exec_image : ^TImage;
    image_order : short;
    local_box : ^TBox;
    exec_box : ^TBox;
    box_order : short;
    local_cbox : ^TCBox;
    exec_cbox : ^TCBox;
    cbox_order : short;
    local_round_box : ^TBox_Round;
    exec_round_box : ^TBox_Round;
    box_round_order : short;



/////////////////////////
var CurrentScreenID : word;

const Screen1_CLabels  : array[4] of ^TCLabel; code; far; forward;
const Screen1_Images  : array[1] of ^TImage; code; far; forward;
const Screen1_CBoxes  : array[1] of ^TCBox; code; far; forward;
const Screen1_Boxes_Round  : array[3] of ^TBox_Round; code; far; forward;

const ScreenStart           : TCScreen =
         (
         0xA514                ,//  ScreenStart.Color
         240                   ,//  ScreenStart.Width                     
         320                   ,//  ScreenStart.Height                    
         9                     ,//  ScreenStart.ObjectsCount             
         4                     ,//  ScreenStart.CLabelsCount              
         @Screen1_CLabels      ,//  ScreenStart.CLabels
         1                     ,//  ScreenStart.ImagesCount              
         @Screen1_Images       ,//  ScreenStart.Images
         1                     ,//  ScreenStart.CBoxesCount              
         @Screen1_CBoxes       ,//  ScreenStart.CBoxes
         3                     ,//  ScreenStart.Boxes_RoundCount              
         @Screen1_Boxes_Round  //  ScreenStart.Boxes_Round
         ); code; far;

    const Bkgnd : TCBox = 
         (
         32768                 , //   Bkgnd.OwnerScreenID
         0                     , //   Bkgnd.Order           
         0                     , //   Bkgnd.Left           
         0                     , //   Bkgnd.Top             
         240                   , //   Bkgnd.Width           
         320                   , //   Bkgnd.Height          
         1                     , //   Bkgnd.Pen_Width       
         0x0000                , //   Bkgnd.Pen_Color       
         1                     , //   Bkgnd.Visible         
         0                     , //   Bkgnd.Active          
         1                     , //   Bkgnd.Transparent     
         1                     , //   Bkgnd.Gradient        
         0                     , //   Bkgnd.Gradient_Orientation    
         0x2104                , //   Bkgnd.Gradient_Orientation    
         0x8410                , //   Bkgnd.Gradient_End_Color    
         0xC618                , //   Bkgnd.Color           
         1                     , //   Bkgnd.PressColEnabled 
         0x8410                , //   Bkgnd.Press_Color     
         0                     ,//    Bkgnd.OnUpPtr
         0                     ,//    Bkgnd.OnDownPtr
         0                     ,//    Bkgnd.OnClickPtr
         0                      //    Bkgnd.OnPressPtr
         ); code; far;
    const Label2_Caption : string[12] = 'Mustangpeak'; code; far;
    const Label2 : TCLabel = 
         (
         32768                 , //   Label2.OwnerScreenID
         1                     , //   Label2.Order          
         0                     , //   Label2.Left           
         40                    , //   Label2.Top             
         244                   , //   Label2.Width         
         36                    , //   Label2.Height       
         @Label2_Caption       , //   Label2.Caption        
         @Tahoma38x39_Bold     , //   Label2.FontName       
         0xFFFF                , //   Label2.Font_Color     
         1                     , //   Label2.Visible        
         0                     , //   Label2.Active        
         0                     ,//    Label2.OnUpPtr
         0                     ,//    Label2.OnDownPtr
         0                     ,//    Label2.OnClickPtr
         0                      //    Label2.OnPressPtr
         ); code; far;

    const Label3_Caption : string[21] = 'OpenLCB DCC Throttle'; code; far;
    const Label3 : TCLabel = 
         (
         32768                 , //   Label3.OwnerScreenID
         2                     , //   Label3.Order          
         17                    , //   Label3.Left           
         87                    , //   Label3.Top             
         204                   , //   Label3.Width         
         21                    , //   Label3.Height       
         @Label3_Caption       , //   Label3.Caption        
         @Tahoma19x23_Regular  , //   Label3.FontName       
         0xFFFF                , //   Label3.Font_Color     
         1                     , //   Label3.Visible        
         0                     , //   Label3.Active        
         0                     ,//    Label3.OnUpPtr
         0                     ,//    Label3.OnDownPtr
         0                     ,//    Label3.OnClickPtr
         0                      //    Label3.OnPressPtr
         ); code; far;

var BoxRound1 : TBox_Round;
    const Label4_Caption : string[11] = 'Loading...'; code; far;
    const Label4 : TCLabel = 
         (
         32768                 , //   Label4.OwnerScreenID
         4                     , //   Label4.Order          
         90                    , //   Label4.Left           
         234                   , //   Label4.Top             
         69                    , //   Label4.Width         
         15                    , //   Label4.Height       
         @Label4_Caption       , //   Label4.Caption        
         @Tahoma13x16_Regular  , //   Label4.FontName       
         0xFFFF                , //   Label4.Font_Color     
         1                     , //   Label4.Visible        
         1                     , //   Label4.Active        
         0                     ,//    Label4.OnUpPtr
         0                     ,//    Label4.OnDownPtr
         0                     ,//    Label4.OnClickPtr
         0                      //    Label4.OnPressPtr
         ); code; far;

var BoxRoundProgressBar : TBox_Round;
    const Label5_Caption : string[18] = 'Version 0.1 Alpha'; code; far;
    const Label5 : TCLabel = 
         (
         32768                 , //   Label5.OwnerScreenID
         6                     , //   Label5.Order          
         64                    , //   Label5.Left           
         197                   , //   Label5.Top             
         116                   , //   Label5.Width         
         15                    , //   Label5.Height       
         @Label5_Caption       , //   Label5.Caption        
         @Tahoma13x16_Regular  , //   Label5.FontName       
         0xFFFF                , //   Label5.Font_Color     
         1                     , //   Label5.Visible        
         1                     , //   Label5.Active        
         0                     ,//    Label5.OnUpPtr
         0                     ,//    Label5.OnDownPtr
         0                     ,//    Label5.OnClickPtr
         0                      //    Label5.OnPressPtr
         ); code; far;

var BoxRound3 : TBox_Round;
var Image1 : TImage;
      const Screen1_CLabels  : array[4] of ^TCLabel =
         (
         @Label2,              
         @Label3,              
         @Label4,              
         @Label5               
         ); code; far;
      const Screen1_Images  : array[1] of ^TImage =
         (
         @Image1               
         ); code; far;
      const Screen1_CBoxes  : array[1] of ^TCBox =
         (
         @Bkgnd                
         ); code; far;
      const Screen1_Boxes_Round  : array[3] of ^TBox_Round =
         (
         @BoxRound1,           
         @BoxRoundProgressBar, 
         @BoxRound3            
         ); code; far;


const Screen2_Labels  : array[5] of ^TLabel; code; far; forward;
const Screen2_CLabels  : array[5] of ^TCLabel; code; far; forward;
const Screen2_Boxes  : array[1] of ^TBox; code; far; forward;
const Screen2_Boxes_Round  : array[5] of ^TBox_Round; code; far; forward;

var ScreenDetectingNodes           : TScreen;
var BoxBkGnd : TBox;
    const Label7_Caption : string[34] = 'Locating Command Station Nodes...'; code; far;
    const Label7 : TCLabel = 
         (
         0                     , //   Label7.OwnerScreenID
         1                     , //   Label7.Order          
         2                     , //   Label7.Left           
         9                     , //   Label7.Top             
         230                   , //   Label7.Width         
         15                    , //   Label7.Height       
         @Label7_Caption       , //   Label7.Caption        
         @Tahoma13x16_Regular  , //   Label7.FontName       
         0xFFFF                , //   Label7.Font_Color     
         1                     , //   Label7.Visible        
         1                     , //   Label7.Active        
         0                     ,//    Label7.OnUpPtr
         0                     ,//    Label7.OnDownPtr
         0                     ,//    Label7.OnClickPtr
         0                      //    Label7.OnPressPtr
         ); code; far;

    const Label1_Caption : string[29] = 'Locating Programmer Nodes...'; code; far;
    const Label1 : TCLabel = 
         (
         0                     , //   Label1.OwnerScreenID
         2                     , //   Label1.Order          
         2                     , //   Label1.Left           
         71                    , //   Label1.Top             
         197                   , //   Label1.Width         
         15                    , //   Label1.Height       
         @Label1_Caption       , //   Label1.Caption        
         @Tahoma13x16_Regular  , //   Label1.FontName       
         0xFFFF                , //   Label1.Font_Color     
         1                     , //   Label1.Visible        
         1                     , //   Label1.Active        
         0                     ,//    Label1.OnUpPtr
         0                     ,//    Label1.OnDownPtr
         0                     ,//    Label1.OnClickPtr
         0                      //    Label1.OnPressPtr
         ); code; far;

    const Label6_Caption : string[24] = 'Locating Train Nodes...'; code; far;
    const Label6 : TCLabel = 
         (
         0                     , //   Label6.OwnerScreenID
         3                     , //   Label6.Order          
         2                     , //   Label6.Left           
         132                   , //   Label6.Top             
         150                   , //   Label6.Width         
         15                    , //   Label6.Height       
         @Label6_Caption       , //   Label6.Caption        
         @Tahoma13x16_Regular  , //   Label6.FontName       
         0xFFFF                , //   Label6.Font_Color     
         1                     , //   Label6.Visible        
         1                     , //   Label6.Active        
         0                     ,//    Label6.OnUpPtr
         0                     ,//    Label6.OnDownPtr
         0                     ,//    Label6.OnClickPtr
         0                      //    Label6.OnPressPtr
         ); code; far;

    const Label8_Caption : string[28] = 'Locating Accessory Nodes...'; code; far;
    const Label8 : TCLabel = 
         (
         0                     , //   Label8.OwnerScreenID
         4                     , //   Label8.Order          
         2                     , //   Label8.Left           
         254                   , //   Label8.Top             
         179                   , //   Label8.Width         
         15                    , //   Label8.Height       
         @Label8_Caption       , //   Label8.Caption        
         @Tahoma13x16_Regular  , //   Label8.FontName       
         0xFFFF                , //   Label8.Font_Color     
         1                     , //   Label8.Visible        
         1                     , //   Label8.Active        
         0                     ,//    Label8.OnUpPtr
         0                     ,//    Label8.OnDownPtr
         0                     ,//    Label8.OnClickPtr
         0                      //    Label8.OnPressPtr
         ); code; far;

var BoxRoundCmdStations : TBox_Round;
var BoxRoundAccyNodes : TBox_Round;
var LabelCmdStationNodes : TLabel;
    LabelCmdStationNodes_Caption : string[33];

var LabelAccyNodes : TLabel;
    LabelAccyNodes_Caption : string[33];

var BoxRoundProgStations : TBox_Round;
var BoxRoundTrainNodes : TBox_Round;
var LabelProgNodes : TLabel;
    LabelProgNodes_Caption : string[33];

var LabelTrainNodes : TLabel;
    LabelTrainNodes_Caption : string[33];

    const Label9_Caption : string[26] = 'Locating Consist Nodes...'; code; far;
    const Label9 : TCLabel = 
         (
         0                     , //   Label9.OwnerScreenID
         13                    , //   Label9.Order          
         2                     , //   Label9.Left           
         193                   , //   Label9.Top             
         162                   , //   Label9.Width         
         15                    , //   Label9.Height       
         @Label9_Caption       , //   Label9.Caption        
         @Tahoma13x16_Regular  , //   Label9.FontName       
         0xFFFF                , //   Label9.Font_Color     
         1                     , //   Label9.Visible        
         1                     , //   Label9.Active        
         0                     ,//    Label9.OnUpPtr
         0                     ,//    Label9.OnDownPtr
         0                     ,//    Label9.OnClickPtr
         0                      //    Label9.OnPressPtr
         ); code; far;

var BoxRound2 : TBox_Round;
var Label10 : TLabel;
    Label10_Caption : string[33];

      const Screen2_Labels  : array[5] of ^TLabel =
         (
         @LabelCmdStationNodes,
         @LabelAccyNodes,      
         @LabelProgNodes,      
         @LabelTrainNodes,     
         @Label10              
         ); code; far;
      const Screen2_CLabels  : array[5] of ^TCLabel =
         (
         @Label7,              
         @Label1,              
         @Label6,              
         @Label8,              
         @Label9               
         ); code; far;
      const Screen2_Boxes  : array[1] of ^TBox =
         (
         @BoxBkGnd             
         ); code; far;
      const Screen2_Boxes_Round  : array[5] of ^TBox_Round =
         (
         @BoxRoundCmdStations, 
         @BoxRoundAccyNodes,   
         @BoxRoundProgStations,
         @BoxRoundTrainNodes,  
         @BoxRound2            
         ); code; far;


const Screen3_Labels  : array[6] of ^TLabel; code; far; forward;
const Screen3_Boxes  : array[1] of ^TBox; code; far; forward;
const Screen3_Boxes_Round  : array[6] of ^TBox_Round; code; far; forward;

var ScreenNodeSelect           : TScreen;
var Box1 : TBox;
var BoxRoundItem1 : TBox_Round;
var BoxRoundItem4 : TBox_Round;
var LabelItem1 : TLabel;
    LabelItem1_Caption : string[17];

var LabelItem4 : TLabel;
    LabelItem4_Caption : string[17];

var BoxRoundItem2 : TBox_Round;
var BoxRoundItem3 : TBox_Round;
var LabelItem2 : TLabel;
    LabelItem2_Caption : string[17];

var LabelItem3 : TLabel;
    LabelItem3_Caption : string[17];

var BoxRoundItem6 : TBox_Round;
var LabelItem6 : TLabel;
    LabelItem6_Caption : string[17];

var BoxRoundItem5 : TBox_Round;
var LabelItem5 : TLabel;
    LabelItem5_Caption : string[17];

      const Screen3_Labels  : array[6] of ^TLabel =
         (
         @LabelItem1,          
         @LabelItem4,          
         @LabelItem2,          
         @LabelItem3,          
         @LabelItem6,          
         @LabelItem5           
         ); code; far;
      const Screen3_Boxes  : array[1] of ^TBox =
         (
         @Box1                 
         ); code; far;
      const Screen3_Boxes_Round  : array[6] of ^TBox_Round =
         (
         @BoxRoundItem1,       
         @BoxRoundItem4,       
         @BoxRoundItem2,       
         @BoxRoundItem3,       
         @BoxRoundItem6,       
         @BoxRoundItem5        
         ); code; far;


const DScreens : array[2] of ^TScreen =
         (
                  @ScreenDetectingNodes ,//   ScreenDetectingNodesScreenID = 0
                  @ScreenNodeSelect     //   ScreenNodeSelectScreenID = 1
         ); code; far;
const CScreens : array[1] of ^TCScreen = 
         (
                  @ScreenStart          //   ScreenStartScreenID = 32768
         ); code; far;

var CurrentMyScreen : TMyScreen;
implementation

// set index
procedure Set_Index(index : byte);
  begin
    TFT_RS := 0;
    Lo(LATA) := index;
    TFT_WR := 0;
    TFT_WR := 1;
  end;

// write command
procedure Write_Command(cmd : byte);
  begin
    TFT_RS := 1;
    Lo(LATA) := cmd;
    TFT_WR := 0;
    TFT_WR := 1;
  end;

// write data
procedure Write_Data(_data : word);
  begin
    TFT_RS := 1;
    Lo(LATE) := Hi(_data);
    Lo(LATA) := Lo(_data);
    TFT_WR := 0;
    TFT_WR := 1;
  end;



procedure Init_ADC();
  begin
    AD1PCFGL := 0xCFFF;
    AD1PCFGH := 0xCFFF;
    ADC1_Init();
  end;
procedure InitializeTouchPanel(); // static
  begin
    Init_ADC();
    TFT_Set_Active(@Set_Index, @Write_Command, @Write_Data);
    TFT_Init(240, 320);

    TP_TFT_Init(240, 320, 13, 12);                                  // Initialize touch panel
    TP_TFT_Set_ADC_Threshold(ADC_THRESHOLD);                              // Set touch panel ADC threshold

    PenDown := 0;
    PressedObject := 0;
    PressedObjectType := -1;
  end;


procedure InitializeObjects();    // static
  begin

    ScreenDetectingNodes.Color                     := 0x8410;
    ScreenDetectingNodes.Width                     := 240;
    ScreenDetectingNodes.Height                    := 320;
    ScreenDetectingNodes.LabelsCount               := 5;
    ScreenDetectingNodes.Labels                    := @Screen2_Labels;
    ScreenDetectingNodes.CLabelsCount               := 5;
    ScreenDetectingNodes.CLabels                    := @Screen2_CLabels;
    ScreenDetectingNodes.BoxesCount                := 1;
    ScreenDetectingNodes.Boxes                     := @Screen2_Boxes;
    ScreenDetectingNodes.Boxes_RoundCount          := 5;
    ScreenDetectingNodes.Boxes_Round               := @Screen2_Boxes_Round;
    ScreenDetectingNodes.ObjectsCount              := 16;

    ScreenNodeSelect.Color                     := 0x8410;
    ScreenNodeSelect.Width                     := 240;
    ScreenNodeSelect.Height                    := 320;
    ScreenNodeSelect.LabelsCount               := 6;
    ScreenNodeSelect.Labels                    := @Screen3_Labels;
    ScreenNodeSelect.CLabelsCount               := 0;
    ScreenNodeSelect.BoxesCount                := 1;
    ScreenNodeSelect.Boxes                     := @Screen3_Boxes;
    ScreenNodeSelect.Boxes_RoundCount          := 6;
    ScreenNodeSelect.Boxes_Round               := @Screen3_Boxes_Round;
    ScreenNodeSelect.ObjectsCount              := 13;


    BoxRound1.OwnerScreenID       := 32768;
    BoxRound1.Order               := 3;
    BoxRound1.Left                := 44;
    BoxRound1.Top                 := 257;
    BoxRound1.Width               := 152;
    BoxRound1.Height              := 36;
    BoxRound1.Pen_Width           := 5;
    BoxRound1.Pen_Color           := 0x0000;
    BoxRound1.Visible             := 1;
    BoxRound1.Active              := 0;
    BoxRound1.Transparent         := 1;
    BoxRound1.Gradient            := 1;
    BoxRound1.Gradient_Orientation := 0;
    BoxRound1.Gradient_Start_Color := 0x6B4D;
    BoxRound1.Gradient_End_Color  := 0xA534;
    BoxRound1.Color               := 0xC618;
    BoxRound1.PressColEnabled := 1;
    BoxRound1.Press_Color         := 0x8410;
    BoxRound1.OnUpPtr             := 0;
    BoxRound1.OnDownPtr           := 0;
    BoxRound1.OnClickPtr          := 0;
    BoxRound1.OnPressPtr          := 0;

    BoxRoundProgressBar.OwnerScreenID       := 32768;
    BoxRoundProgressBar.Order               := 5;
    BoxRoundProgressBar.Left                := 45;
    BoxRoundProgressBar.Top                 := 258;
    BoxRoundProgressBar.Width               := 1;
    BoxRoundProgressBar.Height              := 34;
    BoxRoundProgressBar.Pen_Width           := 1;
    BoxRoundProgressBar.Pen_Color           := 0x0000;
    BoxRoundProgressBar.Visible             := 1;
    BoxRoundProgressBar.Active              := 0;
    BoxRoundProgressBar.Transparent         := 1;
    BoxRoundProgressBar.Gradient            := 1;
    BoxRoundProgressBar.Gradient_Orientation := 0;
    BoxRoundProgressBar.Gradient_Start_Color := 0x07E0;
    BoxRoundProgressBar.Gradient_End_Color  := 0x87F0;
    BoxRoundProgressBar.Color               := 0xC618;
    BoxRoundProgressBar.PressColEnabled := 1;
    BoxRoundProgressBar.Press_Color         := 0x8410;
    BoxRoundProgressBar.OnUpPtr             := 0;
    BoxRoundProgressBar.OnDownPtr           := 0;
    BoxRoundProgressBar.OnClickPtr          := 0;
    BoxRoundProgressBar.OnPressPtr          := 0;

    BoxRound3.OwnerScreenID       := 32768;
    BoxRound3.Order               := 7;
    BoxRound3.Left                := 27;
    BoxRound3.Top                 := 110;
    BoxRound3.Width               := 187;
    BoxRound3.Height              := 80;
    BoxRound3.Pen_Width           := 1;
    BoxRound3.Pen_Color           := 0x0000;
    BoxRound3.Visible             := 1;
    BoxRound3.Active              := 1;
    BoxRound3.Transparent         := 1;
    BoxRound3.Gradient            := 1;
    BoxRound3.Gradient_Orientation := 0;
    BoxRound3.Gradient_Start_Color := 0xFFFF;
    BoxRound3.Gradient_End_Color  := 0xC618;
    BoxRound3.Color               := 0xC618;
    BoxRound3.PressColEnabled := 1;
    BoxRound3.Press_Color         := 0x8410;
    BoxRound3.OnUpPtr             := 0;
    BoxRound3.OnDownPtr           := 0;
    BoxRound3.OnClickPtr          := 0;
    BoxRound3.OnPressPtr          := 0;

    Image1.OwnerScreenID       := 32768;
    Image1.Order               := 8;
    Image1.Left                := 44;
    Image1.Top                 := 118;
    Image1.Width               := 155;
    Image1.Height              := 64;
    Image1.Picture_Type        := 0;
    Image1.Picture_Ratio       := 1;
    Image1.Picture_Name        := @OpenLCB_bmp;
    Image1.Visible             := 1;
    Image1.Active              := 0;
    Image1.OnUpPtr             := 0;
    Image1.OnDownPtr           := 0;
    Image1.OnClickPtr          := 0;
    Image1.OnPressPtr          := 0;

    BoxBkGnd.OwnerScreenID       := 0;
    BoxBkGnd.Order               := 0;
    BoxBkGnd.Left                := 0;
    BoxBkGnd.Top                 := 0;
    BoxBkGnd.Width               := 240;
    BoxBkGnd.Height              := 320;
    BoxBkGnd.Pen_Width           := 1;
    BoxBkGnd.Pen_Color           := 0x0000;
    BoxBkGnd.Visible             := 1;
    BoxBkGnd.Active              := 0;
    BoxBkGnd.Transparent         := 1;
    BoxBkGnd.Gradient            := 1;
    BoxBkGnd.Gradient_Orientation := 0;
    BoxBkGnd.Gradient_Start_Color := 0x2104;
    BoxBkGnd.Gradient_End_Color  := 0x8410;
    BoxBkGnd.Color               := 0xC618;
    BoxBkGnd.PressColEnabled := 1;
    BoxBkGnd.Press_Color         := 0x8410;
    BoxBkGnd.OnUpPtr             := 0;
    BoxBkGnd.OnDownPtr           := 0;
    BoxBkGnd.OnClickPtr          := 0;
    BoxBkGnd.OnPressPtr          := 0;

    BoxRoundCmdStations.OwnerScreenID       := 0;
    BoxRoundCmdStations.Order               := 5;
    BoxRoundCmdStations.Left                := 6;
    BoxRoundCmdStations.Top                 := 28;
    BoxRoundCmdStations.Width               := 225;
    BoxRoundCmdStations.Height              := 38;
    BoxRoundCmdStations.Pen_Width           := 2;
    BoxRoundCmdStations.Pen_Color           := 0xC618;
    BoxRoundCmdStations.Visible             := 1;
    BoxRoundCmdStations.Active              := 1;
    BoxRoundCmdStations.Transparent         := 1;
    BoxRoundCmdStations.Gradient            := 0;
    BoxRoundCmdStations.Gradient_Orientation := 0;
    BoxRoundCmdStations.Gradient_Start_Color := 0xFFFF;
    BoxRoundCmdStations.Gradient_End_Color  := 0xC618;
    BoxRoundCmdStations.Color               := 0xFFFF;
    BoxRoundCmdStations.PressColEnabled := 1;
    BoxRoundCmdStations.Press_Color         := 0x8410;
    BoxRoundCmdStations.OnUpPtr             := 0;
    BoxRoundCmdStations.OnDownPtr           := 0;
    BoxRoundCmdStations.OnClickPtr          := @BoxRoundCmdStationsClick;
    BoxRoundCmdStations.OnPressPtr          := 0;

    BoxRoundAccyNodes.OwnerScreenID       := 0;
    BoxRoundAccyNodes.Order               := 6;
    BoxRoundAccyNodes.Left                := 6;
    BoxRoundAccyNodes.Top                 := 274;
    BoxRoundAccyNodes.Width               := 225;
    BoxRoundAccyNodes.Height              := 38;
    BoxRoundAccyNodes.Pen_Width           := 2;
    BoxRoundAccyNodes.Pen_Color           := 0xC618;
    BoxRoundAccyNodes.Visible             := 1;
    BoxRoundAccyNodes.Active              := 1;
    BoxRoundAccyNodes.Transparent         := 1;
    BoxRoundAccyNodes.Gradient            := 0;
    BoxRoundAccyNodes.Gradient_Orientation := 0;
    BoxRoundAccyNodes.Gradient_Start_Color := 0xFFFF;
    BoxRoundAccyNodes.Gradient_End_Color  := 0xC618;
    BoxRoundAccyNodes.Color               := 0xFFFF;
    BoxRoundAccyNodes.PressColEnabled := 1;
    BoxRoundAccyNodes.Press_Color         := 0x8410;
    BoxRoundAccyNodes.OnUpPtr             := 0;
    BoxRoundAccyNodes.OnDownPtr           := 0;
    BoxRoundAccyNodes.OnClickPtr          := @BoxRoundAccyNodesClick;
    BoxRoundAccyNodes.OnPressPtr          := 0;

    LabelCmdStationNodes.OwnerScreenID       := 0;
    LabelCmdStationNodes.Order               := 7;
    LabelCmdStationNodes.Left                := 7;
    LabelCmdStationNodes.Top                 := 38;
    LabelCmdStationNodes.Width               := 106;
    LabelCmdStationNodes.Height              := 18;
    LabelCmdStationNodes.Visible             := 1;
    LabelCmdStationNodes.Active              := 0;
    LabelCmdStationNodes.Caption             := @LabelCmdStationNodes_Caption;
    LabelCmdStationNodes_Caption             := 'Ophir District';
    LabelCmdStationNodes.FontName            := @Tahoma16x19_Regular;
    LabelCmdStationNodes.Font_Color          := 0x0000;
    LabelCmdStationNodes.OnUpPtr             := 0;
    LabelCmdStationNodes.OnDownPtr           := 0;
    LabelCmdStationNodes.OnClickPtr          := 0;
    LabelCmdStationNodes.OnPressPtr          := 0;

    LabelAccyNodes.OwnerScreenID       := 0;
    LabelAccyNodes.Order               := 8;
    LabelAccyNodes.Left                := 7;
    LabelAccyNodes.Top                 := 283;
    LabelAccyNodes.Width               := 150;
    LabelAccyNodes.Height              := 18;
    LabelAccyNodes.Visible             := 1;
    LabelAccyNodes.Active              := 0;
    LabelAccyNodes.Caption             := @LabelAccyNodes_Caption;
    LabelAccyNodes_Caption             := 'Ophir Depot Siding';
    LabelAccyNodes.FontName            := @Tahoma16x19_Regular;
    LabelAccyNodes.Font_Color          := 0x0000;
    LabelAccyNodes.OnUpPtr             := 0;
    LabelAccyNodes.OnDownPtr           := 0;
    LabelAccyNodes.OnClickPtr          := 0;
    LabelAccyNodes.OnPressPtr          := 0;

    BoxRoundProgStations.OwnerScreenID       := 0;
    BoxRoundProgStations.Order               := 9;
    BoxRoundProgStations.Left                := 6;
    BoxRoundProgStations.Top                 := 90;
    BoxRoundProgStations.Width               := 225;
    BoxRoundProgStations.Height              := 38;
    BoxRoundProgStations.Pen_Width           := 2;
    BoxRoundProgStations.Pen_Color           := 0xC618;
    BoxRoundProgStations.Visible             := 1;
    BoxRoundProgStations.Active              := 1;
    BoxRoundProgStations.Transparent         := 1;
    BoxRoundProgStations.Gradient            := 0;
    BoxRoundProgStations.Gradient_Orientation := 0;
    BoxRoundProgStations.Gradient_Start_Color := 0xFFFF;
    BoxRoundProgStations.Gradient_End_Color  := 0xC618;
    BoxRoundProgStations.Color               := 0xFFFF;
    BoxRoundProgStations.PressColEnabled := 1;
    BoxRoundProgStations.Press_Color         := 0x8410;
    BoxRoundProgStations.OnUpPtr             := 0;
    BoxRoundProgStations.OnDownPtr           := 0;
    BoxRoundProgStations.OnClickPtr          := @BoxRoundProgStationsClick;
    BoxRoundProgStations.OnPressPtr          := 0;

    BoxRoundTrainNodes.OwnerScreenID       := 0;
    BoxRoundTrainNodes.Order               := 10;
    BoxRoundTrainNodes.Left                := 6;
    BoxRoundTrainNodes.Top                 := 151;
    BoxRoundTrainNodes.Width               := 225;
    BoxRoundTrainNodes.Height              := 38;
    BoxRoundTrainNodes.Pen_Width           := 2;
    BoxRoundTrainNodes.Pen_Color           := 0xC618;
    BoxRoundTrainNodes.Visible             := 1;
    BoxRoundTrainNodes.Active              := 1;
    BoxRoundTrainNodes.Transparent         := 1;
    BoxRoundTrainNodes.Gradient            := 0;
    BoxRoundTrainNodes.Gradient_Orientation := 0;
    BoxRoundTrainNodes.Gradient_Start_Color := 0xFFFF;
    BoxRoundTrainNodes.Gradient_End_Color  := 0xC618;
    BoxRoundTrainNodes.Color               := 0xFFFF;
    BoxRoundTrainNodes.PressColEnabled := 1;
    BoxRoundTrainNodes.Press_Color         := 0x8410;
    BoxRoundTrainNodes.OnUpPtr             := 0;
    BoxRoundTrainNodes.OnDownPtr           := 0;
    BoxRoundTrainNodes.OnClickPtr          := @BoxRoundTrainNodesClick;
    BoxRoundTrainNodes.OnPressPtr          := 0;

    LabelProgNodes.OwnerScreenID       := 0;
    LabelProgNodes.Order               := 11;
    LabelProgNodes.Left                := 7;
    LabelProgNodes.Top                 := 99;
    LabelProgNodes.Width               := 89;
    LabelProgNodes.Height              := 18;
    LabelProgNodes.Visible             := 1;
    LabelProgNodes.Active              := 0;
    LabelProgNodes.Caption             := @LabelProgNodes_Caption;
    LabelProgNodes_Caption             := 'Rico Siding';
    LabelProgNodes.FontName            := @Tahoma16x19_Regular;
    LabelProgNodes.Font_Color          := 0x0000;
    LabelProgNodes.OnUpPtr             := 0;
    LabelProgNodes.OnDownPtr           := 0;
    LabelProgNodes.OnClickPtr          := 0;
    LabelProgNodes.OnPressPtr          := 0;

    LabelTrainNodes.OwnerScreenID       := 0;
    LabelTrainNodes.Order               := 12;
    LabelTrainNodes.Left                := 7;
    LabelTrainNodes.Top                 := 160;
    LabelTrainNodes.Width               := 116;
    LabelTrainNodes.Height              := 18;
    LabelTrainNodes.Visible             := 1;
    LabelTrainNodes.Active              := 0;
    LabelTrainNodes.Caption             := @LabelTrainNodes_Caption;
    LabelTrainNodes_Caption             := 'RGS 455 - K27';
    LabelTrainNodes.FontName            := @Tahoma16x19_Regular;
    LabelTrainNodes.Font_Color          := 0x0000;
    LabelTrainNodes.OnUpPtr             := 0;
    LabelTrainNodes.OnDownPtr           := 0;
    LabelTrainNodes.OnClickPtr          := 0;
    LabelTrainNodes.OnPressPtr          := 0;

    BoxRound2.OwnerScreenID       := 0;
    BoxRound2.Order               := 14;
    BoxRound2.Left                := 6;
    BoxRound2.Top                 := 212;
    BoxRound2.Width               := 225;
    BoxRound2.Height              := 38;
    BoxRound2.Pen_Width           := 2;
    BoxRound2.Pen_Color           := 0xC618;
    BoxRound2.Visible             := 1;
    BoxRound2.Active              := 1;
    BoxRound2.Transparent         := 1;
    BoxRound2.Gradient            := 0;
    BoxRound2.Gradient_Orientation := 0;
    BoxRound2.Gradient_Start_Color := 0xFFFF;
    BoxRound2.Gradient_End_Color  := 0xC618;
    BoxRound2.Color               := 0xFFFF;
    BoxRound2.PressColEnabled := 1;
    BoxRound2.Press_Color         := 0x8410;
    BoxRound2.OnUpPtr             := 0;
    BoxRound2.OnDownPtr           := 0;
    BoxRound2.OnClickPtr          := @BoxRoundConsistNodesClick;
    BoxRound2.OnPressPtr          := 0;

    Label10.OwnerScreenID       := 0;
    Label10.Order               := 15;
    Label10.Left                := 7;
    Label10.Top                 := 222;
    Label10.Width               := 169;
    Label10.Height              := 18;
    Label10.Visible             := 1;
    Label10.Active              := 0;
    Label10.Caption             := @Label10_Caption;
    Label10_Caption             := 'Southbound Extra #2';
    Label10.FontName            := @Tahoma16x19_Regular;
    Label10.Font_Color          := 0x0000;
    Label10.OnUpPtr             := 0;
    Label10.OnDownPtr           := 0;
    Label10.OnClickPtr          := 0;
    Label10.OnPressPtr          := 0;

    Box1.OwnerScreenID       := 1;
    Box1.Order               := 0;
    Box1.Left                := 0;
    Box1.Top                 := 0;
    Box1.Width               := 240;
    Box1.Height              := 320;
    Box1.Pen_Width           := 1;
    Box1.Pen_Color           := 0x0000;
    Box1.Visible             := 1;
    Box1.Active              := 0;
    Box1.Transparent         := 1;
    Box1.Gradient            := 1;
    Box1.Gradient_Orientation := 0;
    Box1.Gradient_Start_Color := 0x2104;
    Box1.Gradient_End_Color  := 0x8410;
    Box1.Color               := 0xC618;
    Box1.PressColEnabled := 1;
    Box1.Press_Color         := 0x8410;
    Box1.OnUpPtr             := 0;
    Box1.OnDownPtr           := 0;
    Box1.OnClickPtr          := 0;
    Box1.OnPressPtr          := 0;

    BoxRoundItem1.OwnerScreenID       := 1;
    BoxRoundItem1.Order               := 1;
    BoxRoundItem1.Left                := 6;
    BoxRoundItem1.Top                 := 8;
    BoxRoundItem1.Width               := 225;
    BoxRoundItem1.Height              := 38;
    BoxRoundItem1.Pen_Width           := 2;
    BoxRoundItem1.Pen_Color           := 0xC618;
    BoxRoundItem1.Visible             := 1;
    BoxRoundItem1.Active              := 1;
    BoxRoundItem1.Transparent         := 1;
    BoxRoundItem1.Gradient            := 0;
    BoxRoundItem1.Gradient_Orientation := 0;
    BoxRoundItem1.Gradient_Start_Color := 0xFFFF;
    BoxRoundItem1.Gradient_End_Color  := 0xC618;
    BoxRoundItem1.Color               := 0xFFFF;
    BoxRoundItem1.PressColEnabled := 0;
    BoxRoundItem1.Press_Color         := 0x8410;
    BoxRoundItem1.OnUpPtr             := 0;
    BoxRoundItem1.OnDownPtr           := 0;
    BoxRoundItem1.OnClickPtr          := 0;
    BoxRoundItem1.OnPressPtr          := 0;

    BoxRoundItem4.OwnerScreenID       := 1;
    BoxRoundItem4.Order               := 2;
    BoxRoundItem4.Left                := 6;
    BoxRoundItem4.Top                 := 163;
    BoxRoundItem4.Width               := 225;
    BoxRoundItem4.Height              := 38;
    BoxRoundItem4.Pen_Width           := 2;
    BoxRoundItem4.Pen_Color           := 0xC618;
    BoxRoundItem4.Visible             := 1;
    BoxRoundItem4.Active              := 1;
    BoxRoundItem4.Transparent         := 1;
    BoxRoundItem4.Gradient            := 0;
    BoxRoundItem4.Gradient_Orientation := 0;
    BoxRoundItem4.Gradient_Start_Color := 0xFFFF;
    BoxRoundItem4.Gradient_End_Color  := 0xC618;
    BoxRoundItem4.Color               := 0xFFFF;
    BoxRoundItem4.PressColEnabled := 0;
    BoxRoundItem4.Press_Color         := 0x8410;
    BoxRoundItem4.OnUpPtr             := 0;
    BoxRoundItem4.OnDownPtr           := 0;
    BoxRoundItem4.OnClickPtr          := 0;
    BoxRoundItem4.OnPressPtr          := 0;

    LabelItem1.OwnerScreenID       := 1;
    LabelItem1.Order               := 3;
    LabelItem1.Left                := 9;
    LabelItem1.Top                 := 20;
    LabelItem1.Width               := 58;
    LabelItem1.Height              := 18;
    LabelItem1.Visible             := 1;
    LabelItem1.Active              := 0;
    LabelItem1.Caption             := @LabelItem1_Caption;
    LabelItem1_Caption             := 'Item 1';
    LabelItem1.FontName            := @Tahoma16x19_Regular;
    LabelItem1.Font_Color          := 0x0000;
    LabelItem1.OnUpPtr             := 0;
    LabelItem1.OnDownPtr           := 0;
    LabelItem1.OnClickPtr          := 0;
    LabelItem1.OnPressPtr          := 0;

    LabelItem4.OwnerScreenID       := 1;
    LabelItem4.Order               := 4;
    LabelItem4.Left                := 9;
    LabelItem4.Top                 := 174;
    LabelItem4.Width               := 58;
    LabelItem4.Height              := 18;
    LabelItem4.Visible             := 1;
    LabelItem4.Active              := 0;
    LabelItem4.Caption             := @LabelItem4_Caption;
    LabelItem4_Caption             := 'Item 4';
    LabelItem4.FontName            := @Tahoma16x19_Regular;
    LabelItem4.Font_Color          := 0x0000;
    LabelItem4.OnUpPtr             := 0;
    LabelItem4.OnDownPtr           := 0;
    LabelItem4.OnClickPtr          := 0;
    LabelItem4.OnPressPtr          := 0;

    BoxRoundItem2.OwnerScreenID       := 1;
    BoxRoundItem2.Order               := 5;
    BoxRoundItem2.Left                := 6;
    BoxRoundItem2.Top                 := 60;
    BoxRoundItem2.Width               := 225;
    BoxRoundItem2.Height              := 38;
    BoxRoundItem2.Pen_Width           := 2;
    BoxRoundItem2.Pen_Color           := 0xC618;
    BoxRoundItem2.Visible             := 1;
    BoxRoundItem2.Active              := 1;
    BoxRoundItem2.Transparent         := 1;
    BoxRoundItem2.Gradient            := 0;
    BoxRoundItem2.Gradient_Orientation := 0;
    BoxRoundItem2.Gradient_Start_Color := 0xFFFF;
    BoxRoundItem2.Gradient_End_Color  := 0xC618;
    BoxRoundItem2.Color               := 0xFFFF;
    BoxRoundItem2.PressColEnabled := 0;
    BoxRoundItem2.Press_Color         := 0x8410;
    BoxRoundItem2.OnUpPtr             := 0;
    BoxRoundItem2.OnDownPtr           := 0;
    BoxRoundItem2.OnClickPtr          := 0;
    BoxRoundItem2.OnPressPtr          := 0;

    BoxRoundItem3.OwnerScreenID       := 1;
    BoxRoundItem3.Order               := 6;
    BoxRoundItem3.Left                := 7;
    BoxRoundItem3.Top                 := 111;
    BoxRoundItem3.Width               := 225;
    BoxRoundItem3.Height              := 38;
    BoxRoundItem3.Pen_Width           := 2;
    BoxRoundItem3.Pen_Color           := 0xC618;
    BoxRoundItem3.Visible             := 1;
    BoxRoundItem3.Active              := 1;
    BoxRoundItem3.Transparent         := 1;
    BoxRoundItem3.Gradient            := 0;
    BoxRoundItem3.Gradient_Orientation := 0;
    BoxRoundItem3.Gradient_Start_Color := 0xFFFF;
    BoxRoundItem3.Gradient_End_Color  := 0xC618;
    BoxRoundItem3.Color               := 0xFFFF;
    BoxRoundItem3.PressColEnabled := 0;
    BoxRoundItem3.Press_Color         := 0x8410;
    BoxRoundItem3.OnUpPtr             := 0;
    BoxRoundItem3.OnDownPtr           := 0;
    BoxRoundItem3.OnClickPtr          := 0;
    BoxRoundItem3.OnPressPtr          := 0;

    LabelItem2.OwnerScreenID       := 1;
    LabelItem2.Order               := 7;
    LabelItem2.Left                := 9;
    LabelItem2.Top                 := 69;
    LabelItem2.Width               := 58;
    LabelItem2.Height              := 18;
    LabelItem2.Visible             := 1;
    LabelItem2.Active              := 0;
    LabelItem2.Caption             := @LabelItem2_Caption;
    LabelItem2_Caption             := 'Item 2';
    LabelItem2.FontName            := @Tahoma16x19_Regular;
    LabelItem2.Font_Color          := 0x0000;
    LabelItem2.OnUpPtr             := 0;
    LabelItem2.OnDownPtr           := 0;
    LabelItem2.OnClickPtr          := 0;
    LabelItem2.OnPressPtr          := 0;

    LabelItem3.OwnerScreenID       := 1;
    LabelItem3.Order               := 8;
    LabelItem3.Left                := 10;
    LabelItem3.Top                 := 123;
    LabelItem3.Width               := 58;
    LabelItem3.Height              := 18;
    LabelItem3.Visible             := 1;
    LabelItem3.Active              := 0;
    LabelItem3.Caption             := @LabelItem3_Caption;
    LabelItem3_Caption             := 'Item 3';
    LabelItem3.FontName            := @Tahoma16x19_Regular;
    LabelItem3.Font_Color          := 0x0000;
    LabelItem3.OnUpPtr             := 0;
    LabelItem3.OnDownPtr           := 0;
    LabelItem3.OnClickPtr          := 0;
    LabelItem3.OnPressPtr          := 0;

    BoxRoundItem6.OwnerScreenID       := 1;
    BoxRoundItem6.Order               := 9;
    BoxRoundItem6.Left                := 7;
    BoxRoundItem6.Top                 := 268;
    BoxRoundItem6.Width               := 225;
    BoxRoundItem6.Height              := 38;
    BoxRoundItem6.Pen_Width           := 2;
    BoxRoundItem6.Pen_Color           := 0xC618;
    BoxRoundItem6.Visible             := 1;
    BoxRoundItem6.Active              := 1;
    BoxRoundItem6.Transparent         := 1;
    BoxRoundItem6.Gradient            := 0;
    BoxRoundItem6.Gradient_Orientation := 0;
    BoxRoundItem6.Gradient_Start_Color := 0xFFFF;
    BoxRoundItem6.Gradient_End_Color  := 0xC618;
    BoxRoundItem6.Color               := 0xFFFF;
    BoxRoundItem6.PressColEnabled := 0;
    BoxRoundItem6.Press_Color         := 0x8410;
    BoxRoundItem6.OnUpPtr             := 0;
    BoxRoundItem6.OnDownPtr           := 0;
    BoxRoundItem6.OnClickPtr          := 0;
    BoxRoundItem6.OnPressPtr          := 0;

    LabelItem6.OwnerScreenID       := 1;
    LabelItem6.Order               := 10;
    LabelItem6.Left                := 10;
    LabelItem6.Top                 := 279;
    LabelItem6.Width               := 58;
    LabelItem6.Height              := 18;
    LabelItem6.Visible             := 1;
    LabelItem6.Active              := 0;
    LabelItem6.Caption             := @LabelItem6_Caption;
    LabelItem6_Caption             := 'Item 6';
    LabelItem6.FontName            := @Tahoma16x19_Regular;
    LabelItem6.Font_Color          := 0x0000;
    LabelItem6.OnUpPtr             := 0;
    LabelItem6.OnDownPtr           := 0;
    LabelItem6.OnClickPtr          := 0;
    LabelItem6.OnPressPtr          := 0;

    BoxRoundItem5.OwnerScreenID       := 1;
    BoxRoundItem5.Order               := 11;
    BoxRoundItem5.Left                := 6;
    BoxRoundItem5.Top                 := 217;
    BoxRoundItem5.Width               := 225;
    BoxRoundItem5.Height              := 38;
    BoxRoundItem5.Pen_Width           := 2;
    BoxRoundItem5.Pen_Color           := 0xC618;
    BoxRoundItem5.Visible             := 1;
    BoxRoundItem5.Active              := 1;
    BoxRoundItem5.Transparent         := 1;
    BoxRoundItem5.Gradient            := 0;
    BoxRoundItem5.Gradient_Orientation := 0;
    BoxRoundItem5.Gradient_Start_Color := 0xFFFF;
    BoxRoundItem5.Gradient_End_Color  := 0xC618;
    BoxRoundItem5.Color               := 0xFFFF;
    BoxRoundItem5.PressColEnabled := 0;
    BoxRoundItem5.Press_Color         := 0x8410;
    BoxRoundItem5.OnUpPtr             := 0;
    BoxRoundItem5.OnDownPtr           := 0;
    BoxRoundItem5.OnClickPtr          := 0;
    BoxRoundItem5.OnPressPtr          := 0;

    LabelItem5.OwnerScreenID       := 1;
    LabelItem5.Order               := 12;
    LabelItem5.Left                := 9;
    LabelItem5.Top                 := 229;
    LabelItem5.Width               := 58;
    LabelItem5.Height              := 18;
    LabelItem5.Visible             := 1;
    LabelItem5.Active              := 0;
    LabelItem5.Caption             := @LabelItem5_Caption;
    LabelItem5_Caption             := 'Item 5';
    LabelItem5.FontName            := @Tahoma16x19_Regular;
    LabelItem5.Font_Color          := 0x0000;
    LabelItem5.OnUpPtr             := 0;
    LabelItem5.OnDownPtr           := 0;
    LabelItem5.OnClickPtr          := 0;
    LabelItem5.OnPressPtr          := 0;
  end;

function IsInsideObject (X, Y, Left, Top, Width, Height : word) : byte; // static
begin
  if ( (Left<= X) and (Left+ Width - 1 >= X) and
       (Top <= Y)  and (Top + Height - 1 >= Y) ) then
    Result := 1
  else
    Result := 0;
end;

function GetLabel (index : byte) : ^TLabel; // static
var objPtr : ^ const code far ^TLabel;
  begin
    objPtr := CurrentMyScreen.Labels + index;
    Result := objPtr^;
  end;

function GetCLabel (index : byte) : ^TCLabel; // static
var objPtr : ^ const code far ^TCLabel;
  begin
    objPtr := CurrentMyScreen.CLabels + index;
    Result := objPtr^;
  end;

function GetImage (index : byte) : ^TImage; // static
var objPtr : ^ const code far ^TImage;
  begin
    objPtr := CurrentMyScreen.Images + index;
    Result := objPtr^;
  end;
function GetBox (index : byte) : ^TBox; // static
var objPtr : ^ const code far ^TBox;
  begin
    objPtr := CurrentMyScreen.Boxes + index;
    Result := objPtr^;
  end;
function GetCBox (index : byte) : ^TCBox; // static
var objPtr : ^ const code far ^TCBox;
  begin
    objPtr := CurrentMyScreen.CBoxes + index;
    Result := objPtr^;
  end;
function GetBox_Round (index : byte) : ^TBox_Round; // static
var objPtr : ^ const code far ^TBox_Round;
  begin
    objPtr := CurrentMyScreen.Boxes_Round + index;
    Result := objPtr^;
  end;


procedure DrawLabel(ALabel : ^TLabel);
var x_pos, y_pos : integer;
  begin
    x_pos := 0;
    y_pos := 0;
    if (ALabel^.Visible = 1) then
      begin
        TFT_Set_Font(ALabel^.FontName, ALabel^.Font_Color, FO_HORIZONTAL);
        TFT_Write_Text_Return_Pos(ALabel^.Caption, ALabel^.Left, ALabel^.Top);
        x_pos := ALabel^.Left + (integer((ALabel^.Width - caption_length)) div 2);
        y_pos := ALabel^.Top + (integer((ALabel^.Height - caption_height)) div 2);
        if (x_pos > ALabel^.Left) then
          TFT_Write_Text(ALabel^.Caption, x_pos, y_pos)
        else
          TFT_Write_Text(ALabel^.Caption, ALabel^.Left, ALabel^.Top);
      end;
  end;

procedure DrawCLabel(ALabel : ^TCLabel);
var x_pos, y_pos : integer;
  begin
    x_pos := 0;
    y_pos := 0;
    if (ALabel^.Visible = 1) then
      begin
        TFT_Set_Font(ALabel^.FontName, ALabel^.Font_Color, FO_HORIZONTAL);
        TFT_Write_Const_Text_Return_Pos(ALabel^.Caption, ALabel^.Left, ALabel^.Top);
        x_pos := ALabel^.Left + (integer((ALabel^.Width - caption_length)) div 2);
        y_pos := ALabel^.Top + (integer((ALabel^.Height - caption_height)) div 2);
        if (x_pos > ALabel^.Left) then
          TFT_Write_Const_Text(ALabel^.Caption, x_pos, y_pos)
        else
          TFT_Write_Const_Text(ALabel^.Caption, ALabel^.Left, ALabel^.Top);
      end;
  end;

procedure DrawImage(AImage : ^TImage);
  begin
    if (AImage^.Visible) then
      begin
        TFT_Image(AImage^.Left, AImage^.Top, AImage^.Picture_Name, AImage^.Picture_Ratio);
      end;
end;

procedure DrawBox(ABox : ^TBox);
  begin
    if (ABox^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(ABox^.Transparent, ABox^.Press_Color, ABox^.Gradient, ABox^.Gradient_Orientation, ABox^.Gradient_End_Color, ABox^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(ABox^.Transparent, ABox^.Color, ABox^.Gradient, ABox^.Gradient_Orientation, ABox^.Gradient_Start_Color, ABox^.Gradient_End_Color);
        TFT_Set_Pen(ABox^.Pen_Color, ABox^.Pen_Width);
        TFT_Rectangle(ABox^.Left, ABox^.Top, ABox^.Left + ABox^.Width - 1, ABox^.Top + ABox^.Height - 1);
      end;
  end;

procedure DrawCBox(ABox : ^TCBox);
  begin
    if (ABox^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(ABox^.Transparent, ABox^.Press_Color, ABox^.Gradient, ABox^.Gradient_Orientation, ABox^.Gradient_End_Color, ABox^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(ABox^.Transparent, ABox^.Color, ABox^.Gradient, ABox^.Gradient_Orientation, ABox^.Gradient_Start_Color, ABox^.Gradient_End_Color);
        TFT_Set_Pen(ABox^.Pen_Color, ABox^.Pen_Width);
        TFT_Rectangle(ABox^.Left, ABox^.Top, ABox^.Left + ABox^.Width - 1, ABox^.Top + ABox^.Height - 1);
      end;
  end;

procedure DrawRoundBox(Around_box : ^TBox_Round);
  begin
    if (Around_box^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(Around_box^.Transparent, Around_box^.Press_Color, Around_box^.Gradient, Around_box^.Gradient_Orientation,
                          Around_box^.Gradient_End_Color, Around_box^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(Around_box^.Transparent, Around_box^.Color, Around_box^.Gradient, Around_box^.Gradient_Orientation,
                        Around_box^.Gradient_Start_Color, Around_box^.Gradient_End_Color);
        TFT_Set_Pen(Around_box^.Pen_Color, Around_box^.Pen_Width);
        if (Around_box^.Height > Around_box^.Width) then
          TFT_Rectangle_Round_Edges(Around_box^.Left + 1, Around_box^.Top + 1,
                                    Around_box^.Left + Around_box^.Width - 2,
                                    Around_box^.Top + Around_box^.Height - 2, (Around_box^.Width div 4))
        else 
          TFT_Rectangle_Round_Edges(Around_box^.Left + 1, Around_box^.Top + 1,
                                    Around_box^.Left + Around_box^.Width - 2,
                                    Around_box^.Top + Around_box^.Height - 2, (Around_box^.Height div 4));
      end;
  end;

procedure SetCurrentMyScreenByIndex(aScreenID : word);
begin
  memset(@CurrentMyScreen, 0, sizeof(CurrentMyScreen));
  if (aScreenID and 0x8000) then
    begin
      aScreenID := aScreenID xor 0x8000;
      CurrentMyScreen.Color        :=  CScreens[aScreenID]^.Color;
      CurrentMyScreen.Width        :=  CScreens[aScreenID]^.Width;
      CurrentMyScreen.Height       :=  CScreens[aScreenID]^.Height;
      CurrentMyScreen.ObjectsCount :=  CScreens[aScreenID]^.ObjectsCount;
      CurrentMyScreen.CLabelsCount   :=  CScreens[aScreenID]^.CLabelsCount;
      CurrentMyScreen.CLabels        :=  CScreens[aScreenID]^.CLabels;
      CurrentMyScreen.ImagesCount   :=  CScreens[aScreenID]^.ImagesCount;
      CurrentMyScreen.Images        :=  CScreens[aScreenID]^.Images;
      CurrentMyScreen.CBoxesCount   :=  CScreens[aScreenID]^.CBoxesCount;
      CurrentMyScreen.CBoxes        :=  CScreens[aScreenID]^.CBoxes;
      CurrentMyScreen.Boxes_RoundCount   :=  CScreens[aScreenID]^.Boxes_RoundCount;
      CurrentMyScreen.Boxes_Round        :=  CScreens[aScreenID]^.Boxes_Round;
    end
  else
    begin
      CurrentMyScreen.Color        :=  DScreens[aScreenID]^.Color;
      CurrentMyScreen.Width        :=  DScreens[aScreenID]^.Width;
      CurrentMyScreen.Height       :=  DScreens[aScreenID]^.Height;
      CurrentMyScreen.ObjectsCount :=  DScreens[aScreenID]^.ObjectsCount;
      CurrentMyScreen.LabelsCount   :=  DScreens[aScreenID]^.LabelsCount;
      CurrentMyScreen.Labels        :=  DScreens[aScreenID]^.Labels;
      CurrentMyScreen.CLabelsCount   :=  DScreens[aScreenID]^.CLabelsCount;
      CurrentMyScreen.CLabels        :=  DScreens[aScreenID]^.CLabels;
      CurrentMyScreen.BoxesCount   :=  DScreens[aScreenID]^.BoxesCount;
      CurrentMyScreen.Boxes        :=  DScreens[aScreenID]^.Boxes;
      CurrentMyScreen.Boxes_RoundCount   :=  DScreens[aScreenID]^.Boxes_RoundCount;
      CurrentMyScreen.Boxes_Round        :=  DScreens[aScreenID]^.Boxes_Round;
    end;
end;

procedure DrawScreen(aScreenID : word);
var order : byte;
var label_idx : byte;
    local_label : ^TLabel;
var clabel_idx : byte;
    local_clabel : ^TCLabel;
var image_idx : byte;
    local_image : ^TImage;
var box_idx : byte;
    local_box : ^TBox;
var cbox_idx : byte;
    local_cbox : ^TCBox;
var round_box_idx : byte;
    local_round_box : ^TBox_Round;
var save_bled, save_bled_direction : byte;

  begin
    object_pressed := 0;
    order := 0;
    label_idx := 0;
    clabel_idx := 0;
    image_idx := 0;
    box_idx := 0;
    cbox_idx := 0;
    round_box_idx := 0;
    SetCurrentMyScreenByIndex(aScreenID);
    CurrentScreenID := aScreenID;

    if (display_width <> CurrentMyScreen.Width) or (display_height <> CurrentMyScreen.Height) then
      begin
        save_bled := TFT_BLED;
        save_bled_direction := TFT_BLED_Direction;
        TFT_BLED_Direction := 0;
        TFT_BLED           := 0;
        TFT_Set_Active(@Set_Index, @Write_Command, @Write_Data);
        TFT_Init(CurrentMyScreen.Width, CurrentMyScreen.Height);
        TP_TFT_Init(CurrentMyScreen.Width, CurrentMyScreen.Height, 13, 12);                                  // Initialize touch panel
        TP_TFT_Set_ADC_Threshold(ADC_THRESHOLD);                              // Set touch panel ADC threshold
        TFT_Fill_Screen(CurrentMyScreen.Color);
        display_width := CurrentMyScreen.Width;
        display_height := CurrentMyScreen.Height;
        TFT_BLED           := save_bled;
        TFT_BLED_Direction := save_bled_direction;
      end
    else
      TFT_Fill_Screen(CurrentMyScreen.Color);


    while (order < CurrentMyScreen.ObjectsCount) do
      begin
      if (label_idx < CurrentMyScreen.LabelsCount) then
        begin
          local_label := GetLabel(label_idx);
          if (order = local_label^.Order) then
            begin
              Inc(label_idx);
              Inc(order);
              DrawLabel(local_label);
            end
        end;

      if (clabel_idx < CurrentMyScreen.CLabelsCount) then
        begin
          local_clabel := GetCLabel(clabel_idx);
          if (order = local_clabel^.Order) then
            begin
              Inc(clabel_idx);
              Inc(order);
              DrawCLabel(local_clabel);
            end
        end;

      if (box_idx < CurrentMyScreen.BoxesCount) then
        begin
          local_box := GetBox(box_idx);
          if (order = local_box^.Order) then
            begin
              Inc(box_idx);
              Inc(order);
              DrawBox(local_box);
            end
        end;

      if (cbox_idx < CurrentMyScreen.CBoxesCount) then
        begin
          local_cbox := GetCBox(cbox_idx);
          if (order = local_cbox^.Order) then
            begin
              Inc(cbox_idx);
              Inc(order);
              DrawCBox(local_cbox);
            end
        end;

    if (round_box_idx < CurrentMyScreen.Boxes_RoundCount) then
      begin
        local_round_box := GetBox_Round(round_box_idx);
        if (order = local_round_box^.Order) then
          begin
            Inc(round_box_idx);
            Inc(order);
            DrawRoundBox(local_round_box);
          end
      end;

      if (image_idx < CurrentMyScreen.ImagesCount) then
        begin
          local_image := GetImage(image_idx);
          if (order = local_image^.Order) then
            begin
              Inc(image_idx);
              Inc(order);
              DrawImage(local_image);
            end
        end;

    end;
end;

procedure Get_Object( X : word; Y : word);
var counter : integer;
  begin
    label_order         := -1;
    clabel_order        := -1;
    image_order         := -1;
    box_order           := -1;
    cbox_order          := -1;
    box_round_order     := -1;
    //  Labels
    counter := CurrentMyScreen.LabelsCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_label := GetLabel(_object_count);
        if (local_label^.Active = 1) then
          if (IsInsideObject(X, Y, local_label^.Left, local_label^.Top,
                             local_label^.Width, local_label^.Height) = 1) then
            begin
              label_order := local_label^.Order;
              exec_label := local_label;
            end;
      end;

    //  CLabels
    counter := CurrentMyScreen.CLabelsCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_clabel := GetCLabel(_object_count);
        if (local_clabel^.Active = 1) then
          if (IsInsideObject(X, Y, local_clabel^.Left, local_clabel^.Top,
                             local_clabel^.Width, local_clabel^.Height) = 1) then
            begin
              clabel_order := local_clabel^.Order;
              exec_clabel := local_clabel;
            end;
      end;

    //  Images
    counter := CurrentMyScreen.ImagesCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_image := GetImage(_object_count);
        if (local_image^.Active = 1) then
          if (IsInsideObject(X, Y, local_image^.Left, local_image^.Top,
                             local_image^.Width, local_image^.Height) = 1) then
            begin
              image_order := local_image^.Order;
              exec_image := local_image;
            end;
      end;

    //  Boxes
    counter := CurrentMyScreen.BoxesCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_box := GetBox(_object_count);
        if (local_box^.Active = 1) then
          if (IsInsideObject(X, Y, local_box^.Left, local_box^.Top,
                             local_box^.Width, local_box^.Height) = 1) then
            begin
              box_order := local_box^.Order;
              exec_box := local_box;
            end;
      end;

    //  CBoxes
    counter := CurrentMyScreen.CBoxesCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_cbox := GetCBox(_object_count);
        if (local_cbox^.Active = 1) then
          if (IsInsideObject(X, Y, local_cbox^.Left, local_cbox^.Top,
                             local_cbox^.Width, local_cbox^.Height) = 1) then
            begin
              cbox_order := local_cbox^.Order;
              exec_cbox := local_cbox;
            end;
      end;

    //  Boxes with Round Edges
    counter := CurrentMyScreen.Boxes_RoundCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_round_box := GetBox_Round(_object_count);
        if (local_round_box^.Active = 1) then
          if (IsInsideObject(X, Y, local_round_box^.Left, local_round_box^.Top,
                             local_round_box^.Width, local_round_box^.Height) = 1) then
            begin
              box_round_order := local_round_box^.Order;
              exec_round_box := local_round_box;
            end;
      end;

    _object_count := -1;
    if (label_order >  _object_count ) then
      _object_count := label_order;
    if (clabel_order >  _object_count ) then
      _object_count := clabel_order;
    if (image_order >  _object_count ) then
      _object_count := image_order;
    if (box_order >  _object_count ) then
      _object_count := box_order;
    if (cbox_order >  _object_count ) then
      _object_count := cbox_order;
    if (box_round_order >  _object_count ) then
      _object_count := box_round_order;
  end;


procedure Process_TP_Press( X : word; Y : word); // static
  begin
    exec_label          := 0;
    exec_clabel         := 0;
    exec_image          := 0;
    exec_box            := 0;
    exec_cbox           := 0;
    exec_round_box      := 0;

    Get_Object(X, Y);


    if (_object_count <> -1) then
      begin
        if (_object_count = label_order) then
          if (exec_label^.Active = 1) then
            if (exec_label^.OnPressPtr <> 0) then
              begin
                exec_label^.OnPressPtr^();
                exit;
              end;

        if (_object_count = clabel_order) then
          if (exec_clabel^.Active = 1) then
            if (exec_clabel^.OnPressPtr <> 0) then
              begin
                exec_clabel^.OnPressPtr^();
                exit;
              end;

        if (_object_count = image_order) then
          if (exec_image^.Active = 1) then
            if (exec_image^.OnPressPtr <> 0) then
              begin
                exec_image^.OnPressPtr^();
                exit;
              end;

        if (_object_count = box_order) then
          if (exec_box^.Active = 1) then
            if (exec_box^.OnPressPtr <> 0) then
              begin
                exec_box^.OnPressPtr^();
                exit;
              end;

        if (_object_count = cbox_order) then
          if (exec_cbox^.Active = 1) then
            if (exec_cbox^.OnPressPtr <> 0) then
              begin
                exec_cbox^.OnPressPtr^();
                exit;
              end;

        if (_object_count = box_round_order) then
          if (exec_round_box^.Active = 1) then
            if (exec_round_box^.OnPressPtr <> 0) then
              begin
                exec_round_box^.OnPressPtr^();
                exit;
              end;

      end;
  end;

procedure Process_TP_Up( X : word; Y : word); // static
  begin
    case PressedObjectType of
      // Box
      6 : begin
            if (PressedObject <> 0) then
              begin
                exec_box := ^TBox(PressedObject);
                if ((exec_box^.PressColEnabled = 1) and (exec_box^.OwnerScreenID = CurrentScreenID)) then
                    DrawBox(exec_box);
              end;
          end;
      // CBox
      14 : begin
            if (PressedObject <> 0) then
              begin
                exec_cbox := ^TCBox(PressedObject);
                if ((exec_cbox^.PressColEnabled = 1) and (exec_cbox^.OwnerScreenID = CurrentScreenID)) then
                    DrawCBox(exec_cbox);
              end;
          end;
      // Round Box
      7 : begin
            if (PressedObject <> 0) then
              begin
                exec_round_box := ^TBox_Round(PressedObject);
                if ((exec_round_box^.PressColEnabled = 1) and (exec_round_box^.OwnerScreenID = CurrentScreenID)) then
                    DrawRoundBox(exec_round_box);
              end;
          end;
    end;

    exec_label          := 0;
    exec_clabel          := 0;
    exec_image          := 0;

    Get_Object(X, Y);

    if (_object_count <> -1) then
      begin
        // Labels
        if (_object_count = label_order) then
          begin
            if (exec_label^.Active = 1) then
              begin
                if (exec_label^.OnUpPtr <> 0) then
                  exec_label^.OnUpPtr();
                if PressedObject = TPointer(exec_label) then
                  if (exec_label^.OnClickPtr <> 0) then
                    exec_label^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // CLabels
        if (_object_count = clabel_order) then
          begin
            if (exec_clabel^.Active = 1) then
              begin
                if (exec_clabel^.OnUpPtr <> 0) then
                  exec_clabel^.OnUpPtr();
                if PressedObject = TPointer(exec_clabel) then
                  if (exec_clabel^.OnClickPtr <> 0) then
                    exec_clabel^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Images
        if (_object_count = image_order) then
          begin
            if (exec_image^.Active = 1) then
              begin
                if (exec_image^.OnUpPtr <> 0) then
                  exec_image^.OnUpPtr();
                if PressedObject = TPointer(exec_image) then
                  if (exec_image^.OnClickPtr <> 0) then
                    exec_image^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Boxes
        if (_object_count = box_order) then
          begin
            if (exec_box^.Active = 1) then
              begin
                if (exec_box^.OnUpPtr <> 0) then
                  exec_box^.OnUpPtr();
                if PressedObject = TPointer(exec_box) then
                  if (exec_box^.OnClickPtr <> 0) then
                    exec_box^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // CBoxes
        if (_object_count = cbox_order) then
          begin
            if (exec_cbox^.Active = 1) then
              begin
                if (exec_cbox^.OnUpPtr <> 0) then
                  exec_cbox^.OnUpPtr();
                if PressedObject = TPointer(exec_cbox) then
                  if (exec_cbox^.OnClickPtr <> 0) then
                    exec_cbox^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Boxes with Round Edges
        if (_object_count = box_round_order) then
          begin
            if (exec_round_box^.Active = 1) then
              begin
                if (exec_round_box^.OnUpPtr <> 0) then
                  exec_round_box^.OnUpPtr();
                if PressedObject = TPointer(exec_round_box) then
                  if (exec_round_box^.OnClickPtr <> 0) then
                    exec_round_box^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

      end;
    PressedObject := 0;
    PressedObjectType := -1;
  end;

procedure Process_TP_Down( X : word; Y : word); // static
  begin
    object_pressed      := 0;
    exec_label          := 0;
    exec_clabel         := 0;
    exec_image          := 0;
    exec_box            := 0;
    exec_cbox           := 0;
    exec_round_box      := 0;

    Get_Object(X, Y);

    if (_object_count <> -1) then
      begin
        if (_object_count = label_order) then
          if (exec_label^.Active = 1) then
            begin
              PressedObject := TPointer(exec_label);
              PressedObjectType := 2;
              if (exec_label^.OnDownPtr <> 0) then
                begin
                  exec_label^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = clabel_order) then
          if (exec_clabel^.Active = 1) then
            begin
              PressedObject := TPointer(exec_clabel);
              PressedObjectType := 10;
              if (exec_clabel^.OnDownPtr <> 0) then
                begin
                  exec_clabel^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = image_order) then
          if (exec_image^.Active = 1) then
            begin
              PressedObject := TPointer(exec_image);
              PressedObjectType := 3;
              if (exec_image^.OnDownPtr <> 0) then
                begin
                  exec_image^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = box_order) then
          if (exec_box^.Active = 1) then
            begin
              if (exec_box^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawBox(exec_box);
                end;
              PressedObject := TPointer(exec_box);
              PressedObjectType := 6;
              if (exec_box^.OnDownPtr <> 0) then
                begin
                  exec_box^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = cbox_order) then
          if (exec_cbox^.Active = 1) then
            begin
              if (exec_cbox^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawCBox(exec_cbox);
                end;
              PressedObject := TPointer(exec_cbox);
              PressedObjectType := 14;
              if (exec_cbox^.OnDownPtr <> 0) then
                begin
                  exec_cbox^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = box_round_order) then
          if (exec_round_box^.Active = 1) then
            begin
              if (exec_round_box^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawRoundBox(exec_round_box);
                end;
              PressedObject := TPointer(exec_round_box);
              PressedObjectType := 7;
              if (exec_round_box^.OnDownPtr <> 0) then
                begin
                  exec_round_box^.OnDownPtr^();
                  exit;
                end;
            end;

      end;
  end;

procedure Check_TP();
  begin
    if (TP_TFT_Press_Detect()) then
      begin
        // After a PRESS is detected read X-Y and convert it to Display dimensions space
        if (TP_TFT_Get_Coordinates(@Xcoord, @Ycoord) = 0) then
          begin
            Process_TP_Press(Xcoord, Ycoord);
            if PenDown = 0 then
              begin
                PenDown := 1;
                Process_TP_Down(Xcoord, Ycoord);
              end;
          end;
      end
    else if PenDown = 1 then
      begin
        PenDown := 0;
        Process_TP_Up(Xcoord, Ycoord);
      end;
  end;

procedure Init_MCU();
  begin
    TRISE := 0;
    TFT_DataPort_Direction := 0;
    CLKDIV := CLKDIV and 0xFFE0;    // PLLPRE<4:0> = 0  ->  N1 = 2    8MHz / 2 = 4MHz
                                    // (must be within 0.8 MHz to 8 MHz range)
    PLLFBD :=   30;                 // PLLDIV<8:0> = 30 ->  M = 32    4MHz * 32 = 128MHz
                                    // (must be within 100 MHz to 200 MHz range)
    PLLPOST_1_bit := 0;
    PLLPOST_0_bit := 0;             // PLLPOST<1:0> = 0 ->  N2 = 2    128MHz / 2 = 64MHz
                                    // (must be within 12.5 MHz to 80 MHz range)
    Delay_ms(150);
    TFT_Set_Default_Mode();
    TP_TFT_Rotate_180(0);
    TFT_Set_Active(@Set_Index, @Write_Command, @Write_Data);
  end;

procedure Start_TP();
  begin
    Init_MCU();

    InitializeTouchPanel();

    // You can get calibration constants using touch panel calibration example
    TP_TFT_Set_Calibration_Consts(157, 780, 85, 749);    // Set calibration constants

    InitializeObjects();
    display_width := ScreenStart.Width;
    display_height := ScreenStart.Height;
    DrawScreen(32768);
  end;

end.
