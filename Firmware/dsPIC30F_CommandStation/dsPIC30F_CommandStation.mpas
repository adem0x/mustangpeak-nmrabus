program NMRABusCommandStation;
// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-10-07:   Created
//
// * Description:
//    Implements a NMRABus based Command Station
//
//
// ******************************************************************************
 
uses
  NMRAnetStateMachine,
  NMRAnetDefines,
  NMRAnetDCC,
  CANDefines,
  CANStorage,
  MCU_Setup_dsPIC4013,
  _25AAxxxx,
  NMRAnetEventDefines,
  NMRAnetBufferPools,
  NMRAnetBufferPoolsDefines,
  NMRAnetNode,
  dsPIC30_Traps,
  NodeIDs;
  
{$I Options.inc}

var
  // DCC SIGNAL PINS
  Track_DCC_Out_Pin                 : sbit at LATB10_bit;
  Track_DCC_Out_Bar_Pin             : sbit at LATB9_bit;
  Track_DCC_Out_Pin_Direction       : sbit at TRISB10_bit;
  Track_DCC_Out_Pin_Bar_Direction   : sbit at TRISB9_bit;
  
  // EEPROM SPI PINS
  CS_Bank_0                         : sbit at LATB12_bit;
  CS_Bank_1                         : sbit at LATB11_bit;
  CS_Bank_0_Direction               : sbit at TRISB12_bit;
  CS_Bank_1_Direction               : sbit at TRISB12_bit;


// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_DCC_Timer(); iv IVT_ADDR_T1INTERRUPT;
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  T1IF_bit := 0;                                                                // Clear the Flag
  
  Track_DCC_Out_Pin := Track.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT;
  Track_DCC_Out_Bar_Pin := not Track_DCC_Out_Pin;
  
  // Now we can update the xxxx_DCC_PIN_BIT flags for the next 56us time slot
  NMRA_DCC_56us_TimeTick(@Track);                                                         // < 1us
  NMRA_DCC_TransmitterStateMachine(@Track);                                               // < 5us
  NMRA_DCC_LoadPacketIntoTransmitterStateMachine(@Track, PREAMBLE_BIT_COUNT_NORMAL);      // < 11us    Max
end;

procedure INTERRUPT_100ms_Timer(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 100m
var
  i: Integer;
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  T2IF_bit := 0;                                                                // Clear the Flag
  for i := 0 to Nodes.Count - 1 do
    NMRAnetStateMachine_100ms_Timer(Nodes.AllocatedList[i]);
end;

{$IFDEF PINCHANGE_INTERRUPT_ENABLE}
procedure INTERRUPT_Pin_Change_Notification(); iv IVT_ADDR_CNINTERRUPT;         // 93us when a TransmitCompleteOnCANLayerPacket called with new Tx Packet waiting
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  CNIF_bit := 0;     // Clear Flag
  PinChangeState := PORTF;
end;
{$ENDIF}

procedure TrainControlCallback(Node: PNMRAnetNode; Datagram: PDatagramBuffer);
//
// The Interrupts are LOCKED within the callbacks.
//
var
  i: Integer;
  TxDatagramBuffer: PDatagramBuffer;
begin
  UART1_Write_Text('Train Datagram:'+LF);
  if Datagram <> nil then
  begin
    if NMRAnetBufferPools_AllocateDatagramBuffer(TxDatagramBuffer, True) then
    begin
      TxDatagramBuffer^.Alias := Datagram^.Alias;
      TxDatagramBuffer^.SourceNodePtr := Generic16BitPointer( Node);
      TxDatagramBuffer^.DataBytes[0] := $C0;
      for i := 1 to Datagram^.DataBytes[1] do
        TxDatagramBuffer^.Databytes[i] := i;
      TxDatagramBuffer^.iByteCount := Datagram^.DataBytes[1] + 1;
    end;
  end
end;

procedure PrintBufferPools(var j: Integer);
begin
  if j = 50000 then
  begin
   NMRAnetBufferPools_Print;
   j := 0;
  end;
  Inc(j);
end;

procedure PrintMaxLoopTimes(var x, y: Word);
begin
  if x <> MaxTime_RX then
  begin
    FloatToStr(double( MaxTime_RX)*50e-3, s1);
    UART1_Write_Text('Interrupt Time: '+s1+'us'+LF);
    x := MaxTime_RX
  end;

  if y <> MaxTime_StateMachine then
  begin
    FloatToStr(double( MaxTime_StateMachine)*50e-3, s1);
    UART1_Write_Text('Statemachine Time: '+s1+'us'+LF);
    y := MaxTime_StateMachine
  end;
end;

// *******************
// MAIN LOOP
// *******************
var
  ActiveNode: PNMRAnetNode;
  i, j: Integer;
  x, y: Word;

begin
  Track_DCC_Out_Pin := 0;
  Track_DCC_Out_Pin := 0;
  Track_DCC_Out_Pin_Direction := 0;      // Output
  Track_DCC_Out_Pin_Bar_Direction := 0;  // Output
  
  LATD0_bit := 0;         // Debugging output
  TRISD0_bit := 0;        // Debugging output

  _25AAxxxx_Initialize;
  CANStorage_Initialize;
  NMRAnetStateMachine_Initialize(MUSTANGPEAK_ID_0_HI, MUSTANGPEAK_COMMANDSTATION_ID_0_LO);
  NMRA_DCC_Initialize;
  MCU_Setup_Initialize;                                                         // Start the timers and perpherials last

  NMRAnetDatagrams_SetCallback(DatagramTrainControlCallbackFunc, @TrainControlCallback);

  UART1_Write_Text('Starting'+LF);

  x := 0;
  y := 0;
  j := 0;
  i := 0;
  MaxTime_RX := 0;
  MaxTime_StateMachine := 0;
  
  while (TRUE) do
  begin
    //  PrintBufferPools(j);
    
    if C1IE_bit = 0 then
      UART1_Write_Text('CAN Interrupt Disabled!');
      
    ActiveNode := NMRAnetNode_NextNode;
    if ActiveNode <> PNMRAnetNode( nil) then
    begin
    
      TMR3 := 0;
      NMRAnetStateMachine_Process(ActiveNode);
      if TMR3 > MaxTime_StateMachine then MaxTime_StateMachine := TMR3;

      if NMRAnetNode_TestStateFlag(ActiveNode, NS_PERMITTED) then
      begin

      end;
    end;
  //  PrintMaxLoopTimes(x, y);
  end;
end.