program MustangpeakUSB_CAN;
// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

uses
  NodeIDs,
  CANStorage,
  CANDefines,
  NMRAnetCANReceive;

{$I Options.inc}

{$DEFINE TRACE_OVERRUNS}

const
  MAX_RX_BUFFER = 10;
  MAX_TX_BUFFER = 10;
  MAX_BUFFER_LEN = 30;

type
  PStr = ^array[0..0] of char;

type
  TUARTBuffer = array[0..MAX_BUFFER_LEN-1] of char;
  PUARTBuffer = ^TUARTBuffer;
  TRxBufferArray = array[0..MAX_RX_BUFFER-1] of TUARTBuffer;
  TTxBufferArray = array[0..MAX_TX_BUFFER-1] of TUARTBuffer;
  
var  
  RxBufferCharIndex: Word;
  iRxBufferHead, iRxBufferTail: Byte;
  RxBufferArray: TRxBufferArray;
  RxBufferArrayCount: Word;
  MaxRxBufferArrayCount: Word;
  
  TxBufferCharIndex: Word;
  iTxBufferHead, iTxBufferTail: Byte;
  TxBufferArray: TTxBufferArray;
  TxBufferArrayCount: Word;
  MaxTxBufferArrayCount: Word;

  PacketsReceived: Word;
  BytesReceived: Word;
  UART_Transmitting: Boolean;
  
  
function HexToDec(aValue: PStr; Count: Word): LongInt;
var
  l: LongInt;
begin
  Result := 0;
  l := 1;
  repeat
    dec(Count);
    if aValue^[Count] <= '9' then
      Result := Result + (Byte(aValue^[Count]) - 48) * l
    else 
      Result := Result + (Byte(aValue^[Count]) - 55) * l;
    l := l * 16;
  until Count = 0;
end;

  var
      Temp: Char;
procedure INTERRUPT_UART_RX(); iv IVT_ADDR_U1RXINTERRUPT;
var
//  Temp: Char;
  RxBufferHead: PUARTBuffer;
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  U1RXIF_Bit := 0;              // Clear the interrupt flag to receive the next byte

  Inc(BytesReceived);
  
  if OERR_U1STA_bit = 1 then
   Inc(BytesReceived);

  while U1STA and $0001 <> 0 do
  begin
    Temp := U1RXREG;
 //   if ((Temp >= '0') and (Temp <= ';')) or ((Temp >= 'A') and (Temp <= 'F')) or (Temp = #10) or (Temp = #13) or (Temp = 'N') or (Temp = ' ') or (Temp = 'X') or (Temp = 'S') then     // Throw away the carrage returns
  //  begin
    //  if (Temp <> ' ') and (Temp <> #10) and (Temp <> #13) then
      begin
        RxBufferHead := @RxBufferArray[iRxBufferHead];

        RxBufferHead^[RxBufferCharIndex] := Temp;
        if RxBufferHead^[RxBufferCharIndex] = ';' then
        begin

          Inc(PacketsReceived);

          Inc(iRxBufferHead);
          if iRxBufferHead >= MAX_RX_BUFFER then
            iRxBufferHead := 0;
          Inc(RxBufferArrayCount);

          if RxBufferArrayCount > MaxRxBufferArrayCount then
          MaxRxBufferArrayCount := RxBufferArrayCount;

          RxBufferCharIndex := 0;
        end else
          Inc(RxBufferCharIndex);
      end
 //   end else
 //     Inc(BytesReceived);
  end;
  OERR_U1STA_bit := 0;
end;

procedure INTERRUPT_UART_TX(); iv IVT_ADDR_U1TXINTERRUPT;
var
  i: Integer;
  TxBufferTail: PUARTBuffer;
begin
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  U1TXIF_Bit := 0;              // Clear the interrupt flag to send the next byte
  if TxBufferArrayCount > 0 then
  begin
    TxBufferTail := @TxBufferArray[iTxBufferTail];
    
    U1TXREG := TxBufferTail^[TxBufferCharIndex];
    if TxBufferTail^[TxBufferCharIndex] = #10 then
    begin   
    {  for i := 0 to MAX_BUFFER_LEN - 1 do
        TxBufferTail^[i] := #0;}
      
      Inc(iTxBufferTail);
      if iTxBufferTail >= MAX_TX_BUFFER then
        iTxBufferTail := 0;
      Dec(TxBufferArrayCount);
      
      TxBufferCharIndex := 0;
    end else
      Inc(TxBufferCharIndex);
  end else
    UART_Transmitting := False;
end;

procedure TIMER_ONE_INTERRUPT(); iv IVT_ADDR_T1INTERRUPT; ics ICS_AUTO;
var
  Temp: Char;
  RxBufferHead: PUARTBuffer;
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  T1IF_bit := 0;              // Clear the interrupt flag to receive the next byte


end;

procedure NMRAnetHook(CANBuffer: PCANBuffer; var DoDefault: Boolean);
const
  Terminator: array[0..2] of char = (';', #13, #10);
  
var
  s2: array[0..32] of char;
  i: Integer;
  TxBufferHead: PUARTBuffer;
begin
  DoDefault := False;
  
  TxBufferHead := @TxBufferArray[iTxBufferHead];
  
  TxBufferHead^ := ':X';
  
  if CANBuffer^.State and CBS_EXTENDED <> 0 then
    TxBufferHead^ := ':X'
  else
    TxBufferHead^ := ':S';

  LongWordToHex(CANBuffer^.ID, s2);
  TxBufferHead^ := TxBufferHead^+s2+'N';

  for i := 0 to CANBuffer^.DataCount - 1 do
  begin
    ByteToHex(CANBuffer^.DataBytes[i], s2);
    TxBufferHead^ := TxBufferHead^+s2
  end;
  TxBufferHead^ := TxBufferHead^+Terminator;
  
  Inc(iTxBufferHead);
  if iTxBufferHead >= MAX_TX_BUFFER then
    iTxBufferHead := 0;
  Inc(TxBufferArrayCount);
  
  if TxBufferArrayCount > MaxTxBufferArrayCount then
    MaxTxBufferArrayCount := TxBufferArrayCount;
    

  if not UART_Transmitting then
  begin
    U1TXIE_bit := 0;
    UART_Transmitting := True;
    TxBufferCharIndex := 0;
    U1TXIF_Bit := 1;   // Kick it off
    U1TXIE_bit := 1;
  end;
end;

procedure PrintMaxLoopTimes(var x, y: Word);
begin
  if x <> MaxTime_RX then
  begin
    FloatToStr(double( MaxTime_RX)*50e-3, s1);
    UART1_Write_Text('Interrupt Time: '+s1+'us'+LF);
    x := MaxTime_RX
  end;

  if y <> MaxTime_StateMachine then
  begin
    FloatToStr(double( MaxTime_StateMachine)*50e-3, s1);
    UART1_Write_Text('Statemachine Time: '+s1+'us'+LF);
    y := MaxTime_StateMachine
  end;
end;

procedure PrintPacketsProcessed(var pr: Word);
begin
  if PacketsReceived <> pr then
  begin
    WordToStr(PacketsReceived, s1);
    UART1_Write_Text('Packet Received: ' + s1);
    pr := PacketsReceived
  end;
end;


// *******************
// MAIN LOOP
// *******************
var
  i, j, Start: Word;
  CANBuffer: TCANBuffer;
  x, y, pr: Word;
  ShortCan: Word;
  RxBufferTail: PUARTBuffer;
  TempChar: Char;
begin
  CANStorage_Initialize;
  NMRAnetStateMachine_Initialize(MUSTANGPEAK_ID_0_HI, MUSTANGPEAK_ACCESSORYBOOSTER_ID_0_LO);
  MCU_Setup_Initialize;
  

  x := 0;
  y := 0;
  pr := 0;
  MaxTime_StateMachine := 0;
  MaxTime_RX := 0;
  
  UART_Write_Text('Testing');
  PacketsReceived := 0;
  BytesReceived := 0;
  
  iRxBufferHead := 0;
  iRxBufferTail := 0;
  RxBufferArrayCount := 0;
  RxBufferCharIndex := 0;
  MaxRxBufferArrayCount := 0;
  
  for i := 0 to MAX_RX_BUFFER - 1 do
    for j := 0 to MAX_BUFFER_LEN - 1 do
      RxBufferArray[i][j] := '';
      
  iTxBufferHead := 0;
  iTxBufferTail := 0;
  TxBufferArrayCount := 0;
  TxBufferCharIndex := 0;
  MaxTxBufferArrayCount := 0;
  UART_Transmitting := False;
  while (URXDA_U1STA_bit = 1) do TempChar := U1RXREG;
  OERR_U1STA_bit := 0;
  CN0PUE_bit          := 1;   // UART RX Pullup
  U1TXIE_bit          := 1;   // Enable the TX Interrupt after setting up the variables
  U1RXIE_bit          := 1;   // Enable the RX Interrupt, is enabled when needed
//  T1IE_bit := 1;            // Enable the Interrupt for Rx

  for i := 0 to MAX_TX_BUFFER - 1 do
    for j := 0 to MAX_BUFFER_LEN - 1 do
      TxBufferArray[i][j] := '';

  ShortCan := 0;
  
  NMRAnetCANReceive_SetCANLayerReceiveHook(@NMRAnetHook);
  NMRAnetCANReceive_SetNMRANetLayerReceiveHook(@NMRAnetHook);

  while (TRUE) do
  begin
    TMR3 := 0;
    if not CANStorage_ListFull(@TX_NMRAnetBufferList) then
    begin
      if RxBufferArrayCount > 0 then      // This MUST run faster than a new packet can be received
      begin
        RxBufferTail := @RxBufferArray[iRxBufferTail];
        CANBuffer.DataCount := 0;
        CANBuffer.State := 0;
        Start := 0;
        while (RxBufferTail^[Start] <> 'X') and (RxBufferTail^[Start] <> 'S') do
          Inc(Start);
        if RxBufferTail^[Start] = 'X' then
          CANBuffer.State := CBS_EXTENDED;
        i := Start + 1;
        while RxBufferTail^[i] <> 'N' do
          Inc(i);
        CANBuffer.ID := HexToDec(PStr( Word(@RxBufferTail^[Start+1])), i-Start-1);
        Inc(i);
        j := 0;
        while RxBufferTail^[i] <> ';' do
        begin
          Inc(CANBuffer.DataCount);
          CANBuffer.DataBytes[j] := HexToDec(PStr( Word(@RxBufferTail^[i])), 2);
          
          if (j=6) and (CANBuffer.DataBytes[j]=$A0) then
            j := j;
          
          Inc(j);
          i := i + 2;
        end;
        
      {  for i := 0 to MAX_BUFFER_LEN - 1 do
          RxBufferTail^[i] := #0;  }
          
        Inc(iRxBufferTail);
        if iRxBufferTail >= MAX_RX_BUFFER then
          iRxBufferTail := 0;
        Dec(RxBufferArrayCount);

        if CANStorage_AddToList(@TX_NMRAnetBufferList, @CANBuffer) then
          StartCANMessageEngine();
      end
    end;

 //   PrintMaxLoopTimes(x, y);
 //   PrintPacketsProcessed(pr);
    if TMR3 > MaxTime_StateMachine then  MaxTime_StateMachine := TMR3;
  end;

end.