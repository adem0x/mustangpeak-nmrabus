program NMRABus_Xpressnet;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

uses
  NMRABus,
  NMRABusUtilities,
  MCU_Setup_dsPIC4013,
  CANDefines,
  CANStorage,
  dsPIC30_Traps,
  NMRABusDatagrams,
  XpressnetDefines,
  XpressnetStateMachine,
  NodeIDs;

{$I Options.inc}

// ****************************************************************************
// procedure GetUniqueIDFunc
//
//  Description:   Callback from NMRABus to load the 48 Bit Unique ID
//
// ****************************************************************************
procedure GetUniqueIDFunc(var HiID, LoID: DWord);
begin
  LoID := MUSTANGPEAK_XPRESSNET_ID_0_LO;
  HiID := MUSTANGPEAK_ID_0_HI;
end;


// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_Timer_840ms(); iv IVT_ADDR_T3INTERRUPT;
begin 
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  T3IF_bit := 0;
  XpressnetStateMachine_840ms_TimeTick;
end;

procedure INTERRUPT_Timer_1ms(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 1m
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  T2IF_bit := 0;                                                                // Clear the Flag
  NMRABus_GlobalTimer;
end;

{$IFDEF XPRESSNET_UART_ENABLE}
procedure INTERRUPT_XPRESSNET_UART_RX(); iv IVT_ADDR_U2RXINTERRUPT;
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  U2RXIF_Bit := 0;              // Clear the interrupt flag to receive the next byte

  while (URXDA_U2STA_bit = 1) and (XpressnetStateMachineInfo.RS232.XPressNetData.StateMachineIndex < STATE_RS232_FULL)  do
  begin
    XpressnetStateMachine_UART_RX_StateMachine(@XpressnetStateMachineInfo, U2RXREG);
  end
end;
{$ENDIF}

{$IFDEF PINCHANGE_INTERRUPT_ENABLE}
procedure INTERRUPT_Pin_Change_Notification(); iv IVT_ADDR_CNINTERRUPT;         // 93us when a TransmitCompleteOnCANLayerPacket called with new Tx Packet waiting
var
  Flags: Byte;
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  CNIF_bit := 0;     // Clear Flag
  PinChangeState := PORTF;
end;
{$ENDIF}

procedure CANLayerReceiveHook(CANBuffer: PCANBuffer; var DoDefault: Boolean);
// WARNING: THIS IS CALLED IN THE CONTEXT OF THE INTERRUPT AND CAN NOT BE LONGER THAN
// IT TAKES TO RECEIVE THE NEXT CAN MESSAGE!!!!!!!!
begin

end;

procedure NMRABusPacketHandler(CANBuffer: PCANBuffer; var DoDefault: Boolean);
begin

end;

procedure DatagramPacketHandler(DatagramBuffer: PDatagramBuffer; var DoDefault: Boolean);
begin
end;

// *******************
// MAIN LOOP
// *******************
begin
  CANStorage_Initialize;
  MCU_Setup_Initialize;
  NMRABus_Initialize;
  NMRABusDatagrams_Initialize;
  XpressnetStateMachine_Initialize;

  NMRABus_Connect;
  NMRABus_SetCANLayerReceiveHook(@CANLayerReceiveHook);
  while (TRUE) do
    begin
      if not NMRABus_Permitted then
      begin
        NMRABusUtilities_RecreateAliasID;
        NMRABus_Connect;
      end;
      
      
      if NMRABus_Permitted then
      begin
        // NMRANet CAN Bus
        HandlePacketReceivedOnNMRABusLayer(@NMRABusPacketHandler);
        NMRABus_HandleDatagrams(@DatagramPacketHandler);
        
        XpressnetStateMachine_Process;
      end
    end;
end.