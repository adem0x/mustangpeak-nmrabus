unit NMRAnetAppDefines;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:
//    Implements program specific information such as Consumer/Producer EventIDs,
//    Buffer allocation sizes, CDI and ACDI Information, Protocol Support IDs, vNode
//    counts, etc.
//
// ******************************************************************************

uses
  CANDefines,
  NMRAnetDefines,
  NMRAnetEventDefines,
  NMRAnetMemoryConfigurationDefines;
  
{$I Options.inc}

// **************************************************************************************************************************************************************
// Virtual Nodes
// **************************************************************************************************************************************************************

const
  MAX_NODE_COUNT = 20;        // The number of Physical and vNodes this physical node support.  Note that these nodes are defined as the Node ID defined + 1 up to VIRTUAL_NODE_COUNT past that
                              // If the lower bits of this node are $0300 then the first Virtual Node is $0301 and the last is $0309 if the VIRTUAL_NODE_COUNT = 9
                              // It also MUST fall within the lower 3 byte boundry (this is due to the way I have defined HI/LO as 3 byte) so the max virtual nodes is 4095 with a base
                              // physical node starting at $0000;
                              
// **************************************************************************************************************************************************************
// Buffer Pool Allocation
// **************************************************************************************************************************************************************

const
  MAX_BASE_BUFFER_POOL             = MAX_NODE_COUNT + 4;                        // Number of Base Buffers to allocate for Messages , JMRI Interleaves all the nodes so we need a Buffer for every Node <;^(
  MAX_DATA_BUFFER_POOL             = 4;                                         // Number of CAN DataByte Buffers to allocate for Messages
  MAX_DATAGRAM_BUFFER_POOL         = 2;                                         // Number of Datagram Buffers to allocate for Messages


// **************************************************************************************************************************************************************
// Memory Configuration Protocol Supported Options
// **************************************************************************************************************************************************************
const
  MEMORY_CONFIG_OPTIONS: TMemConfigurationOptions = (
    MCO_UNALIGNED_READS or MCO_ACDI_MFG_READS or MCO_ACDI_USER_READS or MCO_ACDI_USER_WRITES,             // MemoryConfigOptions
    MCWL_ARBITRARY_BYTE,                                                                                  // MemoryConfigWriteLength
    MSI_CDI,                                                                                              // MemoryConfigHighestSpace
    MSI_ACDI_USER_INFO                                                                                    // MemoryConfigLowestSpace
  );

// **************************************************************************************************************************************************************
// ACDI Implementation
// **************************************************************************************************************************************************************

const
  MAX_ACDI_ARRAY = 59;
  TACDI_NODE_STRINGS: array[0..MAX_ACDI_ARRAY - 1] of byte = (
      $31,  // Version = 1
      $4D,$75,$73,$74,$61,$6E,$67,$70,$65,$61,$6B,$00,  // Mustangpeak
      $43,$53,$31,$30,$30,$00,  // CS100
      $30,$2E,$31,$00,  // 0.1
      $30,$2E,$33,$00,  // 0.3
      $31,  // Version = 1
      $5B,$55,$73,$65,$72,$20,$4E,$61,$6D,$65,$5D,$00,  // [User Name]
      $5B,$55,$73,$65,$72,$20,$44,$65,$73,$63,$72,$69,$70,$74,$69,$6F,$6E,$5D,$00  // [User Description]
    );
    
const
  MAX_VNODE_ACDI_ARRAY = 59;
  TACDI_VNODE_STRINGS: array[0..MAX_VNODE_ACDI_ARRAY - 1] of byte = (
      $31,  // Version = 1
      $4D,$75,$73,$74,$61,$6E,$67,$70,$65,$61,$6B,$00,  // Mustangpeak
      $4D,$4E,$31,$30,$30,$00,  // MN100
      $30,$2E,$32,$00,  // 0.2
      $30,$2E,$33,$00,  // 0.3
      $31,  // Version = 1
      $5B,$55,$73,$65,$72,$20,$4E,$61,$6D,$65,$5D,$00,  // [User Name]
      $5B,$55,$73,$65,$72,$20,$44,$65,$73,$63,$72,$69,$70,$74,$69,$6F,$6E,$5D,$00  // [User Description]
    );
    
// **************************************************************************************************************************************************************
// Protocol Identification Protocol (PIP)
// **************************************************************************************************************************************************************

const
  PIV_SUPPORTED_PROTOCOL_COUNT = 4;    // UPDATE THIS IF ADDING OR SUBTRACTING SUPPORTED PROTOCOLS
  PIV_SUPPORTED_PROTOCOLS: array[0..PIV_SUPPORTED_PROTOCOL_COUNT-1] of TPIVProtocolValueArray = (     // Look at the PIV_xxxx constants for more Protocols
    ($80, $00, $00, $00, $00, $00),                                             // PIV_PROTOCOL_ID_PROTOCOL
    ($40, $00, $00, $00, $00, $00),                                             // PIV_PROTOCOL_ID_DATAGRAM
    ($04, $00, $00, $00, $00, $00),                                             // PIV_PROTOCOL_ID_PRODUCER_CONSUMER
    ($00, $40, $00, $00, $00, $00)                                              // PIV_PROTOCOL_ID_CDI
    );
    
  // **************************************************************************************************************************************************************
  // Events for Physical Node (consumed and produced)
  // **************************************************************************************************************************************************************

  // DEFINED IN OPTIONS.INC
  // Set the number of Events that are Consumed and Produced by this Node
  {$IFDEF SUPPORT_AT_LEAST_ONE_CONSUMED_EVENT} MAX_SUPPORTED_EVENTS_CONSUMED = 1; {$ELSE} MAX_SUPPORTED_EVENTS_CONSUMED = 0; {$ENDIF}
  {$IFDEF SUPPORT_AT_LEAST_ONE_PRODUCED_EVENT} MAX_SUPPORTED_EVENTS_PRODUCED = 3; {$ELSE} MAX_SUPPORTED_EVENTS_PRODUCED = 0; {$ENDIF}

  MAX_SUPPORTED_EVENTS = MAX_SUPPORTED_EVENTS_PRODUCED + MAX_SUPPORTED_EVENTS_CONSUMED;

  // Defined the Values of the Events that are Consumed and Produced by this Node
  {$IFDEF SUPPORT_AT_LEAST_ONE_CONSUMED_EVENT}
  SUPPORTED_EVENTS_CONSUMED: array[0..MAX_SUPPORTED_EVENTS_CONSUMED-1] of TEventID = (
    ($01, $10, $00, $00, $00, $00, $FF, $FF)                                    // EVENT_EMERGENCY_STOP
  );
  {$ENDIF}
  {$IFDEF SUPPORT_AT_LEAST_ONE_PRODUCED_EVENT}
  SUPPORTED_EVENTS_PRODUCED: array[0..MAX_SUPPORTED_EVENTS_PRODUCED-1] of TEventID = (
    ($01, $10, $00, $00, $00, $00, $01, $00),                                   // EVENT_LC_DISTRICT_NODE
    ($01, $10, $00, $00, $00, $00, $01, $01),                                   // EVENT_LC_PROGRAMMING_NODE
    ($01, $10, $00, $00, $00, $00, $FF, $FF)                                    // EVENT_EMERGENCY_STOP
  );
  {$ENDIF}
  
  // **************************************************************************************************************************************************************
  // Events for Virtual Nodes (consumed and produced)
  // **************************************************************************************************************************************************************
  
  // Set the number of Events that are Consumed and Produced by this Node
  {$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_CONSUMED_EVENT} MAX_VNODE_SUPPORTED_EVENTS_CONSUMED = 1; {$ELSE} MAX_VNODE_SUPPORTED_EVENTS_CONSUMED = 0; {$ENDIF}
  {$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_PRODUCED_EVENT} MAX_VNODE_SUPPORTED_EVENTS_PRODUCED = 2; {$ELSE} MAX_VNODE_SUPPORTED_EVENTS_PRODUCED = 0; {$ENDIF}

  MAX_VNODE_SUPPORTED_EVENTS = MAX_VNODE_SUPPORTED_EVENTS_PRODUCED + MAX_VNODE_SUPPORTED_EVENTS_CONSUMED;

  // Defined the Values of the Events that are Consumed and Produced by this Node
  {$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_CONSUMED_EVENT}
  SUPPORTED_VNODE_EVENTS_CONSUMED: array[0..MAX_VNODE_SUPPORTED_EVENTS_CONSUMED-1] of TEventID = (
    ($01, $10, $00, $00, $00, $00, $FF, $FF)                                    // EVENT_EMERGENCY_STOP
  );
  {$ENDIF}
  {$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_PRODUCED_EVENT}
  SUPPORTED_VNODE_EVENTS_PRODUCED: array[0..MAX_VNODE_SUPPORTED_EVENTS_PRODUCED-1] of TEventID = (
    ($01, $10, $00, $00, $00, $00, $01, $03),                                   // EVENT_LC_MOBILE_NODE
    ($01, $10, $00, $00, $00, $00, $FF, $FF)                                    // EVENT_EMERGENCY_STOP
  );
  {$ENDIF}

implementation

end.