unit NMRAnetAppDefines;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:
//    Implements program specific information such as Consumer/Producer EventIDs,
//    Buffer allocation sizes, CDI and ACDI Information, Protocol Support IDs, vNode
//    counts, etc.
//
// ******************************************************************************

uses
  CANDefines,
  NMRAnetDefines,
  NMRAnetEventDefines;
  
{$I Options.inc}

const
  MAX_BASE_BUFFER_POOL             = 4;                                         // Number of Base Buffers to allocate for Messages
  MAX_DATA_BUFFER_POOL             = 4;                                         // Number of CAN DataByte Buffers to allocate for Messages
  MAX_DATAGRAM_BUFFER_POOL         = 3;                                         // Number of Datagram Buffers to allocate for Messages


const
  MAX_ACDI_ARRAY = 70;
  TACDI_NODE_STRINGS: array[0..MAX_ACDI_ARRAY - 1] of byte = (
      49,  // Version = 1
      77,117,115,116,97,110,103,112,101,97,107,0,  // Mustangpeak
      67,83,49,48,48,0,  // CS100
      48,46,48,46,48,46,49,0,  // 0.0.0.1
      48,46,48,46,48,46,50,0,  // 0.0.0.2
      49,  // Version = 1
      68,67,67,32,67,111,109,109,97,110,100,32,83,116,97,116,105,111,110,0,  // DCC Command Station
      82,105,99,111,32,68,105,115,116,114,105,99,116,0  // Rico District
    );
    
const
  MAX_VNODE_ACDI_ARRAY = 63;
  TACDI_VNODE_STRINGS: array[0..MAX_VNODE_ACDI_ARRAY - 1] of byte = (
      49,  // Version = 1
      77,117,115,116,97,110,103,112,101,97,107,0,  // Mustangpeak
      77,78,49,48,48,0,  // MN100
      48,46,48,46,48,46,49,0,  // 0.0.0.1
      48,46,48,46,48,46,50,0,  // 0.0.0.2
      49,  // Version = 1
      68,67,67,32,77,111,98,105,108,101,32,78,111,100,101,0,  // DCC Mobile Node
      84,114,97,105,110,32,78,111,100,101,0  // Train Node
    );
  

  MAX_NODE_COUNT = 1;        // The number of Physical and vNodes this physical node support.  Note that these nodes are defined as the Node ID defined + 1 up to VIRTUAL_NODE_COUNT past that
                              // If the lower bits of this node are $0300 then the first Virtual Node is $0301 and the last is $0309 if the VIRTUAL_NODE_COUNT = 9
                              // It also MUST fall within the lower 3 byte boundry (this is due to the way I have defined HI/LO as 3 byte) so the max virtual nodes is 4095 with a base
                              // physical node starting at $0000;

const
  PIV_SUPPORTED_PROTOCOL_COUNT = 4;    // UPDATE THIS IF ADDING OR SUBTRACTING SUPPORTED PROTOCOLS
  PIV_SUPPORTED_PROTOCOLS: array[0..PIV_SUPPORTED_PROTOCOL_COUNT-1] of TPIVProtocolValueArray = (     // Look at the PIV_xxxx constants for more Protocols
    ($80, $00, $00, $00, $00, $00),                                             // PIV_PROTOCOL_ID_PROTOCOL
    ($40, $00, $00, $00, $00, $00),                                             // PIV_PROTOCOL_ID_DATAGRAM
    ($04, $00, $00, $00, $00, $00),                                             // PIV_PROTOCOL_ID_PRODUCER_CONSUMER
    ($00, $40, $00, $00, $00, $00)                                              // PIV_PROTOCOL_ID_CDI
    );

  // DEFINED IN OPTIONS.INC
  // Set the number of Events that are Consumed and Produced by this Node
  {$IFDEF SUPPORT_AT_LEAST_ONE_CONSUMED_EVENT} MAX_SUPPORTED_EVENTS_CONSUMED = 1; {$ELSE} MAX_SUPPORTED_EVENTS_CONSUMED = 0; {$ENDIF}
  {$IFDEF SUPPORT_AT_LEAST_ONE_PRODUCED_EVENT} MAX_SUPPORTED_EVENTS_PRODUCED = 3; {$ELSE} MAX_SUPPORTED_EVENTS_PRODUCED = 0; {$ENDIF}

  MAX_SUPPORTED_EVENTS = MAX_SUPPORTED_EVENTS_PRODUCED + MAX_SUPPORTED_EVENTS_CONSUMED;

  // Defined the Values of the Events that are Consumed and Produced by this Node
  {$IFDEF SUPPORT_AT_LEAST_ONE_CONSUMED_EVENT}
  SUPPORTED_EVENTS_CONSUMED: array[0..MAX_SUPPORTED_EVENTS_CONSUMED-1] of TEventID = (
    ($01, $10, $00, $00, $00, $00, $FF, $FF)                                    // EVENT_EMERGENCY_STOP
  );
  {$ENDIF}
  {$IFDEF SUPPORT_AT_LEAST_ONE_PRODUCED_EVENT}
  SUPPORTED_EVENTS_PRODUCED: array[0..MAX_SUPPORTED_EVENTS_PRODUCED-1] of TEventID = (
    ($01, $10, $00, $00, $00, $00, $01, $00),                                   // EVENT_LC_DISTRICT_NODE
    ($01, $10, $00, $00, $00, $00, $01, $01),                                   // EVENT_LC_PROGRAMMING_NODE
    ($01, $10, $00, $00, $00, $00, $FF, $FF)                                    // EVENT_EMERGENCY_STOP
  );
  {$ENDIF}
  
  // Set the number of Events that are Consumed and Produced by this Node
  {$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_CONSUMED_EVENT} MAX_VNODE_SUPPORTED_EVENTS_CONSUMED = 1; {$ELSE} MAX_VNODE_SUPPORTED_EVENTS_CONSUMED = 0; {$ENDIF}
  {$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_PRODUCED_EVENT} MAX_VNODE_SUPPORTED_EVENTS_PRODUCED = 2; {$ELSE} MAX_VNODE_SUPPORTED_EVENTS_PRODUCED = 0; {$ENDIF}

  MAX_VNODE_SUPPORTED_EVENTS = MAX_VNODE_SUPPORTED_EVENTS_PRODUCED + MAX_VNODE_SUPPORTED_EVENTS_CONSUMED;

  // Defined the Values of the Events that are Consumed and Produced by this Node
  {$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_CONSUMED_EVENT}
  SUPPORTED_VNODE_EVENTS_CONSUMED: array[0..MAX_VNODE_SUPPORTED_EVENTS_CONSUMED-1] of TEventID = (
    ($01, $10, $00, $00, $00, $00, $FF, $FF)                                    // EVENT_EMERGENCY_STOP
  );
  {$ENDIF}
  {$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_PRODUCED_EVENT}
  SUPPORTED_VNODE_EVENTS_PRODUCED: array[0..MAX_VNODE_SUPPORTED_EVENTS_PRODUCED-1] of TEventID = (
    ($01, $10, $00, $00, $00, $00, $01, $03),                                   // EVENT_LC_MOBILE_NODE
    ($01, $10, $00, $00, $00, $00, $FF, $FF)                                    // EVENT_EMERGENCY_STOP
  );
  {$ENDIF}

implementation

end.