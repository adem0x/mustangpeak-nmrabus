// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:
//    Implements a NMRABus based Command Station
//
// ******************************************************************************
program NMRABusCommandStation;

{*
 * Project name:
     NMRABusCommandStation
 * Copyright:
     (c) Mustangpeak Software 2012
 * Revision History:
     20120108:
       - initial release;
 * Description:
 *}
 
uses
  NMRABus,
  CAN_Data,
  MCU_Setup_dsPIC4013,
  _25AAxxxx,
  NMRABusDCC,
  NMRABusNodeItems,
  NMRABusAddressSlots,
  NodeIDs;
  
{$I Options.inc}

// Mustangpeak NMRANet allocated ID's  $05, $01, $01, $01, $07, $xx
const
  ID_1st : DWord = $08002F4F;          // TESTING ONLY
  ID_2nd : DWord = $08000003;          // TESTING ONLY

var
  // DCC SIGNAL PINS
  Track_DCC_Out_Pin                 : sbit at LATB10_bit;
  Track_DCC_Out_Bar_Pin             : sbit at LATB9_bit;
  Track_DCC_Out_Pin_Direction       : sbit at TRISB10_bit;
  Track_DCC_Out_Pin_Bar_Direction   : sbit at TRISB9_bit;
  
  // EEPROM SPI PINS
  CS_Bank_0                         : sbit at LATB12_bit;
  CS_Bank_1                         : sbit at LATB11_bit;
  CS_Bank_0_Direction               : sbit at TRISB12_bit;
  CS_Bank_1_Direction               : sbit at TRISB12_bit;

  GetUniqueIDFunc: PGetUniqueIDFunc;
  SignalTransmitOnCANLayerFunc: PSignalTransmitOnCANLayerFunc;
  SignalTransmitOnNMRALayerFunc: PSignalTransmitOnNMRALayerFunc;


// ****************************************************************************
// procedure UniqueID
//
//  Description:   Callback from NMRABus to load the 48 Bit Unique ID
//
// ****************************************************************************
procedure UniqueID(var HiID, LoID: DWord);
begin
  LoID := MUSTANGPEAK_COMMANDSTATION_ID_0_LO;
  HiID := MUSTANGPEAK_ID_0_HI;
end;

// ****************************************************************************
// procedure SignalTransmitOnCANLayer
//
//  Description:   Callback from NMRABus to start a CAN Message Transmit from the TX CAN Data Array
//
// ****************************************************************************
procedure SignalTransmitOnCANLayer;
begin
  TXB0IF_bit := 1;
end;

// ****************************************************************************
// procedure SignalTransmitOnNMRALayer
//
//  Description:   Callback from NMRABus to start a NMRA Message Transmit from the TX NMRA Data Array
//
// ****************************************************************************
procedure SignalTransmitOnNMRALayer;
begin
  TXB1IF_bit := 1;
end;


// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_DCC_Timer(); iv IVT_ADDR_T1INTERRUPT;
begin
  T1IF_bit := 0;                                                                // Clear the Flag
  
  Track_DCC_Out_Pin := Track.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT;
  Track_DCC_Out_Bar_Pin := not Track_DCC_Out_Pin;
  
  // Now we can update the xxxx_DCC_PIN_BIT flags for the next 56us time slot
  NMRA_DCC_56us_TimeTick(@Track);                                                          // < 1us
  NMRA_DCC_TransmitterStateMachine(@Track);                                                // < 5us
  NMRA_DCC_LoadPacketIntoTransmitterStateMachine(@Track, PREAMBLE_BIT_COUNT_NORMAL);      // < 11us    Max
end;

procedure INTERRUPT_Global_Timer(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 1m
begin
  T2IF_bit := 0;                                                                // Clear the Flag
  NMRABus_GlobalTimer;
end;

procedure INTERRUPT_CAN_1(); iv IVT_ADDR_C1INTERRUPT;
begin
  C1IF_bit := 0;
  while (C1CTRL and $000E) shr 1 > 0 do                                         // Use the ICODE flags to quickly figure out who is needing attention
  begin
    case (C1CTRL and $000E) shr 1 of
      1: HandleCANError;                                                        // ERRIF and ERRIE are set
      2: begin end;                                                             // TX2IF and TX2IE are set
      3: begin
           TXB1IF_bit := 0;                                                     // Clear Transmitter Interrupt Flag
           HandleTransmitCompleteOnNMRALayerPacket;                               // TX1IF and TX1IE are set
         end;
      4: begin
           TXB0IF_bit := 0;                                                     // Clear Transmitter Interrupt Flag
           HandleTransmitCompleteOnCANLayerPacket;                              // TX0IF and TX0IE are set
         end;
      5: begin
           RXB1IF_bit := 0;                                                     // Clear Receive Interrupt Flag
           HandlePacketReceivedOnNMRABusLayer;                                  // RX1IF and RX1IE are set
         end;
      6: begin
           RXB0IF_bit := 0;
           HandlePacketReceivedOnCANLayer;                                        // RX0IF and RX0IE are set
         end;
      7: begin end;                                                             // WAKIF and WAKIE are set (wakeup)
    end
  end;
end;

procedure INTERRUPT_Pin_Change_Notification(); iv IVT_ADDR_CNINTERRUPT;         // 93us when a TransmitCompleteOnCANLayerPacket called with new Tx Packet waiting
begin
  CNIF_bit := 0;     // Clear Flag
  PinChangeState := PORTF;
end;


// *******************
// MAIN LOOP
// *******************

var
  Packet: TCAN_Packet;
  DCC_Message: TDCCPacket;
begin

  Track_DCC_Out_Pin := 0;
  Track_DCC_Out_Pin := 0;
  Track_DCC_Out_Pin_Direction := 0;      // Output
  Track_DCC_Out_Pin_Bar_Direction := 0;  // Output
  
  GetUniqueIDFunc := @UniqueID;                                                 // Callback to access the Node's Unique ID
  SignalTransmitOnCANLayerFunc := @SignalTransmitOnCANLayer;
  SignalTransmitOnNMRALayerFunc := @SignalTransmitOnNMRALayer;

  LATD0_bit := 0;         // Debugging output
  TRISD0_bit := 0;        // Debugging output

  _25AAxxxx_Initialize;
  NMRABusNodeItems_Initialize;
  CAN_Data_Initialize;
  NMRABus_Initialize;
  MCU_Setup_Initialize;
  NMRA_DCC_Initialize;
  AddressSlots_Initialize;
 
  UART1_Write_Text('Connecting'+LF);
  NMRABus_Connect;
  while (TRUE) do
    begin
      if not NMRABus_Connected then
      begin
        UART1_Write_Text('Reconnecting'+LF);
        NMRABus_RecreateAliasID;
        NMRABus_Connect;
      end;
      
      if NMRABus_Connected then
      begin
        
        UART1_Write_Text('Connected'+LF);

        NMRA_DCC_Packet_Init;                                                   // Send the 20 Idle Packets per the NMRA Spec
        
        CAN_Data_LoadPacket(@Packet, ID_2nd, 1, 0, 0, 0, 0, 0, 0, 0, Packet.Bytes[0], True);    // increment received data
        CAN_Data_TxListAddNMRABusLayerThroughLockedList(@Packet);
        
        while NMRABus_Connected do
        begin
          HandleLoPriorityReceivedCANLayerPackets;
          HandleLoPriorityReceivedNMRABusLayerPackets;
        
          if CAN_Data_RxNextPacketNMRABusLayer(Packet) then
          begin
            if Packet.Header = ID_1st then                                          // Message was received (interrupt) if it is ours then ...
            begin
              PORTB := Packet.Bytes[0];                                             // id correct, output data at PORTB
              Inc(Packet.Bytes[0]);
              Delay_ms(1000);
              CAN_Data_LoadPacket(@Packet, ID_2nd, 1, 0, 0, 0, 0, 0, 0, 0, Packet.Bytes[0], True);    // increment received data
              CAN_Data_TxListAddNMRABusLayerThroughLockedList(@Packet);
              
              NMRA_DCC_LoadPacket(@DCC_Message, $FF, $FF, $FF, $FF, $FF, 5);
              NMRA_DCC_QueuePacket(@Track, @DCC_Message, True);
            end
          end
        end
      end
    end;
end.