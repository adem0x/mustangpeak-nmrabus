program NMRABusCommandStation;
// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:
//    Implements a NMRABus based Command Station
//
// ******************************************************************************
 
uses
  NMRABus,
  NMRABusDefines,
  CANDefines,
  CANStorage,
  MCU_Setup_dsPIC4013,
  _25AAxxxx,
  NMRABusDCC,
  NMRABusNodeItems,
  NMRABusUtilities,
  NMRABusAddressSlots,
  NMRABusDatagrams,
  dsPIC30_Traps,
  NodeIDs;
  
{$I Options.inc}

var
  // DCC SIGNAL PINS
  Track_DCC_Out_Pin                 : sbit at LATB10_bit;
  Track_DCC_Out_Bar_Pin             : sbit at LATB9_bit;
  Track_DCC_Out_Pin_Direction       : sbit at TRISB10_bit;
  Track_DCC_Out_Pin_Bar_Direction   : sbit at TRISB9_bit;
  
  // EEPROM SPI PINS
  CS_Bank_0                         : sbit at LATB12_bit;
  CS_Bank_1                         : sbit at LATB11_bit;
  CS_Bank_0_Direction               : sbit at TRISB12_bit;
  CS_Bank_1_Direction               : sbit at TRISB12_bit;


// ****************************************************************************
// procedure GetUniqueIDFunc
//
//  Description:   Callback from NMRABus to load the 48 Bit Unique ID
//
// ****************************************************************************
procedure GetUniqueIDFunc(var HiID, LoID: DWord);
begin
  LoID := MUSTANGPEAK_COMMANDSTATION_ID_0_LO;
  HiID := MUSTANGPEAK_ID_0_HI;
end;


// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_DCC_Timer(); iv IVT_ADDR_T1INTERRUPT;
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  T1IF_bit := 0;                                                                // Clear the Flag
  
  Track_DCC_Out_Pin := Track.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT;
  Track_DCC_Out_Bar_Pin := not Track_DCC_Out_Pin;
  
  // Now we can update the xxxx_DCC_PIN_BIT flags for the next 56us time slot
  NMRA_DCC_56us_TimeTick(@Track);                                                          // < 1us
  NMRA_DCC_TransmitterStateMachine(@Track);                                                // < 5us
  NMRA_DCC_LoadPacketIntoTransmitterStateMachine(@Track, PREAMBLE_BIT_COUNT_NORMAL);      // < 11us    Max
end;

procedure INTERRUPT_1ms_Timer(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 1m
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  T2IF_bit := 0;                                                                // Clear the Flag
  NMRABus_1ms_Timer;
end;

{$IFDEF PINCHANGE_INTERRUPT_ENABLE}
procedure INTERRUPT_Pin_Change_Notification(); iv IVT_ADDR_CNINTERRUPT;         // 93us when a TransmitCompleteOnCANLayerPacket called with new Tx Packet waiting
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  CNIF_bit := 0;     // Clear Flag
  PinChangeState := PORTF;
end;
{$ENDIF}

// *******************
// MAIN LOOP
// *******************

var
  Packet: TCANBuffer;
  DCC_Message: TDCCPacket;
  Loop: DWord;
  s1: array[8] of char;
  s2: array[32] of char;
  laststate: word;
  datagram: TDatagram;
  i: Integer;
begin

  Track_DCC_Out_Pin := 0;
  Track_DCC_Out_Pin := 0;
  Track_DCC_Out_Pin_Direction := 0;      // Output
  Track_DCC_Out_Pin_Bar_Direction := 0;  // Output
  
  LATD0_bit := 0;         // Debugging output
  TRISD0_bit := 0;        // Debugging output

  _25AAxxxx_Initialize;
  NMRABusNodeItems_Initialize;
  CANStorage_Initialize;
  NMRABus_Initialize;
  MCU_Setup_Initialize;
  NMRA_DCC_Initialize;
  AddressSlots_Initialize;
  

  UART1_Write_Text('Connecting'+LF);
  
  Loop := 0;
  laststate := 0;
  

  while (TRUE) do
  begin
    NMRABus_Process;
    
  {  if Loop mod 100000 = 0 then
    begin
      for i := 0 to LEN_DATAGRAM_ARRAY - 1 do
      begin
        UART1_Write_Text(LF+LF);
        WordToHex(DatagramProcessor.iState, s1);
        s2 := 'Processor State:';
        UART1_Write_Text(s2+s1);
        UART1_Write_Text(LF);
        
        WordToHex(DatagramList[i].iState, s1);
        s2 := 'State:';
        UART1_Write_Text(s2+s1);
        UART1_Write_Text(LF);
        
        WordToHex(DatagramList[i].iWatchdog, s1);
        s2 := 'Watchdog:';
        UART1_Write_Text(s2+s1);
        UART1_Write_Text(LF);
        
        WordToHex(DatagramList[i].SourceAlias, s1);
        s2 := 'Alias:';
        UART1_Write_Text(s2+s1);
        UART1_Write_Text(LF);

      end;
    end;
    Inc(Loop);     }
    

    
    if NMRABusDatagrams_Remove(Datagram) then
    begin
      for i := 0 to LEN_DATAGRAM-1 do
      begin
        ByteToHex(Datagram[i], s1);
        UART1_Write_Text(s1);
      end;
      UART1_Write_Text(LF);
    end;
    
    if NMRABus.iState <> laststate then
    begin
      IntToStr(NMRABus.iState, s1);
      UART1_Write_Text(s1 + '  Flags: ');
      WordToHex(NMRABus.Responses.SimpleResponseFlags, s1);
      UART1_Write_Text(s1+LF);
   //   WordToHex(NMRABus.Node_Alias_ID, s1);
   //   UART1_Write_Text(s1+LF);
      laststate := NMRABus.iState
    end;
    

    if NMRABus_Permitted then
    begin
      NMRABusDatagrams_Process;

    end;
  end;
end.