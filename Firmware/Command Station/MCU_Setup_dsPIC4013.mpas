unit MCU_Setup_dsPIC4013;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

uses
  CANStorage;

{$I Options.inc}

const
  CAN_SWJ        = 1;               // Set up for 125Khz Baud Rate with a 16Mhz Crystal
  CAN_BRP        = 10;              // All in terms of number of Tq actual value in register will be BRP-1
  CAN_PHASESEG_1 = 3;               // All in terms of number of Tq actual value in register will be CAN_PHASESEG_1-1
  CAN_PHASESEG_2 = 3;               // All in terms of number of Tq actual value in register will be CAN_PHASESEG_2-1
  CAN_PROP_SEG   = 1;               // All in terms of number of Tq actual value in register will be CAN_PROP_SEG-1

procedure MCU_Setup_Initialize;

{$IFDEF PINCHANGE_INTERRUPT_ENABLE}
var
  PinChangeState: Word;
{$ENDIF}


implementation

procedure MCU_Setup_Initialize;
begin
  ADPCFG := 0xFFFF;                                     // configure AN pins as digital I/O

  {$IFDEF PINCHANGE_INTERRUPT_ENABLE}
  PinChangeState := 0;
  {$ENDIF}

  LATD0_bit := 0;
  TRISD0_bit := 0; // Output

  CAN1Initialize(CAN_SWJ, CAN_BRP, CAN_PHASESEG_1, CAN_PHASESEG_2, CAN_PROP_SEG, _CAN_CONFIG_SAMPLE_THRICE and _CAN_CONFIG_PHSEG2_PRG_ON and _CAN_CONFIG_XTD_MSG);   // Initialize external CANSPI module
  CAN1SetOperationMode(_CAN_MODE_CONFIG, 0xFF);                                 // set CONFIGURATION mode
  CANCKS_bit := 1;                                                              // Tcan = Tcy
  CAN1SetMask(_CAN_MASK_B1, LongInt( $08000000), _CAN_CONFIG_XTD_MSG);          // This is the CAN Layer so only filter on bit 27 that is a 0 if it is a CAN layer packet, a Message Layer packet is a 1
  CAN1SetFilter(_CAN_FILTER_B1_F1, LongInt( $00000000), _CAN_CONFIG_XTD_MSG);   // Bit 27 must be a 0 to filter in only the CAN layer packets
  CAN1SetMask(_CAN_MASK_B2, LongInt( $08000000), _CAN_CONFIG_XTD_MSG);          // This is the Message Layer so only filter on bit 27 that is a 1 if it is a Message layer packet, a CAN Layer packet is a 0
  CAN1SetFilter(_CAN_FILTER_B2_F1, LongInt( $08000000), _CAN_CONFIG_XTD_MSG);   // Bit 27 must be a 1 to filter in only the Message layer packets
  CAN1SetOperationMode(_CAN_MODE_NORMAL,0xFF);                                  // set NORMAL mode
  C1IP_0_bit := 0;                                                              // Priority 6 right behind the DCC if this is a command station
  C1IP_1_bit := 1;
  C1IP_2_bit := 1;
  TXB0IE_bit := 1;                                                              // Common Transmit Interrupt Enable
  RXB0IE_bit := 1;                                                              // CAN Layer Receive Interrupt Enable
  RXB1IE_bit := 1;                                                              // NMRABus Layer Receive Interrupt Enable
 // ERRIF_bit := 1;                                                               // CAN Error Interrupt Enable
  C1IF_bit := 0;                                                                // Clear the CAN interrupt flag
  C1IE_bit := 1;                                                                // Enabled the CAN 1 interrupt


  T2IP_0_bit := 0;          // Timer 2 Interrupt Priority = 2   (1 means off)
  T2IP_1_bit := 1;
  T2IP_2_bit := 0;
  PR2 := 20000;             // Clock ticks every 50ns * 20000 = 1ms interrupts
  T2IF_bit := 0;            // Clear T2IF
  T2IE_bit := 1;            // Enable the Interrupt
  TON_T2CON_bit := 1;       // Turn on
  
  {$IFDEF UART_ENABLE}
  // Initialize UART
  UART1_Init(115200);                       // Initialize UART module a
  Delay_ms(100);                            // Wait for UART module to stabilize
  U1MODE.ALTIO := 1;     // Un-comment this line to have Rx and Tx pins on their alternate locations. This is used to free the pins for other module, namely the SPI.
  {$ENDIF}
  
  T1IP_0_bit := 1;           // Timer 1 Interrupt Priority = 7
  T1IP_1_bit := 1;
  T1IP_2_bit := 1;
  PR1 := 1120;               // 56us timer with a 80Mhz clock
  T1IF_bit := 0;             // Clear T1IF
  T1IE_bit := 1;             // Enable Timer1 interrupts
  {$IFNDEF DCCTIMER_DISABLE}TON_T1CON_bit := 1;{$ENDIF} // Turn on

  {$IFDEF SPI_ENABLE}
  SPI1_Init();       // Initialize SPI1 module
  SPIEN_bit := 0;    // Disable SPI
  SPI1CON := SPI1CON and $FFE0;  // Clear the prescaler bits
  SPI1CON := SPI1CON or $0003 or $0018;  // Setup for 5 Mhz (with the CAN plug in boards)     $10=5Mhz, $14=6.67Mhz, $18 = 10Mhz
  SPI1IF_bit := 0;   // Clear the Flag
  SPI1IE_bit := 1;   // Enable SPI 1 Interrupts
  SPI1IP_0_bit := 1; // Interrupt Priority of the SPI is 1 (001)
  SPI1IP_1_bit := 0;
  SPI1IP_2_bit := 0;
  SPIEN_bit := 1;    // Enable the SPI
  {$ENDIF}

  // Make sure on startup of the SPI I don't get into reentrant problems with the interrupts
  // i.e. enabling the interrupts before we are done calling initilization SPI commands for the
  // slaves.

  {$IFDEF PINCHANGE_INTERRUPT_ENABLE}
  CNIF_bit := 0;            // Clear Flag
  CNIP_0_bit := 1;          // Interrupt Priority = 5
  CNIP_1_bit := 0;
  CNIP_2_bit := 1;
  CN17IE_bit := 1;          // RF4 (CN17) set for interrupt
  CNIE_bit := 1;            // Enable the Interrupt for Pin Change

  PinChangeState := PORTF;
  {$ENDIF}
  
  
  TON_T3CON_bit := 1;
  TON_T4CON_bit := 1;

end;

end.