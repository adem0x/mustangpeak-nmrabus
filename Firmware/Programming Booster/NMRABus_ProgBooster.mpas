program NMRABus_ProgBooster;

{*
 * Project name:
     NMRABusCommandStation
 * Copyright:
     (c) Mustangpeak Software 2012
 * Revision History:
     20120108:
       - initial release;
 * Description:
 *}

uses
  NMRABus,
  NMRABusUtilities,
  CANDefines,
  CANStorage,
  MCU_Setup_dsPIC4013,
  NodeIDs;

{$I Options.inc}

// ****************************************************************************
// procedure GetUniqueIDFunc
//
//  Description:   Callback from NMRABus to load the 48 Bit Unique ID
//
// ****************************************************************************
procedure GetUniqueIDFunc(var HiID, LoID: DWord);
begin
  LoID := MUSTANGPEAK_PROGRAMMINGBOOSTER_ID_0_LO;
  HiID := MUSTANGPEAK_ID_0_HI;
end;


// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_Global_Timer(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 1m
begin
  T2IF_bit := 0;                                                                // Clear the Flag
  NMRABus_GlobalTimer;
end;


{$IFDEF PINCHANGE_INTERRUPT_ENABLE}
procedure INTERRUPT_Pin_Change_Notification(); iv IVT_ADDR_CNINTERRUPT;         // 93us when a TransmitCompleteOnCANLayerPacket called with new Tx Packet waiting
var
  Flags: Byte;
begin
  CNIF_bit := 0;     // Clear Flag
  PinChangeState := PORTF;
end;
{$ENDIF}

procedure CANLayerReceiveHook(CANBuffer: PCANBuffer; var DoDefault: Boolean);
// WARNING: THIS IS CALLED IN THE CONTEXT OF THE INTERRUPT AND CAN NOT BE LONGER THAN
// IT TAKES TO RECEIVE THE NEXT CAN MESSAGE!!!!!!!!
begin

end;

procedure NMRABusPacketHandler(CANBuffer: PCANBuffer; var DoDefault: Boolean);
begin

end;


// *******************
// MAIN LOOP
// *******************
begin
  CANStorage_Initialize;
  NMRABus_Initialize;
  MCU_Setup_Initialize;

  NMRABus_Connect;
  NMRABus_SetCANLayerReceiveHook(@CANLayerReceiveHook);
  while (TRUE) do
    begin
      if not NMRABus_Permitted then
      begin
        NMRABusUtilities_RecreateAliasID;
        NMRABus_Connect;
      end;


      if NMRABus_Permitted then
      begin
        HandlePacketReceivedOnNMRABusLayer(@NMRABusPacketHandler)
      end
    end;
end.