program NMRABus_TrackBooster;

{*
 * Project name:
     NMRABusCommandStation
 * Copyright:
     (c) Mustangpeak Software 2012
 * Revision History:
     20120108:
       - initial release;
 * Description:
 *}

uses
  NMRABus,
  CAN_Data,
  MCU_Setup_dsPIC4013;

{$I Options.inc}

// Mustangpeak NMRANet allocated ID's  $05, $01, $01, $01, $07, $xx
const
  MUSTANGPEAK_TRACKBOOSTER_ID_0_LO = $00010704;  // The Bottom 3 Bytes
  MUSTANGPEAK_TRACKBOOSTER_ID_0_HI = $00050101;  // The Top 3 Bytes

  ID_1st : DWord = $08002F4F;          // TESTING ONLY
  ID_2nd : DWord = $08000003;          // TESTING ONLY

var
  GetUniqueID: PGetUniqueIDFunc;


// ****************************************************************************
// procedure UniqueID
//
//  Description:   Callback from NMRABus to load the 48 Bit Unique ID
//
// ****************************************************************************
procedure UniqueID(var HiID, LoID: DWord);
begin
  LoID := MUSTANGPEAK_TRACKBOOSTER_ID_0_LO;
  HiID := MUSTANGPEAK_TRACKBOOSTER_ID_0_HI;
end;


// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_Global_Timer(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 1m
begin
  T2IF_bit := 0;                                                                // Clear the Flag
  NMRABus_GlobalTimer;
end;

procedure INTERRUPT_CAN_1(); iv IVT_ADDR_C1INTERRUPT;
begin
  C1IF_bit := 0;
  while (C1CTRL and $000E) shr 1 > 0 do                                                 // Use the ICODE flags to quickly figure out who is needing attention
  begin
    case (C1CTRL and $000E) shr 1 of
      1: HandleCANError;                                                        // ERRIF and ERRIE are set
      2: begin end;                                                             // TX2IF and TX2IE are set
      3: HandleTransmitCompleteOnNMRALayerPacket;                               // TX1IF and TX1IE are set
      4: HandleTransmitCompleteOnCANLayerPacket;                                // TX0IF and TX0IE are set
      5: HandlePacketReceivedOnNMRABusLayer;                                    // RX1IF and RX1IE are set
      6: HandlePacketReceivedOnCANLayer;                                        // RX0IF and RX0IE are set
      7: begin end;                                                             // WAKIF and WAKIE are set (wakeup)
    end
  end;
end;

procedure INTERRUPT_Pin_Change_Notification(); iv IVT_ADDR_CNINTERRUPT;         // 93us when a TransmitCompleteOnCANLayerPacket called with new Tx Packet waiting
var
  Flags: Byte;
begin
  CNIF_bit := 0;     // Clear Flag
  PinChangeState := PORTF;
end;


// *******************
// MAIN LOOP
// *******************

var
  Packet: TCAN_Packet;
begin

  GetUniqueID := @UniqueID;


  CAN_Data_Initialize;
  NMRABus_Initialize;
  MCU_Setup_Initialize;
  NMRABus_Connect;
  while (TRUE) do
    begin
      if not NMRABus_Connected then
      begin
        NMRABus_RecreateAliasID;
        NMRABus_Connect;
      end;

      if NMRABus_Connected then
      begin
        CAN_Data_LoadPacket(@Packet, ID_2nd, 1, 0, 0, 0, 0, 0, 0, 0, Packet.Bytes[0], True);    // increment received data
        CAN_Data_TxListAddNMRABusLayerThroughLockedList(@Packet);

        while NMRABus_Connected do
        begin
          HandleLoPriorityReceivedCANLayerPackets;
          HandleLoPriorityReceivedNMRABusLayerPackets;

          if CAN_Data_RxNextPacketNMRABusLayer(Packet) then
          begin
            if Packet.Header = ID_1st then                                          // Message was received (interrupt) if it is ours then ...
            begin
              PORTB := Packet.Bytes[0];                                             // id correct, output data at PORTB
              Inc(Packet.Bytes[0]);
              Delay_ms(1000);
              CAN_Data_LoadPacket(@Packet, ID_2nd, 1, 0, 0, 0, 0, 0, 0, 0, Packet.Bytes[0], True);    // increment received data
              CAN_Data_TxListAddNMRABusLayerThroughLockedList(@Packet);
            end
          end
        end
      end
    end;
end.