unit NMRABusDatagrams;

uses
  NMRABusUtilities,
  CANDefines,
  NMRABusDefines,
  NMRABusDatagramDefines;

var
  DatagramList: TDatagramBufferArray;

procedure NMRABusDatagrams_Initialize;
procedure NMRABusDatagrams_Process(var Buffer: TCANBuffer);
function NMRABusDatagrams_NextPacket(var DatagramPacket: TDatagramBuffer): Boolean;

implementation

// *****************************************************************************
//  procedure NMRABusDatagrams_Initialize;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRABusDatagrams_Initialize;
var
  i: Integer;
begin
  for i := 0 to LEN_DATAGRAM_ARRAY - 1 do
    DatagramList[i].State := DPB_EMPTY;
end;


// *****************************************************************************
//  procedure CheckAndFreeAbandonBuffers;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure CheckAndFreeAbandonBuffers;
begin
end;

// *****************************************************************************
//  function TryAllocateBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function TryAllocateBuffer(Buffer: PDatagramBuffer): Boolean;
begin
  Result := True
end;

// *****************************************************************************
//  procedure NMRABusDatagrams_Process;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRABusDatagrams_Process(var Buffer: TCANBuffer);
var
  Datagram: PDatagramBuffer;
begin
  case Buffer.ID and FT_MTI_TYPE_MASK of
    FT_DATAGRAM_ONLY_FRAME :
      begin
        CheckAndFreeAbandonBuffers;
        if TryAllocateBuffer(Datagram) then
        begin
        end
      end;
    FT_DATAGRAM_FRAME_START :
      begin
        CheckAndFreeAbandonBuffers;
        if TryAllocateBuffer(Datagram) then
        begin
        end
      end;
    FT_DATAGRAM_FRAME :
      begin
      end;
    FT_DATAGRAM_FRAME_END :
      begin
      end;
  end;
end;

// *****************************************************************************
//  function NMRABusDatagrams_FindFirstEmptyBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function NMRABusDatagrams_FindFirstEmptyBuffer: Integer;
var
  i: Integer;
begin
  Result := -1;
  i := 0;
  while (Result < 0) and (i < LEN_DATAGRAM_ARRAY) do
  begin
    if DatagramList[i].State and DPB_EMPTY = 0 then
      Result := i;
    Inc(i)
  end
end;


// *****************************************************************************
//  function NMRABusDatagrams_NextPacket;
//
//  Parameters: DatagramPacket:   The next full packet in the list
//
//  Result:
//
//  Description: True if the function returned a new Packet, false if there are no packet to receive
// *****************************************************************************
function NMRABusDatagrams_NextPacket(var DatagramPacket: TDatagramBuffer): Boolean;
var
  i: Integer;
begin
  Result := False;
  i := 0;
  while not Result and (i < LEN_DATAGRAM_ARRAY) do
  begin
    if DatagramList[i].State = DPB_FULL then
    begin
      DatagramPacket := DatagramList[i];
      DatagramList[i].State := DPB_EMPTY;
      Result := True;
    end;
    Inc(i);
  end
end;

end.