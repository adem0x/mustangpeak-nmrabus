// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:
//    Implements NMRABus specifications
//
// ******************************************************************************
unit NMRABus;

uses
  NMRABusDefines,
  NMRABusUtilities,
  CAN_Storage;
  
{$I Options.inc}

type
  TNMRABusPacketHandlerFunc = procedure(CANBuffer: PCANBuffer);
  PNMRABusPacketHandlerFunc = ^TNMRABusPacketHandlerFunc;


  procedure NMRABus_Connect;
  function NMRABus_Permitted: Boolean;
  procedure NMRABus_Disconnect;
  procedure NMRABus_Initialize;
  procedure NMRABus_GlobalTimer;
  procedure HandlePacketReceivedOnNMRABusLayer(NMRABusPacketHandler: PNMRABusPacketHandlerFunc);


  // callbacks from the CAN interrupts used in the xxxxx_CAN_Interrupt.mpas units
  procedure ReceivedOnFilter0(RawBuffer: PCANRawBuffer);
  procedure ReceivedOnFilter1(RawBuffer: PCANRawBuffer);
  procedure ReceivedOnFilter2(RawBuffer: PCANRawBuffer);
  procedure ReceivedOnFilter3(RawBuffer: PCANRawBuffer);
  procedure ReceivedOnFilter4(RawBuffer: PCANRawBuffer);
  procedure ReceivedOnFilter5(RawBuffer: PCANRawBuffer);
  procedure ReceivedOnFilter6(RawBuffer: PCANRawBuffer);


  // defined in the dsPICxx_CAN.mpas file
  function AddToList(List: PCANRawBufferList; var Buffer: TCANBuffer): Boolean;  external;
  function AddToListByParameter(List: PCANRawBufferList; ID: DWORD; ByteCount, Byte0, Byte1, Byte2, Byte3, Byte4, Byte5, Byte6, Byte7: Byte; IsExtended: Boolean): Boolean; external;
  function ExtractFromList(List :PCANRawBufferList; var Buffer: TCANBuffer): Boolean; external;
  
  // defined in the dsPICxx_CAN_Interrupt.mpas file
  procedure StartCANMessageEngine; external;
  
  // defined in the user program
  procedure GetUniqueIDFunc(var HiID, LoID: DWord); external;
  
  // defined in the user program
var
  TX_CANLayer_List: TCANRawBufferList; external;
  TX_NMRABusLayer_List: TCANRawBufferList; external;
  RX_CANLayer_List: TCANRawBufferList; external;
  RX_NMRABusLayer_List: TCANRawBufferList; external;
  RX_Main_RawBufferArray: TCanRawBufferArray; external;
  TX_Main_RawBufferArray: TCanRawBufferArray; external;

implementation

// *****************************************************************************
//  procedure FlushLists
//     Parameters:
//     Returns:
//
//     Description: Clears the lists
//
// *****************************************************************************
procedure FlushLists;
begin
  CANStorage_FlushList(@TX_CANLayer_List);                                      // Flush any pending packets
  CANStorage_FlushList(@TX_NMRABusLayer_List);
  CANStorage_FlushList(@RX_CANLayer_List);                                      // Flush any pending packets
  CANStorage_FlushList(@RX_NMRABusLayer_List);
end;

// ****************************************************************************
// procedure HandlePacketReceivedOnCANLayer
//
//  Description:
//                 All CAN Layer messages are high priority and are dealt with immediately
//
// ****************************************************************************
procedure HandlePacketReceivedOnCANLayer;
var
  CANBuffer: TCANBuffer;
  NodeID: TNodeID;
begin
  while ExtractFromList(@RX_CANLayer_List, CANBuffer) do                        // Pull all the Received Messages out (should be only one)
  begin
    if CANBuffer.ID and FT_AMD = FT_AMD then                                    // Alias Map Definition Message
    begin
      NMRABusUtilities_PacketBytesToNodeID(@CANBuffer, NodeID);
      if NMRABusUtilities_EqualNodeID(NodeID) then                              // Is the 48 Bit node ID equal to ours?
      begin                                                                     // Big error, there are duplicate 48 Bit ID on the bus
        if NMRABus_Permitted then
        begin
          // TODO
          // Send PCER Message with Duplicate Node ID Detected (Optional), Go Offline (Optional)
        end else
        begin
          // TODO
          // User Defined Action
        end
      end;
    end else
    if NMRABusUtilities_EqualAliasID(CANBuffer.ID and $00000FFF) then           // Is the 12 Bit Alias equal to ours?
    begin
      if (CANBuffer.ID and FT_CID_MASK <= FT_CID0) and (CANBuffer.ID and FT_CID_MASK >= FT_CID6) then // If it is a CID message then force calling node to try again for an Alias this one is ours
      begin
        NMRABusUtilities_CreateCANControlFramePacket(FT_RID, @CANBuffer);
        AddToList(@TX_CANLayer_List, CANBuffer);
        StartCANMessageEngine;
      end else
      begin
        if NMRABus_Permitted then                                               // Detected a duplicate Alias, we need to shut down and restart with a fresh Alais ID
        begin
          FlushLists();                                                         // Clear any queued packets
          NMRABus_Disconnect;                                                   // Take the node off line
          NMRABusUtilities_CreateCANControlFramePacket(FT_AMR, @CANBuffer);     // Send an Alias Map Reset
          AddToList(@TX_CANLayer_List, CANBuffer);
          StartCANMessageEngine;
        end
      end
    end else
    begin
      if NMRABus_Permitted then
      begin
        if CANBuffer.ID and FT_AME = FT_AME then                                // Alias Mapping Enquiry
        begin
          if CANBuffer.DataCount > 0 then
          begin                                                                 // The Data contain a valid 48 Bit ID to compare with?
            NMRABusUtilities_PacketBytesToNodeID(@CANBuffer, NodeID);           // Extract the 48 Bit ID
            if NMRABusUtilities_EqualNodeID(NodeID) then
            begin                                                               // The 48 Bit node ID is equal to ours
              NMRABusUtilities_CreateCANControlFramePacket(FT_AMD, @CANBuffer); // Send an Alias Map Definition
              StartCANMessageEngine;
            end
          end else
          begin                                                                 // No Data so just send the AMD
            NMRABusUtilities_CreateCANControlFramePacket(FT_AMD, @CANBuffer);   // Send an Alias Map Definition
            StartCANMessageEngine;
          end
        end
      end
    end
  end;
end;

// ****************************************************************************
// procedure HandlePacketReceivedOnNMRABusLayer
//
//  Description:
//                 All NMRABus Layer messages are low priority and placed in the List for
//     handling in the main message loop
//
// ****************************************************************************
procedure HandlePacketReceivedOnNMRABusLayer(NMRABusPacketHandler: PNMRABusPacketHandlerFunc);
var
  CANBuffer: TCANBuffer;
  Alias: Word;
begin
  if ExtractFromList(@RX_NMRABusLayer_List, CANBuffer) then                     // Pull next Received Messages out
  begin
    if CANBuffer.ID and FT_VERIFY_NODE_ID_NUMBER_DEST = FT_VERIFY_NODE_ID_NUMBER_DEST then
    begin
      Alias := NMRABusUtilities_ExtractDestinationAlias(@CANBuffer);
      if NMRABusUtilities_EqualAliasID(Alias) then
      begin
        NMRABusUtilities_CreateNMRABusMessagePacket(FT_VERIFIED_NODE_ID_NUMBER, 0, @CANBuffer);
        StartCANMessageEngine;
      end;
    end else
    if CANBuffer.ID and FT_VERIFY_NODE_ID_NUMBER_NO_DEST = FT_VERIFY_NODE_ID_NUMBER_NO_DEST then
    begin
      NMRABusUtilities_CreateNMRABusMessagePacket(FT_VERIFIED_NODE_ID_NUMBER, 0, @CANBuffer);
      StartCANMessageEngine;
    end
  end
end;

// *****************************************************************************
//  procedure ReceivedOnFilter0
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 0 which is defined
//                  as any NMRABus level message (bit 26 = 0)
//
// *****************************************************************************
procedure ReceivedOnFilter0(RawBuffer: PCANRawBuffer);
var
  Next: PCANRawBuffer;
begin
  Next := CANStorage_Head(@RX_CANLayer_List);
  if Next <> nil then
  begin
    Next^ := RawBuffer^;
    CANStorage_IncHead(@RX_CANLayer_List);
    HandlePacketReceivedOnCANLayer
  end else
  begin
      // Have overrun problem
  end;
end;

// *****************************************************************************
//  procedure ReceivedOnFilter1
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 1 which is defined
//                  as any NMRABus level message (bit 26 = 1)
//
// *****************************************************************************
procedure ReceivedOnFilter1(RawBuffer: PCANRawBuffer);
var
  Next: PCANRawBuffer;
begin 
  Next := CANStorage_Head(@RX_NMRABusLayer_List);
  if Next <> nil then
  begin
    Next^ := RawBuffer^;
    CANStorage_IncHead(@RX_NMRABusLayer_List);
  end else
  begin
      // Have overrun problem
  end;
end;

// *****************************************************************************
//  procedure ReceivedOnFilter2
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 2
//
// *****************************************************************************
procedure ReceivedOnFilter2(RawBuffer: PCANRawBuffer);
begin
  // Not used for NMRABus
end;

// *****************************************************************************
//  procedure ReceivedOnFilter3
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 3
//
// *****************************************************************************
procedure ReceivedOnFilter3(RawBuffer: PCANRawBuffer);
begin
  // Not used for NMRABus
end;

// *****************************************************************************
//  procedure ReceivedOnFilter4
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 4
//
// *****************************************************************************
procedure ReceivedOnFilter4(RawBuffer: PCANRawBuffer);
begin
  // Not used for NMRABus
end;

// *****************************************************************************
//  procedure ReceivedOnFilter5
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 5
//
// *****************************************************************************
procedure ReceivedOnFilter5(RawBuffer: PCANRawBuffer);
begin
  // Not used for NMRABus
end;

// *****************************************************************************
//  procedure ReceivedOnFilter6
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 6
//
// *****************************************************************************
procedure ReceivedOnFilter6(RawBuffer: PCANRawBuffer);
begin
  // Not used for NMRABus
end;

// *****************************************************************************
//  procedure NMRABus_Initialize
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRABus_Initialize;
begin
  NMRABus.State := 0;
  NMRABus.Interrupt_State := 0;
  GetUniqueIDFunc(NMRABus.Node_ID[1], NMRABus.Node_ID[0]);
  NMRABus.Unique_ID_Global_Seed[0] := NMRABus.Node_ID[0];
  NMRABus.Unique_ID_Global_Seed[1] := NMRABus.Node_ID[1];
  NMRABusUtilities_CreateAliasID(False);
end;

// *****************************************************************************
//  function NMRABus_Permitted
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRABus_Permitted: Boolean;
begin
  Result := NMRABus.State and BS_PERMITED <> 0
end;

// *****************************************************************************
//  procedure NMRABus_GlobalTimer
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRABus_GlobalTimer;
begin
  Inc(NMRABus.BusLoginCount);
end;

// *****************************************************************************
//  function NMRABus_Connect
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRABus_Connect;
var
  Buffer: TCANBuffer;
  DuplicateCID: Boolean;
begin
  FlushLists;
  while CANStorage_Transmitting do;                                             // Wait for the last transmited packet
  Delay_ms(10);
  NMRABusUtilities_CreateCANControlFramePacket(FT_CID0, @Buffer);               // Queue up
  AddToList(@TX_CANLayer_List, Buffer);
  NMRABusUtilities_CreateCANControlFramePacket(FT_CID1, @Buffer);
  AddToList(@TX_CANLayer_List, Buffer);
  NMRABusUtilities_CreateCANControlFramePacket(FT_CID2, @Buffer);
  AddToList(@TX_CANLayer_List, Buffer);
  NMRABusUtilities_CreateCANControlFramePacket(FT_CID3, @Buffer);
  AddToList(@TX_CANLayer_List, Buffer);
  StartCANMessageEngine();
  DuplicateCID := False;
  while CANStorage_Transmitting and not DuplicateCID do
  begin
    if ExtractFromList(@RX_CANLayer_List, Buffer) then
      DuplicateCID := NMRABusUtilities_EqualAliasID(Buffer.ID and $00000FFF) and (Buffer.ID and FT_RID = FT_RID);
  end;
  if not DuplicateCID then
  begin
    NMRABus.BusLoginCount := 0;
    while NMRABus.BusLoginCount < MAX_BUS_LOGIN_TIMEOUT do
    begin
      if ExtractFromList(@RX_CANLayer_List, Buffer) then
        DuplicateCID := NMRABusUtilities_EqualAliasID(Buffer.ID and $00000FFF) and (Buffer.ID and FT_RID = FT_RID);
    end;
    
    if not DuplicateCID then
    begin
      NMRABus.State := NMRABus.State or BS_PERMITED;
      NMRABusUtilities_CreateCANControlFramePacket(FT_AMD, @Buffer);
      AddToList(@TX_CANLayer_List, Buffer);
      NMRABusUtilities_CreateNMRABusMessagePacket(FT_INITIALIZATION_COMPLETE, 0, @Buffer);
      AddToList(@TX_NMRABusLayer_List, Buffer);
      StartCANMessageEngine();
      while CANStorage_Transmitting do;                                         // Just wait
      NMRABus.State := NMRABus.State or BS_INITIALIZED;
    end;
  end;
end;


// *****************************************************************************
//  procedure NMRABus_Disconnect
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRABus_Disconnect;
begin
  NMRABus.State := NMRABus.State and not BS_PERMITED;
end;

end.