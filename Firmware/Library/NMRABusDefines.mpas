unit NMRABusDefines;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

{$I Options.inc}

const
  MAX_BUS_LOGIN_TIMEOUT = 51;              // Number of 1ms time tick to wait for a node to send a RID to signal a duplicate Alais

  CAN_TX_0 = 0;
  CAN_TX_1 = 1;
  CAN_TX_2 = 2;

  CAN_RX_0 = 0;
  CAN_RX_1 = 1;

  CAN_TX_PRIORITY_0 = 0;
  CAN_TX_PRIORITY_1 = 1;
  CAN_TX_PRIORITY_2 = 2;
  CAN_TX_PRIORITY_3 = 3;

// *****************************************************************************
//  Extended CAN Frames
//  29 Bits Divided as follows:
//     - 1 Bit = Priority (1 = Low Priority typical)
//     - 4 Bits = Frame Type (FT_xxxx Constants)
//     - 12 Bits = Destination Node Address Alias or Message Type (MT_xxx Constants)
//     - 12 Bits = Source Node Address Alias
//
// Frame Types.  These define what the Frame of the CAN message consists of.
const
  FT_CAN                            = $00000000;                                // Frame Type CAN Control Message
  FT_CID0                           = $07000000;                                // First 12 Bits of 48 bit Node ID
  FT_CID1                           = $06000000;                                // 2rd 12 Bits of 48 bit Node ID
  FT_CID2                           = $05000000;                                // 3nd 12 Bits of 48 bit Node ID
  FT_CID3                           = $04000000;                                // Last 12 Bits of 48 bit Node ID
  FT_CID4                           = $03000000;                                // non-OpenLCB Protocol
  FT_CID5                           = $02000000;                                // non-OpenLCB Protocol
  FT_CID6                           = $01000000;                                // non-OpenLCB Protocol

  
  FT_CID_MASK                       = $07000000;
  FT_RID                            = $00700000;                                // Reserve ID
  FT_AMD                            = $00701000;                                // Alias Map Definition
  FT_AME                            = $00702000;                                // Alias Mapping Enquiry
  FT_AMR                            = $00703000;                                // Alias Map Reset Frame

  FT_MTI_TYPE_MASK                  = $07000000;
  FT_FIRST_ADDRESSED_MTI_TYPE       = $04000000;                                // Destination Address for Datagram Non Last Segment (up to $07000000 for Addressed Stream)

  FT_INITIALIZATION_COMPLETE        = $08087000;
  FT_VERIFY_NODE_ID_NUMBER_DEST     = $0E000000;
  FT_VERIFY_NODE_ID_NUMBER_NO_DEST  = $088A7000;
  FT_VERIFIED_NODE_ID_NUMBER        = $088B7000;
  FT_OPTIONAL_INTERACTION_REJECTED  = $0E000000;
  FT_TERMINATE_DUE_TO_ERROR         = $0E000000;
  
  FT_DATAGRAM_ONLY_FRAME            = $0A000000;
  FT_DATAGRAM_FRAME_START           = $0B000000;
  FT_DATAGRAM_FRAME                 = $0C000000;
  FT_DATAGRAM_FRAME_END             = $0D000000;                                // Sub type SFT_DATAGRAM_END
  FT_DATAGRAM_FRAME_RESULT          = $0E000000;                                // Sub type SFT_DATAGRAM_RECIEVED_OK
  FT_DATAGRAM_FRAME_REJECTED        = $0E000000;                                // Sub type SFT_DATAGRAM_REJECTED
  
  // Base MTIs
  SFT_VERIFY_NODE_DEST              = $0A;                                      // Sub-Type (in first Databyte) for a MTI with a destination in the header
  SFT_OPTIONAL_INTERACTION_REJECTED = $0C;
  SFT_TERMINATE_DUE_TO_ERROR        = $0D;
  // Protocol Support MTIs
  SFT_PROTOCOL_SUPPORT_QUERY        = $2E;
  SFT_PROTOCOL_SUPPORT_REPLY        = $2F;
  // Event Exchange MTIs
  SFT_IDENTIFY_EVENTS               = $2B;
  // Other MTIs
  SFT_SIMPLENODE_IDENTIFY_INFO_REQUEST = $52;
  SFT_SIMPLENODE_IDENTIFY_INFO_REPLY   = $53;
  // Datagram MTIs
  SFT_DATAGRAM_RECIEVED_OK          = $4C;
  SFT_DATAGRAM_REJECTED             = $4D;
  // Stream MTIs
  SFT_STREAM_INITIATE_REQUEST       = $4E;
  SFT_STREAM_INITIATE_REPLY         = $4F;
  SFT_STREAMDATA_PROCEED            = $6A;
  SFT_STREAMDATA_COMPLETE           = $6B;
  


  MASK_DEST_ALIAS_FORMAT = $06000000;                                           // Bits to see if the OpenLCB Format bits say it contains a Dest ID (110)
  MASK_DEST_ALIAS        = $00FFF000;                                           // Masks out just the Destination Alias Address
  MASK_SOURCE_ALIAS      = $00000FFF;                                           // Masks out just the Source Alias Address

  // NMRABus States
  BS_PERMITED          = $01;                                                   // CAN Frame Layer is permitted (Node ID's resolved with bus)
  BS_INITIALIZED       = $02;                                                   // Message Layer has sent its first Initialize Complete Message


type
  TNodeID = array[0..1] of DWORD;                                                // The Bottom 3 Bytes = [0] and the Top 3 Bytes = [1]
  TNodeAliasID = Word;


  TNMRABus = record
    Node_ID: TNodeID;                // Unique 48 Bit ID for Node
    Unique_ID_Global_Seed: TNodeID;  // Seed for Random Number Generator in case we have to reseed because of a duplicate ID
    Node_Alias_ID: TNodeAliasID;     // 12 Bit Alias ID
    BusLoginCount: Integer;          // Increment through the Global Timer to time out when the Spec for waiting for other nodes to send the RID for a duplicate Alias ID
    State: Word;                     // See the BS_xxxx flags; State of the Bus; these are ONLY CHANGED OUTSIDE OF an interrupt and concedered READ-ONLY inside of an interrupt
    Interrupt_State: Byte;           // See the BSI_xxxx flags; State of the Bus Messaging System that is running through the interrupts, these are ONLY CHANGED FROM WITHIN the interrupt and concidered READ-ONLY outside of the interrupt
  end;
  
var
  NMRABus: TNMRABus;

implementation

end.