unit CANDefines;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

const
  LF = #13+#10;
  
const
  CAN_DIRECTION_READ = 1;
  CAN_DIRECTION_WRITE = 0;
  
const
  CES_TRANSMITTING = $0001;                                                     // CAN State constants
  
  
  // defined in the user program
  TX_CAN_BUFFER_LEN = 1;
  TX_NMRANET_BUFFER_LEN = 4;

  CAN_DATA_LEN = 8;

type
  TCAN_DataBytes = array[CAN_DATA_LEN] of Byte;
  PCAN_DataBytes = ^TCAN_DataBytes;

  // ***************************************************************************
  // CAN Message Buffers in raw form that can be loaded into the CAN controller
  // registers
  //   NOTE: For the dsPIC33 RX and TX are identical, for the dsPIC30 the bit
  //         patterns are different between RX and TX
  // ***************************************************************************
  TCANRawBuffer = record
    Word0    : Word;   // if Standard Message then SID else EID upper Bits
    Word1    : Word;   // if Standard Message then Data Length Code else low bits of EID and upper bits of SID
    Word2    : Word;   // if Standard Message then Data 0 and Data 1 else low bits of SID and Data Length Code
    Word3    : Word;   // if Standard Message then Data 2 and Data 3 else Data 0 and Data 1
    Word4    : Word;   // if Standard Message then Data 4 and Data 5 else Data 2 and Data 3
    Word5    : Word;   // if Standard Message then Data 6 and Data 7 else Data 4 and Data 5
    Word6    : Word;   // if Standard Message then, not used, else Data 6 and Data 7
    Word7    : Word;   // dsPIC33 only, For TX not used for RX the Filter that passed the message
  end;
  PCANRawBuffer = ^TCANRawBuffer;

  TCANRawBufferArray = array[0..0] of TCANRawBuffer;                            // Allows any length array within the TCANRawBufferList
  PCANRawBufferArray = ^TCANRawBufferArray;

const
  CBS_EXTENDED = $01;                                                           // CAN Buffer State constants, Buffer is extended

type
 // ***************************************************************************
  // CAN Message Buffers in user friendly form that can be easily maniuplated then
  // loaded into the Raw CAN FIFOs
  // ***************************************************************************
  TCANBuffer = record
    ID: DWord;
    DataCount: Byte;
    DataBytes: TCAN_DataBytes;
    State: Byte;                                                                // See CBS_xxxx Constants (CAN Buffer State)
  end;
  PCANBuffer = ^TCANBuffer;
  
  TCANBufferArray = array[0..0] of TCANBuffer;                                  // Allows any length array within the TCANBufferList
  PCANBufferArray = ^TCANBufferArray;
  
  TCANBufferList = record
    Buffers: PCANBufferArray;                                                   // Pointer to the TCANBuffer Array where the data is stored (Normal RAM or DMA RAM depending on device)
    Size: Byte;                                                                 // Number of Buffers in the List
    Head: PCANBuffer;                                                           // Points to the Next empty item in the list (may point to a used item if Count = Size so this comparison needs to be checked)
    Tail: PCANBuffer;                                                           // Points to the first used item in the list
    Count: Byte;                                                                // Number of Items in the List
    MaxCount: Byte;                                                             // The max number of Buffers used in the list
  end;
  PCANBufferList = ^TCANBufferList;
  
var
  TX_CANBuffer: array[0..TX_CAN_BUFFER_LEN-1] of TCANBuffer;
  TX_NMRAnet_Buffer: array[0..TX_NMRANET_BUFFER_LEN-1] of TCANBuffer;
  
  TX_CANBufferList,
  TX_NMRAnetBufferList: TCANBufferList;


implementation

end.