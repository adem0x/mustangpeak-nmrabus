unit NMRAnetDecoderNode;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-06-15:   Created
//
// * Description:

//
// *****************************************************************************

{$I Options.inc}

uses
  NMRAnetNode,
  NMRAnetNodeDefines,
  NMRAnetAppDefines,
  NMRAnetDefines,
  NMRAnetBufferPoolsDefines;
  
type
  TDCCVolatileData = record
    Speed: Word;                                                                // Float 16 so negative is reverse
    Functions: DWord;                                                           // Function State (F0..F31)
  end;

  TDCCNonVolatileData = record
    FunctionLatch: DWord;                                                       // If the Function is latching or not, F0..F31
    FunctionName: array[32] of string[16];                                      // Names for the Functions
    ConsistNext,
    ConsistPrev: TNodeID;
  end;
  
procedure NMRAnetDecoderNode_Initialize(var Nodes: TNodes);

implementation

var
  VolatileData: array[0..MAX_NODE_COUNT - 1] of TDCCVolatileData;

procedure NMRAnetDecoderNode_Initialize(var Nodes: TNodes);
var
  i: Integer;
begin
  for i := 0 to MAX_NODE_COUNT - 1 do
  begin
    VolatileData[i].Speed := 0;
    VolatileData[i].Functions := 0;
    Nodes.RawList[i].RAMData := GenericPointerAdapter( @VolatileData[i]);
  end
end;

end.