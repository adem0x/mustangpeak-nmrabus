unit NMRAnetBufferPoolsDefines;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-06-20:   Created
//
// * Description:
//
// ******************************************************************************

type
  Generic16BitPointer = Word;
  Generic32BitPointer = DWord;
  
const
  CBS_ALLOCATED                            = $01;                               // CommonBufferState is allocated but may be in Process, need to check for inprocess flags
  CBS_PROCESSING                           = $02;                               // CommonBufferState is Processing (what that means depends on the Buffer type, implys that the buffer is not ready for the main loop to use yet)
  CBS_OUTGOING                             = $04;                               // CommonBufferState is an outgoing Buffer (Transmitting to the CAN Bus)
  CBS_TRANSFER_COMPLETE                    = $08;                               // Multi Frame Message transfer is complete
  
  // These must be in Priority Order for transmit, higher = higher priority
  BMC_VERIFY_NODE_ID_DEST                  = $01;                               // [IN] Buffer Message Code is a Verify Node ID with Destination  [BaseBuffer]
  BMC_VERIFY_NODE_ID                       = $02;                               // [IN] Buffer Message Code is a Verify Node ID            [BaseBuffer]
  BMC_PROTOCOL_SUPPORT_QUERY               = $03;                               // [IN] Buffer Message Code is a Protocol Support Query    [BaseBuffer]
  BMC_PRODUCER_IDENTIFY                    = $04;                               // [IN] Buffer Message Code is Producer Identify           [DataBuffer]
  BMC_CONSUMER_IDENTIFY                    = $05;                               // [IN] Buffer Message Code is Consumer Identify           [DataBuffer]
  BMC_EVENT_LEARN                          = $06;                               // [IN] Buffer Message Code is Event Learn                 [BaseBuffer]
  BMC_SIMPLE_NODE_INFO_REQEUST             = $07;                               // [IN] Buffer Message Code is ACDI Request                [BaseBuffer]
  BMC_UNKNOWN_ADDRESSED_MTI                = $08;                               // [OUT] Buffer Message Code is of an unknown MTI type
  BMC_DATAGRAM_OUT_OF_ORDER                = $09;                               // [OUT] Buffer Message Code is to send a Datagram Out of Order Response [BaseBuffer]
  BMC_DATAGRAM_BUFFER_FULL                 = $0A;                               // [OUT] Buffer Message Code is to send a Datagram Out of Order Response [BaseBuffer]
  BMC_DATAGRAM_NOT_ACCEPTED                = $0B;                               // [OUT] Buffer Message Code is to send a Datagram Not Accepted Response [BaseBuffer]
  BMC_DATAGRAM_OKAY                        = $0C;                               // [OUT] Buffer Message Code is to send a Datagram Ok Response [BaseBuffer]
  BMC_DATAGRAM                             = $0D;                               // [IN/OUT] Buffer Message Code is a Datagram              [DatagramBuffer]
  
type 
  TRefCount = Word;
  TBufferTag = Word;
  
type
  TBaseBuffer = record                                                          // Common Buffer layout that allow overlaying of bytes with TDataBuffer, TDatagramBuffer,  etc
    State: Byte;                                                                // State of Buffer, see CBS_xxx constants
    TargetAlias: Word;                                                          // Alias of the Node receiving the message
    DestAlias: Word;                                                            // Destination Alias to send the reply to
    RefCount: TRefCount;                                                        // Reference count for auto garbage collection
    mCode: Byte;                                                                // Buffer Message Code for what the message is
    StateMachine: Byte;                                                         // Local StateMachine Index for use
    Tag: TBufferTag;                                                            // General Purpose useage depending on the message type
  end;
  PBaseBuffer = ^TBaseBuffer;
  

implementation

end.