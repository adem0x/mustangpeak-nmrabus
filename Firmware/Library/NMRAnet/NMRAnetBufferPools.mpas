unit NMRAnetBufferPools;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:
//
// ******************************************************************************

uses
  NMRAnetBufferPoolsDefines,
  NMRAnetDefines,
  CANDefines,
  NMRAnetDatagramDefines,
  NMRAnetConfigurationProtocolDefines,
  NMRAnetAbbreviatedConfigurationProtocolDefines;

{$I Options.inc}

type
  TBaseBufferPool = record
    Pool: array[0..MAX_BASE_BUFFER_POOL-1] of TBaseBuffer;
    MaxCount: Byte;
    Count: Byte;
  end;
  
  TDataBufferPool = record                                                      // CAN Buffers that are dynamically assigned to TMessageBuffer structures
    Pool: array[0..MAX_DATA_BUFFER_POOL-1] of TDataBuffer;                      // Max Count of Pool Buffers used
    MaxCount: Byte;                                                             // Number of Buffers currently used
    Count: Byte;
  end;

  TDatagramBufferPool = record                                                  // Datagrams that are dynamically assigned to TMessageBuffer structures
    Pool: array[0..MAX_DATAGRAM_BUFFER_POOL-1] of TDatagramBuffer;              // Max Count of Pool Buffers used
    MaxCount: Byte;                                                             // Number of Buffers currently used
    Count: Byte;
  end;

  TACDI_ReceiveBufferPool = record                                              // Datagrams that are dynamically assigned to TMessageBuffer structures
    Pool: array[0..MAX_ACDI_RECEIVE_BUFFER_POOL-1] of TACDI_ReceiveBuffer;      // Max Count of Pool Buffers used
    MaxCount: Byte;                                                             // Number of Buffers currently used
    Count: Byte;
  end;

  TACDI_TransmitBufferPool = record                                             // Datagrams that are dynamically assigned to TMessageBuffer structures
    Pool: array[0..MAX_ACDI_TRANSMIT_BUFFER_POOL-1] of TACDI_TransmitBuffer;    // Max Count of Pool Buffers used
    MaxCount: Byte;                                                             // Number of Buffers currently used
    Count: Byte;
  end;

procedure NMRAnetBufferPools_Initialize;
procedure NMRAnetBufferPools_InitializeBaseBuffer(Buffer: PBaseBuffer);

function NMRAnetBufferPools_AllocateBaseBuffer(var Buffer: PBaseBuffer): Boolean;
procedure NMRAnetBufferPools_ReleaseBaseBuffer(Buffer: PBaseBuffer);

function NMRAnetBufferPools_AllocateDataBuffer(var Buffer: PDataBuffer): Boolean;
procedure NMRAnetBufferPools_ReleaseDataBuffer(Buffer: PDataBuffer);

function NMRAnetBufferPools_AllocateDatagramBuffer(var Buffer: PDatagramBuffer): Boolean;
procedure NMRAnetBufferPools_ReleaseDatagramBuffer(Buffer: PDatagramBuffer);

function NMRAnetBufferPools_AllocateACDI_ReceiveBuffer(var Buffer: PACDI_ReceiveBuffer): Boolean;
procedure NMRAnetBufferPools_ReleaseACDI_ReceiveBuffer(Buffer: PACDI_ReceiveBuffer);

function NMRAnetBufferPools_AllocateACDI_TransmitBuffer(var Buffer: PACDI_TransmitBuffer): Boolean;
procedure NMRAnetBufferPools_ReleaseACDI_TransmitBuffer(Buffer: PACDI_TransmitBuffer);

  // Located in NMRAnetStateMachine.mpas
  procedure NMRAnetStateMachine_InitializeDataBuffer(Buffer: PDataBuffer); external;
  // Located in NMRAnetDatagrams.mpas
  procedure NMRAnetDatagrams_InitializeDatagramBuffer(DatagramBuffer: PDatagramBuffer); external;
  // Located in NMRAnetAbbreviatedConfigurationProtocol.mpas
  procedure NMRAnetAbbreviatedConfigurationProtocol_InitializeReceiveBuffer(ReceiveBuffer: PACDI_ReceiveBuffer); external;
  procedure NMRAnetAbbreviatedConfigurationProtocol_InitializeTransmitBuffer(TransmitBuffer: PACDI_TransmitBuffer); external;


  
implementation

var
  BaseBufferPool: TBaseBufferPool;
  DataBufferPool: TDataBufferPool;
  DatagramPool: TDatagramBufferPool;
  ACDI_ReceiveBufferPool: TACDI_ReceiveBufferPool;
  ACDI_TransmitBufferPool: TACDI_TransmitBufferPool;


// *****************************************************************************
//  procedure NMRAnetBufferPools_InitializeBaseBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_InitializeBaseBuffer(Buffer: PBaseBuffer);
begin
  Buffer^.State := 0;
  Buffer^.Alias := 0;
  Buffer^.Next := 0;
  Buffer^.mCode := 0;
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_Initialize;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_Initialize;
var
  i: Integer;
begin
  for i := 0 to MAX_BASE_BUFFER_POOL - 1 do
    NMRAnetBufferPools_InitializeBaseBuffer(@BaseBufferPool.Pool[i]);
  BaseBufferPool.Count := 0;
  BaseBufferPool.MaxCount := 0;
  
  for i := 0 to MAX_DATA_BUFFER_POOL - 1 do
    NMRAnetStateMachine_InitializeDataBuffer(@DataBufferPool.Pool[i]);
  DataBufferPool.Count := 0;
  DataBufferPool.MaxCount := 0;
  
  for i := 0 to MAX_DATAGRAM_BUFFER_POOL - 1 do
    NMRAnetDatagrams_InitializeDatagramBuffer(@DatagramPool.Pool[i]);
  DatagramPool.Count := 0;
  DatagramPool.MaxCount := 0;
  
  for i := 0 to MAX_ACDI_RECEIVE_BUFFER_POOL - 1 do
    NMRAnetAbbreviatedConfigurationProtocol_InitializeReceiveBuffer(@ACDI_ReceiveBufferPool.Pool[i]);
  ACDI_ReceiveBufferPool.Count := 0;
  ACDI_ReceiveBufferPool.MaxCount := 0;
  
  for i := 0 to MAX_ACDI_TRANSMIT_BUFFER_POOL - 1 do
    NMRAnetAbbreviatedConfigurationProtocol_InitializeTransmitBuffer(@ACDI_TransmitBufferPool.Pool[i]);
  ACDI_TransmitBufferPool.Count := 0;
  ACDI_TransmitBufferPool.MaxCount := 0;
end;


// *****************************************************************************
//  procedure NMRAnetBufferPools_AllocateBaseBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function NMRAnetBufferPools_AllocateBaseBuffer(var Buffer: PBaseBuffer): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to MAX_BASE_BUFFER_POOL - 1 do
  begin
    if BaseBufferPool.Pool[i].State = CBS_EMPTY then
    begin
      Buffer := @BaseBufferPool.Pool[i];
      NMRAnetBufferPools_InitializeBaseBuffer(Buffer);
      if BaseBufferPool.Count > BaseBufferPool.MaxCount then
        BaseBufferPool.MaxCount := BaseBufferPool.Count;
      Buffer^.State := CBS_ALLOCATED or CBS_BUFFER_BASE;
      Inc(BaseBufferPool.Count);
      Result := True;
      Break
    end
  end
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_ReleaseBaseBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_ReleaseBaseBuffer(Buffer: PBaseBuffer);
begin
  if Buffer <> nil then
  begin
    Buffer^.State := CBS_EMPTY;
    Dec(BaseBufferPool.Count);
  end;
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_AllocateDataBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function NMRAnetBufferPools_AllocateDataBuffer(var Buffer: PDataBuffer): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to MAX_DATA_BUFFER_POOL - 1 do
  begin
    if DataBufferPool.Pool[i].State = CBS_EMPTY then
    begin
      Buffer := @DataBufferPool.Pool[i];
      NMRAnetStateMachine_InitializeDataBuffer(Buffer);
      Buffer^.State := CBS_ALLOCATED or CBS_BUFFER_DATABUFFER;
      if DataBufferPool.Count > DataBufferPool.MaxCount then
        DataBufferPool.MaxCount := DataBufferPool.Count;
      Inc(DataBufferPool.Count);
      Result := True;
      Break
    end
  end
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_ReleaseDataBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_ReleaseDataBuffer(Buffer: PDataBuffer);
begin
  if Buffer <> nil then
  begin
    Buffer^.State := CBS_EMPTY;
    Dec(DataBufferPool.Count);
  end;
end;


// *****************************************************************************
//  procedure NMRAnetBufferPools_AllocateDatagramBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function NMRAnetBufferPools_AllocateDatagramBuffer(var Buffer: PDatagramBuffer): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to MAX_DATAGRAM_BUFFER_POOL - 1 do
  begin
    if DatagramPool.Pool[i].State = DGS_EMPTY then
    begin
      Buffer := @DatagramPool.Pool[i];
      Result := True;
      NMRAnetDatagrams_InitializeDatagramBuffer(Buffer);
      Buffer^.State := CBS_ALLOCATED or CBS_BUFFER_DATAGRAM;
      if DatagramPool.Count > DatagramPool.MaxCount then
        DatagramPool.MaxCount := DatagramPool.Count;
      Inc(DatagramPool.Count);
      Break
    end
  end
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_ReleaseDatagramBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_ReleaseDatagramBuffer(Buffer: PDatagramBuffer);
begin
  if Buffer <> nil then
  begin
    Buffer^.State := CBS_EMPTY;
    Dec(DatagramPool.Count);
  end;
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_AllocateACDI_ReceiveBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function NMRAnetBufferPools_AllocateACDI_ReceiveBuffer(var Buffer: PACDI_ReceiveBuffer): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to MAX_ACDI_RECEIVE_BUFFER_POOL - 1 do
  begin
    if ACDI_ReceiveBufferPool.Pool[i].State = ACDIS_EMPTY then
    begin
      Buffer := @ACDI_ReceiveBufferPool.Pool[i];
      Result := True;
      NMRAnetAbbreviatedConfigurationProtocol_InitializeReceiveBuffer(Buffer);
      Buffer^.State := CBS_ALLOCATED or CBS_BUFFER_ACDI_RECEIVE;
      if ACDI_ReceiveBufferPool.Count > ACDI_ReceiveBufferPool.MaxCount then
        ACDI_ReceiveBufferPool.MaxCount := ACDI_ReceiveBufferPool.Count;
      Inc(ACDI_ReceiveBufferPool.Count);
      Break
    end
  end
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_ReleaseACDI_ReceiveBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_ReleaseACDI_ReceiveBuffer(Buffer: PACDI_ReceiveBuffer);
begin
  if Buffer <> nil then
  begin
    Buffer^.State := CBS_EMPTY;
    Dec(ACDI_ReceiveBufferPool.Count);
  end;
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_AllocateACDI_TransmitBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function NMRAnetBufferPools_AllocateACDI_TransmitBuffer(var Buffer: PACDI_TransmitBuffer): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to MAX_ACDI_TRANSMIT_BUFFER_POOL - 1 do
  begin
    if ACDI_TransmitBufferPool.Pool[i].State = ACDIS_EMPTY then
    begin
      Buffer := @ACDI_TransmitBufferPool.Pool[i];
      Result := True;
      NMRAnetAbbreviatedConfigurationProtocol_InitializeTransmitBuffer(Buffer);
      Buffer^.State := CBS_ALLOCATED or CBS_BUFFER_ACDI_TRANSMIT;
      if ACDI_TransmitBufferPool.Count > ACDI_TransmitBufferPool.MaxCount then
        ACDI_TransmitBufferPool.MaxCount := ACDI_TransmitBufferPool.Count;
      Inc(ACDI_TransmitBufferPool.Count);
      Break
    end
  end
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_ReleaseACDI_TransmitBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_ReleaseACDI_TransmitBuffer(Buffer: PACDI_TransmitBuffer);
begin
  if Buffer <> nil then
  begin
    Buffer^.State := CBS_EMPTY;
    Dec(ACDI_TransmitBufferPool.Count);
  end;
end;


end.