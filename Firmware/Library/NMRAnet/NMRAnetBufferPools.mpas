unit NMRAnetBufferPools;
// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//     2012-10-07:   Version 1.0
//
// * Description:
//
// ******************************************************************************

uses
  NMRAnetAppDefines,
  NMRAnetBufferPoolsDefines,
  NMRAnetDefines,
  CANDefines,
  NMRAnetUtilities,
  NMRAnetDatagramDefines;

{$I Options.inc}

{.$DEFINE TRACK_BUFFER_ALLOCATIONS}
{.$DEFINE TRACK_BUFFER_OVERFLOWS}
{.$DEFINE TRACK_BUFFER_MAX_COUNT}

type
  TBaseBufferPool = record
    Pool: array[0..MAX_BASE_BUFFER_POOL-1] of TBaseBuffer;
    MaxCount: Byte;
    Count: Byte;
  end;
  
  TDataBufferPool = record                                                      // CAN Buffers that are dynamically assigned to TMessageBuffer structures
    Pool: array[0..MAX_DATA_BUFFER_POOL-1] of TDataBuffer;                      // Max Count of Pool Buffers used
    MaxCount: Byte;                                                             // Number of Buffers currently used
    Count: Byte;
  end;

  TDatagramBufferPool = record
    Pool: array[0..MAX_DATAGRAM_BUFFER_POOL-1] of TDatagramBuffer;              // Max Count of Pool Buffers used
    MaxCount: Byte;                                                             // Number of Buffers currently used
    Count: Byte;                                                                // Datagrams that are dynamically assigned to TMessageBuffer structures
  end;

procedure NMRAnetBufferPools_Initialize;
procedure NMRAnetBufferPools_InitializeBaseBuffer(Buffer: PBaseBuffer);

function NMRAnetBufferPools_AllocateBaseBuffer(var Buffer: PBaseBuffer): Boolean;
procedure NMRAnetBufferPools_ReleaseBaseBuffer(Buffer: PBaseBuffer);

function NMRAnetBufferPools_AllocateDataBuffer(var Buffer: PDataBuffer): Boolean;
procedure NMRAnetBufferPools_ReleaseDataBuffer(Buffer: PDataBuffer);

function NMRAnetBufferPools_AllocateDatagramBuffer(var Buffer: PDatagramBuffer; ForTransmit: Boolean): Boolean;
procedure NMRAnetBufferPools_ReleaseDatagramBuffer(Buffer: PDatagramBuffer);

{$IFDEF UART_ENABLE}
procedure NMRAnetBufferPools_Print;
{$ENDIF}


  // Located in NMRAnetStateMachine.mpas
  procedure NMRAnetStateMachine_InitializeDataBuffer(Buffer: PDataBuffer); external;
  // Located in NMRAnetDatagrams.mpas
  procedure NMRAnetDatagrams_InitializeDatagramBuffer(DatagramBuffer: PDatagramBuffer); external;

var
  BaseBufferPool: TBaseBufferPool;
  DataBufferPool: TDataBufferPool;
  DatagramPool: TDatagramBufferPool;

implementation


{$IFDEF UART_ENABLE}
procedure NMRAnetBufferPools_Print;
begin
   IntToStr(BaseBufferPool.MaxCount, s1);
   UART1_Write_Text('BaseBufferPool Max Count: '+s1+LF);
   IntToStr(BaseBufferPool.Count, s1);
   UART1_Write_Text('BaseBufferPool Count: '+s1+LF);
   IntToStr(DataBufferPool.MaxCount, s1);
   UART1_Write_Text('DataBufferPool Max Count: '+s1+LF);
   IntToStr(DataBufferPool.Count, s1);
   UART1_Write_Text('DataBufferPool Count: '+s1+LF);
   IntToStr(DatagramPool.MaxCount, s1);
   UART1_Write_Text('DatagramPool Max Count: '+s1+LF);
   IntToStr(DatagramPool.Count, s1);
   UART1_Write_Text('DatagramPool Count: '+s1+LF);
end;
{$ENDIF}


// *****************************************************************************
//  procedure NMRAnetBufferPools_InitializeBaseBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_InitializeBaseBuffer(Buffer: PBaseBuffer);
begin
  Buffer^.State := 0;
  Buffer^.Alias := 0;
  Buffer^.Next := nil;
  Buffer^.mCode := 0;
  Buffer^.Tag := 0;
  Buffer^.RefCount := 0;
  Buffer^.StateMachine := 0;
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_Initialize;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_Initialize;
var
  i: Integer;
begin
  for i := 0 to MAX_BASE_BUFFER_POOL - 1 do
    NMRAnetBufferPools_InitializeBaseBuffer(@BaseBufferPool.Pool[i]);
  BaseBufferPool.Count := 0;
  BaseBufferPool.MaxCount := 0;
  
  for i := 0 to MAX_DATA_BUFFER_POOL - 1 do
    NMRAnetStateMachine_InitializeDataBuffer(@DataBufferPool.Pool[i]);
  DataBufferPool.Count := 0;
  DataBufferPool.MaxCount := 0;
  
  for i := 0 to MAX_DATAGRAM_BUFFER_POOL - 1 do
    NMRAnetDatagrams_InitializeDatagramBuffer(@DatagramPool.Pool[i]);
  DatagramPool.Count := 0;
  DatagramPool.MaxCount := 0;
end;


// *****************************************************************************
//  procedure NMRAnetBufferPools_AllocateBaseBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function NMRAnetBufferPools_AllocateBaseBuffer(var Buffer: PBaseBuffer): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to MAX_BASE_BUFFER_POOL - 1 do
  begin
    if BaseBufferPool.Pool[i].State = 0 then
    begin
      Buffer := @BaseBufferPool.Pool[i];
      {$IFDEF TRACK_BUFFER_ALLOCATIONS}
      UART1_Write_Text('BB_Alloc: ');
      WordToHex(Buffer, s1);
      UART1_Write_Text('$'+s1+LF);
      {$ENDIF}
      NMRAnetBufferPools_InitializeBaseBuffer(Buffer);
      Buffer^.State := CBS_ALLOCATED;
      Inc(Buffer^.RefCount);
      Inc(BaseBufferPool.Count);
      if BaseBufferPool.Count >= BaseBufferPool.MaxCount then
        BaseBufferPool.MaxCount := BaseBufferPool.Count;
      Result := True;
      {$IFDEF TRACK_BUFFER_MAX_COUNT}
      UART1_Write_Text('BB MaxCount: ');
      ByteToStr(BaseBufferPool.MaxCount, s1);
      UART1_Write_Text(s1+LF);
      {$ENDIF}
      Break
    end
  end;
  {$IFDEF TRACK_BUFFER_OVERFLOWS}
  if not Result then
  begin
    UART1_Write_Text('BaseAllocateFail: ' + LF);
  //  NMRAnetBufferPools_Print;
  end
  {$ENDIF}
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_ReleaseBaseBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_ReleaseBaseBuffer(Buffer: PBaseBuffer);
begin
  if Buffer <> nil then
  begin
    Dec(Buffer^.RefCount);
    if Buffer^.RefCount = 0 then
    begin
      {$IFDEF TRACK_BUFFER_ALLOCATIONS}
      UART1_Write_Text('BB_Free: ');
      WordToHex(Buffer, s1);
      UART1_Write_Text('$'+s1+LF);
      {$ENDIF}
      Buffer^.State := 0;
      Dec(BaseBufferPool.Count);
    end
  end;
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_AllocateDataBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function NMRAnetBufferPools_AllocateDataBuffer(var Buffer: PDataBuffer): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to MAX_DATA_BUFFER_POOL - 1 do
  begin
    if DataBufferPool.Pool[i].State = 0 then
    begin
      Buffer := @DataBufferPool.Pool[i];
      {$IFDEF TRACK_BUFFER_ALLOCATIONS}
      UART1_Write_Text('DB_Alloc: ');
      WordToHex(Buffer, s1);
      UART1_Write_Text('$'+s1+LF);
      {$ENDIF}
      NMRAnetStateMachine_InitializeDataBuffer(Buffer);
      Buffer^.State := CBS_ALLOCATED;
      Inc(Buffer^.RefCount);
      Inc(DataBufferPool.Count);
      if DataBufferPool.Count >= DataBufferPool.MaxCount then
        DataBufferPool.MaxCount := DataBufferPool.Count;
      {$IFDEF TRACK_BUFFER_MAX_COUNT}
      UART1_Write_Text('DB MaxCount: ');
      ByteToStr(DataBufferPool.MaxCount, s1);
      UART1_Write_Text(s1+LF);
      {$ENDIF}
      Result := True;
      Break
    end
  end;
  {$IFDEF TRACK_BUFFER_OVERFLOWS}
  if not Result then
  begin
    UART1_Write_Text('DataAllocateFail: ' + LF);
  //  NMRAnetBufferPools_Print;
  end
  {$ENDIF}
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_ReleaseDataBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_ReleaseDataBuffer(Buffer: PDataBuffer);
begin
  if Buffer <> nil then
  begin
    Dec(Buffer^.RefCount);
    if Buffer^.RefCount = 0 then
    begin
      {$IFDEF TRACK_BUFFER_ALLOCATIONS}
      UART1_Write_Text('DB_Free: ');
      WordToHex(Buffer, s1);
      UART1_Write_Text('$'+s1+LF);
      {$ENDIF}
      Buffer^.State := 0;
      Dec(DataBufferPool.Count);
    end
  end;
end;


// *****************************************************************************
//  procedure NMRAnetBufferPools_AllocateDatagramBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function NMRAnetBufferPools_AllocateDatagramBuffer(var Buffer: PDatagramBuffer; ForTransmit: Boolean): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to MAX_DATAGRAM_BUFFER_POOL - 1 do
  begin
    if DatagramPool.Pool[i].State = 0 then
    begin
      Buffer := @DatagramPool.Pool[i];
      {$IFDEF TRACK_BUFFER_ALLOCATIONS}
      UART1_Write_Text('DG_Alloc: ');
      WordToHex(Buffer, s1);
      UART1_Write_Text('$'+s1+LF);
      {$ENDIF}
      NMRAnetDatagrams_InitializeDatagramBuffer(Buffer);
      Buffer^.State := CBS_ALLOCATED;
      if ForTransmit then
        Buffer^.State := Buffer^.State or CBS_OUTGOING;
      Inc(Buffer^.RefCount);
      Inc(DatagramPool.Count);
      if DatagramPool.Count >= DatagramPool.MaxCount then
        DatagramPool.MaxCount := DatagramPool.Count;
      {$IFDEF TRACK_BUFFER_MAX_COUNT}
      UART1_Write_Text('DG MaxCount: ');
      ByteToStr(DatagramPool.MaxCount, s1);
      UART1_Write_Text(s1+LF);
      {$ENDIF}
      Result := True;
      Break
    end
  end;
  {$IFDEF TRACK_BUFFER_OVERFLOWS}
  if not Result then
  begin
    UART1_Write_Text('DatagramAllocateFail: ' + LF);
  //  NMRAnetBufferPools_Print;
  end
  {$ENDIF}
end;

// *****************************************************************************
//  procedure NMRAnetBufferPools_ReleaseDatagramBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetBufferPools_ReleaseDatagramBuffer(Buffer: PDatagramBuffer);
begin
  if Buffer <> nil then
  begin
    Dec(Buffer^.RefCount);
    if Buffer^.RefCount = 0 then
    begin
      {$IFDEF TRACK_BUFFER_ALLOCATIONS}
      UART1_Write_Text('DG_Free: ');
      WordToHex(Buffer, s1);
      UART1_Write_Text('$'+s1+LF);
      {$ENDIF}
      Buffer^.State := 0;
      Dec(DatagramPool.Count);
    end
  end;
end;

end.