unit NMRAnetDatagrams;

uses
  NMRAnetUtilities,
  CANDefines,
  CANStorage,
  NMRAnetDefines,
  NMRAnetDatagramDefines,
  NMRAnetConfigurationProtocol;

procedure NMRAnetDatagrams_Initialize(NodeBuffer: PNMRAnetNodeBuffer);
procedure NMRAnetDatagrams_InitializeDatagramBuffer(DatagramBuffer: PDatagramBuffer);
procedure NMRAnetDatagrams_ProcessReceiveFromInterruptContext(NodeBuffer: PNMRAnetNodeBuffer; Buffer: PCANBuffer);
procedure NMRAnetDatagrams_ProcessReceive(NodeBuffer: PNMRAnetNodeBuffer);
procedure NMRAnetDatagrams_ProcessTransmit(NodeBuffer: PNMRAnetNodeBuffer);
procedure NMRAnetDatagrams_1ms_TimeTick(NodeBuffer: PNMRAnetNodeBuffer);
function NMRAnetDatagrams_QueueDatagram(NodeBuffer: PNMRAnetNodeBuffer; Datagram: PDatagram; ByteCount: Byte; TargetAliasID: Word): Boolean;
procedure NMRAnetDatagrams_SetCallback(var Hook: PDatagramTaskCallbackFunc; Func: PDatagramTaskCallbackFunc);   // Hook is any variable in NMRAnetDatagramDefines: DatagramTrainControlHook, DatagramMemConfigurationHook, etc


// defined in the dsPICxx_CAN_Interrupt.mpas file
  procedure StartCANMessageEngine; external;
  procedure EnableCANInterrupt(Enable: Boolean); external;
// defined in the NMRAnetStateMachine.mpas file
  function TryTransmitNMRABusLayerMsg(NodeBuffer: PNMRAnetNodeBuffer; Buffer: PCANBuffer; VariableField: DWord; DestinationAlias: Word; DataCount: Byte; DataBytes: PCAN_DataBytes): Boolean; external;

implementation

 function TryAllocateBuffer(NodeBuffer: PNMRAnetNodeBuffer; var Datagram: PDatagramBuffer): Boolean; forward;

procedure NMRAnetDatagrams_InitializeDatagramBuffer(DatagramBuffer: PDatagramBuffer);
var
  i, j: Integer;
begin
  if DatagramBuffer <> nil then
  begin
    DatagramBuffer^.Alias := 0;
    DatagramBuffer^.iByteCount := 0;
    DatagramBuffer^.iFrameCount := 0;
    DatagramBuffer^.iWatchdog := 0;
    DatagramBuffer^.ErrorCode.MTI := 0;
    DatagramBuffer^.ErrorCode.SubType[0] := 0;
    DatagramBuffer^.ErrorCode.SubType[1] := 0;
    DatagramBuffer^.iRetransmit := 0;
    DatagramBuffer^.State := DATAGRAM_BUFFER_EMPTY;
    DatagramBuffer^.iStateMachine := STATE_DATAGRAM_RECEIVE_START;
      for j := 0 to LEN_DATAGRAM-1 do
        DatagramBuffer^.DataBytes[j] := 0;
  end
end;

// *****************************************************************************
//  procedure NMRAnetDatagrams_Initialize;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetDatagrams_Initialize(NodeBuffer: PNMRAnetNodeBuffer);
var
  i: Integer;
begin
  NMRAnetDatagrams_InitializeDatagramBuffer(NodeBuffer^.DatagramReceive);
  NMRAnetDatagrams_InitializeDatagramBuffer(NodeBuffer^.DatagramTransmit);
  for i := 0 to LEN_DATAGRAM_BUFFER_OVERFLOW_LIST-1 do
    BufferOverflowList[i] := 0;
  DatagramCallbackFunc := PDatagramTaskCallbackFunc(nil);
  DatagramTrainControlCallbackFunc := PDatagramTaskCallbackFunc(nil);
  DatagramMemConfigurationCallbackFunc := PDatagramTaskCallbackFunc(nil);
end;


// *****************************************************************************
//
// procedure NMRAnetDatagrams_SetCallback;
//
//  Parameters:
//                None
//  Returns:
//                None
//  Description:
//              Not really a necessary function just helps future use in reminding
//              how these Callbacks work.
//
//              Callback is the variable int NMRAnetDatagramDefines
//                           DatagramUnknownCallback: PDatagramTaskCallbackFunc;
//                           DatagramTrainControlCallback: PDatagramTaskCallbackFunc;
//                           DatagramMemConfigurationCallback: PDatagramTaskCallbackFunc;
//                           etc
//
// *****************************************************************************
procedure NMRAnetDatagrams_SetCallback(var Hook: PDatagramTaskCallbackFunc; Func: PDatagramTaskCallbackFunc);
begin
  Hook := Func
end;

// *****************************************************************************
//
// procedure NMRAnetDatagrams_QueueDatagram;
//
//  Parameters:
//                None
//  Returns:
//                None
//  Description:
// *****************************************************************************
function NMRAnetDatagrams_QueueDatagram(NodeBuffer: PNMRAnetNodeBuffer; Datagram: PDatagram; ByteCount: Byte; TargetAliasID: Word): Boolean;
var
  DatagramBuffer: PDatagramBuffer;
  i: Integer;
begin
  Result := False;
  if TryAllocateBuffer(NodeBuffer, DatagramBuffer) then
  begin
    for i := 0 to ByteCount - 1 do
      DatagramBuffer^.DataBytes[i] := Datagram^[i];
    DatagramBuffer^.Alias := TargetAliasID;
    DatagramBuffer^.State := DATAGRAM_BUFFER_IN_PROCESS;
    DatagramBuffer^.iByteCount := ByteCount;
    DatagramBuffer^.iStateMachine := STATE_DATAGRAM_TRANSMIT_START;
    Result := True
  end;
end;

// *****************************************************************************
//
// procedure NMRAnetDatagrams_1ms_TimeTick;
//
//  Parameters:
//                None
//  Returns:
//                None
//  Description:
//              Updates internal flags to track for various timeout conditions mainly for the bus.
//
//              WARNING: Application must make sure that the Datagram Array is not
//              modified in an interrupt when calling this function...... Disable the CAN for
//              the time this takes to run.
//
// *****************************************************************************
procedure NMRAnetDatagrams_1ms_TimeTick(NodeBuffer: PNMRAnetNodeBuffer);
begin
  if NodeBuffer^.DatagramReceive <> nil then
  begin                                                                           // TODO THIS WILL BE RECURSIVE INTO THE LINKED LIST!!!@@@J@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
      if NodeBuffer^.DatagramReceive^.State = DATAGRAM_BUFFER_IN_PROCESS then
      begin
        if NodeBuffer^.DatagramReceive^.iWatchdog < DATAGRAM_WATCHDOG_MAX then                 // Latch it at DATAGRAM_WATCHDOG_MAX
          Inc(NodeBuffer^.DatagramReceive^.iWatchdog)                                          // Increase the Watchdog counter
      end
  end;
  
  if NodeBuffer^.DatagramTransmit <> nil then
  begin                                                                          // TODO THIS WILL BE RECURSIVE INTO THE LINKED LIST!!!@@@J@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    if NodeBuffer^.DatagramTransmit^.State = DATAGRAM_BUFFER_IN_PROCESS then
    begin
      if NodeBuffer^.DatagramTransmit^.iWatchdog < DATAGRAM_WATCHDOG_MAX then                 // Latch it at DATAGRAM_WATCHDOG_MAX
        Inc(NodeBuffer^.DatagramTransmit^.iWatchdog)                                          // Increase the Watchdog counter
    end
  end
end;

// *****************************************************************************
//  function TrySendDatagramResponse;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function TrySendDatagramResponse(NodeBuffer: PNMRAnetNodeBuffer; Datagram: PDatagramBuffer; NextDatagramState: Byte): Boolean;
var
  Buffer: TCANBuffer;
begin
  Result := False;
  if not CANStorage_ListFull(@TX_NMRAnetBufferList) then
  begin
    NMRAnetUtilities_CreateNMRABusMessagePacket(NodeBuffer, @Buffer, MTI_ADDRESSED, Datagram^.Alias, Datagram^.iByteCount, nil);
    Buffer.DataBytes[0] := Datagram^.ErrorCode.MTI;
    Buffer.DataBytes[1] := Datagram^.ErrorCode.SubType[0];
    Buffer.DataBytes[2] := Datagram^.ErrorCode.SubType[1];

    if CANStorage_AddToList(@TX_NMRAnetBufferList, @Buffer) then
    begin
      StartCANMessageEngine();      
      Datagram^.State := NextDatagramState;                                    // Set the new state of the Datagram buffer
      Result := True
    end
  end
end;

// *****************************************************************************
//  procedure SendBufferFullResponses;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure SendBufferFullResponses(NodeBuffer: PNMRAnetNodeBuffer);
var
  i: Integer;
  Datagram: TDatagramBuffer;
begin
  if NodeBuffer^.DatagramReceive <> nil then
  begin
    if not CANStorage_ListFull(@TX_NMRAnetBufferList) then
    begin
      i := 0;
      while i < LEN_DATAGRAM_BUFFER_OVERFLOW_LIST do
      begin
        if BufferOverflowList[i] <> 0 then
        begin
          Datagram.Alias := BufferOverflowList[i];
          NMRANetUtilities_LoadDatagramResultBytes(@Datagram, MTI_TYPE_DATAGRAM_REJECTED, @DATAGRAM_RESULT_REJECTED_BUFFER_FULL);
          if TrySendDatagramResponse(NodeBuffer, @Datagram, DATAGRAM_BUFFER_EMPTY) then
            BufferOverflowList[i] := 0;
          Exit;
        end;
        Inc(i);
      end;
    end
  end
end;


// *****************************************************************************
//  procedure DispatchSpecialDatagramMemConfiguration;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure DispatchSpecialDatagramMemConfiguration(NodeBuffer: PNMRAnetNodeBuffer; Datagram: PDatagramBuffer; NextHandledState, NextUnHandledState: Byte);
var
  Handled: Boolean;
begin
  Handled := False;
  if DatagramMemConfigurationCallbackFunc <> PDatagramTaskCallbackFunc(nil) then
    DatagramMemConfigurationCallbackFunc(NodeBuffer, Datagram, Handled);
  
  NMRAnetConfigurationProtocol_HandleDatagram(Datagram);
    
  if Handled then
    Datagram^.iStateMachine := NextHandledState
  else
    Datagram^.iStateMachine := NextUnHandledState
end;


// *****************************************************************************
//  procedure DispatchSpecialDatagramTrainControl;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure DispatchSpecialDatagramTrainControl(NodeBuffer: PNMRAnetNodeBuffer; Datagram: PDatagramBuffer; NextHandledState, NextUnHandledState: Byte);
var
  Handled: Boolean;
begin      
  Handled := False;
  if DatagramTrainControlCallbackFunc <> PDatagramTaskCallbackFunc( nil) then
    DatagramTrainControlCallbackFunc(NodeBuffer, Datagram, Handled);
    
  if Handled then
    Datagram^.iStateMachine := NextHandledState
  else
    Datagram^.iStateMachine := NextUnHandledState
end;

// *****************************************************************************
//  procedure DispatchDatagram;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure DispatchDatagram(NodeBuffer: PNMRAnetNodeBuffer; Datagram: PDatagramBuffer; NextHandledState, NextUnHandledState: Byte);
var
  Handled: Boolean;
begin
  Handled := False;
  if DatagramCallbackFunc <> PDatagramTaskCallbackFunc( nil) then
    DatagramCallbackFunc(NodeBuffer, Datagram, Handled);
    
  if Handled then
    Datagram^.iStateMachine := NextHandledState
  else
    Datagram^.iStateMachine := NextUnHandledState
end;

// *****************************************************************************
//  procedure TransmitClassifyDatagram;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure TransmitClassifyDatagram(Datagram: PDatagramBuffer; NextState_Single, NextState_Multi: Byte);
begin
  if Datagram^.State <> DATAGRAM_BUFFER_EMPTY then
  begin
    Datagram^.iReTransmit := 0;
    Datagram^.iFrameCount := 0;
    if Datagram^.iByteCount < 9 then                      // It is a single Frame Datagram
      Datagram^.iStateMachine := NextState_Single
    else
      Datagram^.iStateMachine:= NextState_Multi
  end
end;


// *****************************************************************************
//  procedure TransmitClassifyDatagram;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure TransmitSingleDatagram(NodeBuffer: PNMRAnetNodeBuffer; Buffer: PCANBuffer; Datagram: PDatagramBuffer; SourceAliasID: Word; NextState: Byte);
begin
  if not CANStorage_ListFull(@TX_NMRAnetBufferList) then
  begin
    if TryTransmitNMRABusLayerMsg(NodeBuffer, Buffer, MTI_DATAGRAM_ONLY_FRAME, Datagram^.Alias, Datagram^.iByteCount, PCAN_DataBytes( @Datagram^.DataBytes[0]) ) then
    begin
      Inc(Datagram^.iRetransmit);
      Datagram^.iWatchdog := 0;
      Datagram^.iStateMachine := NextState
     end
  end
end;

// *****************************************************************************
//  procedure TransmitMultiDatagram;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure TransmitMultiDatagram(NodeBuffer: PNMRAnetNodeBuffer; Buffer: PCANBuffer; Datagram: PDatagramBuffer; SourceAlias: Word; NextState: Byte);
var
  Count: Byte;
  MTI: DWord;
begin
  if not CANStorage_ListFull(@TX_NMRAnetBufferList) then
  begin
    Count := 8;                                                                 // Take a guess
    if Datagram^.iFrameCount = 0 then                                           // Calculate the MTI value for the Frame to be sent
      MTI := MTI_DATAGRAM_FRAME_START
    else
    if Datagram^.iFrameCount = (Datagram^.iByteCount - 1) div 8 then
    begin
      Count := Datagram^.iByteCount - (Datagram^.iFrameCount * 8);
      MTI := MTI_DATAGRAM_FRAME_END
    end else
      MTI := MTI_DATAGRAM_FRAME;

    if TryTransmitNMRABusLayerMsg(NodeBuffer, Buffer, MTI, Datagram^.Alias, Count, PCAN_DataBytes( @Datagram^.DataBytes[Datagram^.iFrameCount * 8])) then
    begin
      Inc(Datagram^.iFrameCount);
      Datagram^.iWatchdog := 0;
      if MTI = MTI_DATAGRAM_FRAME_END then
      begin
        Inc(Datagram^.iRetransmit);
        Datagram^.iStateMachine := NextState;
      end
    end
  end
end;

// *****************************************************************************
//  procedure TransmitWaitForResponse;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure TransmitWaitForResponse(Datagram: PDatagramBuffer; NextState_Okay, NextState_Retry, NextState_Bailout: Byte);
begin
  // DATAGRAM_BUFFER_TRANSFER_COMPLETE will be set by NMRAnetStateMachine.HandleDatagramResponse when the target datagram responds
  if Datagram^.State = DATAGRAM_BUFFER_TRANSFER_COMPLETE then
  begin
    case Datagram^.ErrorCode.MTI of
       MTI_TYPE_DATAGRAM_RECIEVED_OK :
         begin
           Datagram^.State := DATAGRAM_BUFFER_EMPTY;
           Datagram^.iStateMachine := NextState_Okay;
         end;
       MTI_TYPE_DATAGRAM_REJECTED :                                            // Rejected, decode what the issue was
         begin

           if DATAGRAM_RESULT_REJECTED_RESEND_MASK[0] and Datagram^.ErrorCode.SubType[1] <> 0 then
           begin    
             // Try to Resend
             if Datagram^.iRetransmit < DATAGRAM_MAX_RETRY_COUNT then
             begin
               Datagram^.iWatchdog := 0;
               Datagram^.iFrameCount := 0;
               Datagram^.State := DATAGRAM_BUFFER_IN_PROCESS;
               Datagram^.iStateMachine := NextState_Retry
             end else 
             begin
               Datagram^.State := DATAGRAM_BUFFER_EMPTY;
               Datagram^.iStateMachine := NextState_Bailout;
             end;
           end else
           if DATAGRAM_RESULT_REJECTED_NO_RESENT_MASK[0] and Datagram^.ErrorCode.SubType[1] <> 0 then
           begin
             // Don't Resend

             // TODO: STORE A LIST OF NODES TO NOT SEND TO????????
             
             Datagram^.iStateMachine := NextState_Bailout;
             Datagram^.State := DATAGRAM_BUFFER_EMPTY;
           end else
           begin
             // Don't know what happended
             Datagram^.iStateMachine := NextState_Bailout;
             Datagram^.State := DATAGRAM_BUFFER_EMPTY;
           end;
         end;
     end; // case
  end else
  begin
    if Datagram^.iWatchdog >= DATAGRAM_WATCHDOG_MAX then
    begin
      if Datagram^.iRetransmit >= DATAGRAM_MAX_RETRY_COUNT then
      begin
        Datagram^.State := DATAGRAM_BUFFER_EMPTY;
        Datagram^.iStateMachine := NextState_Bailout;
      end else
      begin
        Datagram^.iWatchdog := 0;
        Datagram^.iFrameCount := 0;
        Datagram^.iStateMachine := NextState_Retry
      end
    end
  end
end;

// *****************************************************************************
//  procedure NMRAnetDatagrams_ProcessTransmit;
//
//  Parameters:
//
//  Result:
//
//  Description: The StateMachine index is stored within each Datagram Buffer. As
//               such a hung datagram due to a non-responsve target will not hang up
//               other datagrams being dealt with
// *****************************************************************************
procedure NMRAnetDatagrams_ProcessTransmit(NodeBuffer: PNMRAnetNodeBuffer);
var
  Buffer: TCANBuffer;
  ActiveDatagram: PDatagramBuffer;
begin
  if NodeBuffer^.DatagramTransmit <> nil then
  begin
    ActiveDatagram := NodeBuffer^.DatagramTransmit;
    if ActiveDatagram^.State <> DATAGRAM_BUFFER_EMPTY then
    begin
      case ActiveDatagram^.iStateMachine of
        STATE_DATAGRAM_TRANSMIT_START                          : TransmitClassifyDatagram(ActiveDatagram, STATE_DATAGRAM_TRANSMIT_SINGLE_FRAME, STATE_DATAGRAM_TRANSMIT_MULTI_FRAME);
        STATE_DATAGRAM_TRANSMIT_SINGLE_FRAME                   : TransmitSingleDatagram(NodeBuffer, @Buffer, ActiveDatagram, NodeBuffer^.Node.AliasID, STATE_DATAGRAM_TRANSMIT_WAIT_FOR_RESPONSE_SINGLE_FRAME);
        STATE_DATAGRAM_TRANSMIT_WAIT_FOR_RESPONSE_SINGLE_FRAME : TransmitWaitForResponse(ActiveDatagram, STATE_DATAGRAM_TRANSMIT_START, STATE_DATAGRAM_TRANSMIT_SINGLE_FRAME, STATE_DATAGRAM_TRANSMIT_START);
        STATE_DATAGRAM_TRANSMIT_MULTI_FRAME                    : TransmitMultiDatagram(NodeBuffer, @Buffer, ActiveDatagram, NodeBuffer^.Node.AliasID, STATE_DATAGRAM_TRANSMIT_WAIT_FOR_RESPONSE_MULTI_FRAME);
        STATE_DATAGRAM_TRANSMIT_WAIT_FOR_RESPONSE_MULTI_FRAME  : TransmitWaitForResponse(ActiveDatagram, STATE_DATAGRAM_TRANSMIT_START, STATE_DATAGRAM_TRANSMIT_MULTI_FRAME, STATE_DATAGRAM_TRANSMIT_START)
       else
         ActiveDatagram^.iStateMachine := STATE_DATAGRAM_TRANSMIT_START;
       end;
    end;
  end                            // TODO THIS WILL BE RECURSIVE INTO THE LINKED LIST!!!@@@J@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
end;

procedure ProcessAbandonedDatagram(Datagram: PDatagramBuffer; AbandonState, NextState: Byte);
begin
  if Datagram^.iWatchdog >= DATAGRAM_WATCHDOG_MAX then
  begin
    NMRANetUtilities_LoadDatagramResultBytes(Datagram, MTI_TYPE_DATAGRAM_REJECTED, @DATAGRAM_RESULT_REJECTED_OUT_OF_ORDER);
    Datagram^.iStateMachine := AbandonState    // Too long between datagram frames, it is abandoned
  end else
    Datagram^.iStateMachine := NextState;
end;

// *****************************************************************************
//  procedure NMRAnetDatagrams_ProcessReceive;
//
//  Parameters:
//
//  Result:
//
//  Description: The StateMachine index is stored within each Datagram Buffer. As
//               such a hung datagram due to a non-responsve target will not hang up
//               other datagrams being dealt with.
//               The CAN layer interrupt handles the CAN recipt of the datgram over many frames
//               Once the datagram is complete it sets the DATAGRAM_BUFFER_TRANSFER_COMPLETE
//               state of the datagram and that is the end. The main loop statemachine detects
//               the DATAGRAM_BUFFER_TRANSFER_COMPLETE flag and then dispatches it depending on
//               its code, necessary responses to the sender are also handled automatically here.
//               It also detect if the DATAGRAM_BUFFER_IN_PROCESS flag has been set
//               too long and if so calls it abandon then frees the buffer
// *****************************************************************************
procedure NMRAnetDatagrams_ProcessReceive(NodeBuffer: PNMRAnetNodeBuffer);
var
  ActiveDatagram: PDatagramBuffer;
begin
  if NodeBuffer^.DatagramReceive <> nil then
  begin
    ActiveDatagram := NodeBuffer^.DatagramReceive;

    if ActiveDatagram^.State <> DATAGRAM_BUFFER_EMPTY then
    begin
      case ActiveDatagram^.iStateMachine of

        STATE_DATAGRAM_RECEIVE_START :
          begin
            case ActiveDatagram^.State of
              DATAGRAM_BUFFER_IN_PROCESS         : ProcessAbandonedDatagram(ActiveDatagram, STATE_DATAGRAM_SENDING_RESPONSE, STATE_DATAGRAM_ERROR_RESPONSES);
              DATAGRAM_BUFFER_TRANSFER_COMPLETE  : ActiveDatagram^.iStateMachine := STATE_DATAGRAM_RECEIVE_COMPLETE  // The datagram has been fully received time to respond to hte sender
            else
              ActiveDatagram^.iStateMachine := STATE_DATAGRAM_ERROR_RESPONSES;
            end;
          end;

        STATE_DATAGRAM_RECEIVE_COMPLETE  :             // ProcessReceiveInterrupt has completed the datagram on the CAN layer
          begin                                        // it has filled in the ErrorCode within that Statemachine during Receive
          //  if ActiveDatagram^.ErrorCode.MTI and DATAGRAM_TYPE_TWO_BYTE_CMD_MASK <>
          //  if ActiveDatagram^.ErrorCode.MTI and DATAGRAM_TYPE_SIX_BYTE_CMD_MASK <>     TODO DEALING WITH THIS CASES. JUNE 1 2012 NO KNOWN USES DEFINED
            case ActiveDatagram^.ErrorCode.MTI of
              MTI_TYPE_DATAGRAM_RECIEVED_OK : begin
                                            case ActiveDatagram^.Databytes[0] of
                                              DATAGRAM_TYPE_CONFIGURATION   : DispatchSpecialDatagramMemConfiguration(NodeBuffer, ActiveDatagram, STATE_DATAGRAM_HANDLED_MESSASGE, STATE_DATAGRAM_UNHANDLED_MESSAGE);      // Memory Configuration Protocol
                                              DATAGRAM_TYPE_TRAIN_CONTROL   : DispatchSpecialDatagramTrainControl(NodeBuffer, ActiveDatagram, STATE_DATAGRAM_HANDLED_MESSASGE, STATE_DATAGRAM_UNHANDLED_MESSAGE)          // Train Control Protocol
                                            else
                                               DispatchDatagram(NodeBuffer, ActiveDatagram, STATE_DATAGRAM_HANDLED_MESSASGE, STATE_DATAGRAM_UNHANDLED_MESSAGE);  // Return Not Accepted for any datagram types not handled
                                            end;
               end;
              MTI_TYPE_DATAGRAM_REJECTED    : begin
                                             ActiveDatagram^.iStateMachine := STATE_DATAGRAM_SENDING_RESPONSE; // The Receive Statemachine has already loaded up the ErrorCode field with the reason for the Rejection
                                         end;
            end
          end;

        STATE_DATAGRAM_HANDLED_MESSASGE :
          begin
            NMRANetUtilities_LoadDatagramResultBytes(ActiveDatagram, MTI_TYPE_DATAGRAM_RECIEVED_OK, nil);
            ActiveDatagram^.iStateMachine := STATE_DATAGRAM_SENDING_RESPONSE;
          end;

        STATE_DATAGRAM_UNHANDLED_MESSAGE :
          begin
            NMRANetUtilities_LoadDatagramResultBytes(ActiveDatagram, MTI_TYPE_DATAGRAM_REJECTED, @DATAGRAM_RESULT_REJECTED_SOURCE_DATAGRAMS_NOT_ACCEPTED);
            ActiveDatagram^.iStateMachine := STATE_DATAGRAM_SENDING_RESPONSE;
          end;

        STATE_DATAGRAM_SENDING_RESPONSE  :     // Make sure the ErrorCode informatoin is preloaded into the Datagram before entering this State
          begin
            if TrySendDatagramResponse(NodeBuffer, ActiveDatagram, DATAGRAM_BUFFER_EMPTY) then
              ActiveDatagram^.iStateMachine := STATE_DATAGRAM_ERROR_RESPONSES;
          end;

        STATE_DATAGRAM_ERROR_RESPONSES  :
          begin
            SendBufferFullResponses(NodeBuffer);
            ActiveDatagram^.iStateMachine := STATE_DATAGRAM_RECEIVE_START
          end
       else
         ActiveDatagram^.iStateMachine := STATE_DATAGRAM_RECEIVE_START;
       end;
    end;                                                                         // TODO THIS WILL BE RECURSIVE INTO THE LINKED LIST!!!@@@J@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  end
end;

// *****************************************************************************
//  function FindMatchingInProcessReceiveDatagram;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function FindMatchingInProcessReceiveDatagram(NodeBuffer: PNMRAnetNodeBuffer; var Datagram: PDatagramBuffer; Alias: Word): Boolean;
begin
  Result := False;
  if NodeBuffer^.DatagramReceive <> nil then
  begin
    if NodeBuffer^.DatagramReceive^.State = DATAGRAM_BUFFER_IN_PROCESS then
    begin
      if NMRAnetUtilities_CompareAliasIDs(NodeBuffer^.DatagramReceive^.Alias, Alias) then
      begin
        Datagram := NodeBuffer^.DatagramReceive;
        Result := True;
      end;
    end                                                                      // TODO THIS WILL BE RECURSIVE INTO THE LINKED LIST!!!@@@J@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  end
end;

// *****************************************************************************
//  procedure UpdateFrameCount;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure UpdateFrameCount(Datagram: PDatagramBuffer);
begin
  if Datagram^.ErrorCode.MTI = MTI_TYPE_DATAGRAM_RECIEVED_OK then                     // If in Error has already failed this function
  begin
    Inc(Datagram^.iFrameCount);                                                 // Next Frame
    Datagram^.iWatchdog := 0;                                                   // Reset the Watchdog since the source connected again
    if Datagram^.iFrameCount >= DATAGRAM_MAX_FRAME_COUNT then                   // Source sent too many frames
    begin
      NMRANetUtilities_LoadDatagramResultBytes(Datagram, MTI_TYPE_DATAGRAM_REJECTED, @DATAGRAM_RESULT_REJECTED_OUT_OF_ORDER); // Ready for a "Frame out of Order" Response
      Datagram^.iFrameCount := 0;
    end
  end;
end;

// *****************************************************************************
//  procedure StoreBytes;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure StoreBytes(Datagram: PDatagramBuffer; var Buffer: TCANBuffer);
var
  i, Offset: Integer;
begin
  if Datagram^.ErrorCode.MTI = MTI_TYPE_DATAGRAM_RECIEVED_OK then        // Only store if thre is no error
  begin
    Offset := Datagram^.iByteCount;
    for i := 0 to Buffer.DataCount - 1 do
    begin
      Datagram^.DataBytes[i + Offset] := Buffer.DataBytes[i];
      Inc(Datagram^.iByteCount);
    end;
  end
end;

// *****************************************************************************
//  procedure AddToBufferOverflowList;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure AddToBufferOverflowList(NodeBuffer: PNMRAnetNodeBuffer; Datagram: PDatagramBuffer);
var
  i: Integer;
begin
  while i < LEN_DATAGRAM_BUFFER_OVERFLOW_LIST do
  begin
    if BufferOverflowList[i] = 0 then
    begin
      BufferOverflowList[i] := Datagram^.Alias;
      Exit;
    end
  end
end;

// *****************************************************************************
//  function TryAllocateBuffer;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function TryAllocateBuffer(NodeBuffer: PNMRAnetNodeBuffer; var Datagram: PDatagramBuffer): Boolean;
begin
  Result := False;
  if NodeBuffer^.DatagramReceive <> nil then
  begin
    if NodeBuffer^.DatagramReceive^.State = DATAGRAM_BUFFER_EMPTY then
    begin                                                                       // Grab the first empty buffer
      Datagram := NodeBuffer^.DatagramReceive;                                  // It is NOT initialized
      Datagram^.ErrorCode.MTI := MTI_TYPE_DATAGRAM_RECIEVED_OK;
      Result := True
    end                                                    // TODO THIS WILL BE RECURSIVE INTO THE LINKED LIST!!!@@@J@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  end
end;

// *****************************************************************************
//  procedure NMRAnetDatagrams_ProcessReceive;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetDatagrams_ProcessReceiveFromInterruptContext(NodeBuffer: PNMRAnetNodeBuffer; Buffer: PCANBuffer);
var
  Datagram: PDatagramBuffer;
begin
  Datagram := PDatagramBuffer( nil);
  case Buffer^.ID and MTI_TYPE_MASK of
    MTI_DATAGRAM_ONLY_FRAME :
      begin
        if TryAllocateBuffer(NodeBuffer, Datagram) then
        begin
          Datagram^.Alias := Buffer^.ID and MASK_SOURCE_ALIAS;
          Datagram^.iByteCount := 0;
          Datagram^.iFrameCount := 0;
          StoreBytes(Datagram, Buffer^);
          Datagram^.State := DATAGRAM_BUFFER_TRANSFER_COMPLETE;                // Ready for a "Full" Response
        end
      end;
    MTI_DATAGRAM_FRAME_START :
      begin
        if TryAllocateBuffer(NodeBuffer, Datagram) then
        begin
          Datagram^.Alias := Buffer^.ID and MASK_SOURCE_ALIAS;
          Datagram^.iByteCount := 0;
          Datagram^.iFrameCount := 0;
          Datagram^.iWatchdog := 0;
          StoreBytes(Datagram, Buffer^);
          Datagram^.State := DATAGRAM_BUFFER_IN_PROCESS;
        end
      end;
    MTI_DATAGRAM_FRAME :
      begin
        if FindMatchingInProcessReceiveDatagram(NodeBuffer, Datagram, Buffer^.ID and MASK_SOURCE_ALIAS) then
        begin
          UpdateFrameCount(Datagram);
          StoreBytes(Datagram, Buffer^);
        end
      end;
    MTI_DATAGRAM_FRAME_END :
      begin
        if FindMatchingInProcessReceiveDatagram(NodeBuffer, Datagram, Buffer^.ID and MASK_SOURCE_ALIAS) then
        begin
          UpdateFrameCount(Datagram);
          StoreBytes(Datagram, Buffer^);
          Datagram^.State := DATAGRAM_BUFFER_TRANSFER_COMPLETE;                // Ready for a "Full" Response
        end else
          AddToBufferOverflowList(NodeBuffer, Datagram);
      end;
   end;
end;

end.