unit NMRAnetDatagrams;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:
//
// ******************************************************************************

uses
  NMRAnetUtilities,
  CANDefines,
  CANStorage,
  NMRAnetBufferPoolsDefines,
  NMRAnetDefines,
  NMRAnetDatagramDefines;

procedure NMRAnetDatagrams_Initialize;
procedure NMRAnetDatagrams_InitializeDatagramBuffer(DatagramBuffer: PDatagramBuffer);
procedure NMRAnetDatagrams_100ms_TimeTick(Node: PNMRAnetNode);
procedure NMRAnetDatagrams_SetCallback(var Hook: PDatagramTaskCallbackFunc; Func: PDatagramTaskCallbackFunc);   // Hook is any variable in NMRAnetDatagramDefines: DatagramTrainControlHook, DatagramMemConfigurationHook, etc
procedure NMRAnetDatagrams_SendDatagramFrame(Node: PNMRAnetNode; Buffer: PCANBuffer; Alias: Word; MessageLength: DWord; var DatagramIndex: Byte; DataByteCount: Byte; DataBytes: PCAN_DataBytes);

// defined in the dsPICxx_CAN_Interrupt.mpas file
  procedure StartCANMessageEngine; external;
  procedure EnableCANInterrupt(Enable: Boolean); external;
// defined in the NMRAnetStateMachine.mpas file
  function TryTransmitNMRABusLayerMsg(Node: PNMRAnetNode; Buffer: PCANBuffer; VariableField: DWord; DestinationAlias: Word; DataCount: Byte; DataBytes: PCAN_DataBytes): Boolean; external;

implementation

procedure NMRAnetDatagrams_InitializeDatagramBuffer(Buffer: PDatagramBuffer);
var
  i, j: Integer;
begin
  if Buffer <> nil then
  begin
    Buffer^.State := 0;
    Buffer^.Alias := 0;
    Buffer^.Next := 0;
    Buffer^.RefCount := 0;
    Buffer^.mCode := 0;
    Buffer^.StateMachine := 0;
    Buffer^.Tag := 0;
    Buffer^.SourceNodePtr := GenericPointerAdapter( nil);

    Buffer^.iByteCount := 0;
    Buffer^.iWatchdog := 0;
    Buffer^.ErrorCode.MTI := MTI_EXTENSION_DATAGRAM_RECIEVED_OK;                // Assume Success
    Buffer^.ErrorCode.Count := 1;                                               // Assume only the MTI
    Buffer^.ErrorCode.SubType[0] := 0;
    Buffer^.ErrorCode.SubType[1] := 0;
    Buffer^.iRetransmit := 0;
    for j := 0 to LEN_DATAGRAM-1 do
      Buffer^.DataBytes[j] := 0;
  end
end;

// *****************************************************************************
//  procedure NMRAnetDatagrams_Initialize;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetDatagrams_Initialize;
begin
  DatagramCallbackFunc := PDatagramTaskCallbackFunc(nil);
  DatagramTrainControlCallbackFunc := PDatagramTaskCallbackFunc(nil);
  DatagramMemConfigurationCallbackFunc := PDatagramTaskCallbackFunc(nil);
end;


// *****************************************************************************
//
// procedure NMRAnetDatagrams_SetCallback;
//
//  Parameters:
//                None
//  Returns:
//                None
//  Description:
//              Not really a necessary function just helps future use in reminding
//              how these Callbacks work.
//
//              Callback is the variable int NMRAnetDatagramDefines
//                           DatagramUnknownCallback: PDatagramTaskCallbackFunc;
//                           DatagramTrainControlCallback: PDatagramTaskCallbackFunc;
//                           DatagramMemConfigurationCallback: PDatagramTaskCallbackFunc;
//                           etc
//
// *****************************************************************************
procedure NMRAnetDatagrams_SetCallback(var Hook: PDatagramTaskCallbackFunc; Func: PDatagramTaskCallbackFunc);
begin
  Hook := Func
end;

// *****************************************************************************
//
// procedure NMRAnetDatagrams_100ms_TimeTick;
//
//  Parameters:
//                None
//  Returns:
//                None
//  Description:
//              Updates internal flags to track for various timeout conditions mainly for the bus.
//
//              WARNING: Application must make sure that the Datagram Array is not
//              modified in an interrupt when calling this function...... Disable the CAN for
//              the time this takes to run.
//
// *****************************************************************************
procedure NMRAnetDatagrams_100ms_TimeTick(Node: PNMRAnetNode);
var
  DatagramBuffer: PDatagramBuffer;
begin

//   NEED TO DEAL WITH ABANDON DATAGRAMS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1



{  if Node^.Msg <> nil then
  begin
    if Node^.Msg^.State and RMB_BUFFER_DATAGRAM <> 0 then                                           // See if the buffer is a Datagram Pointer
    begin
      DatagramBuffer :=  PDatagramBuffer(Node^.Msg^.BufferPtr);
      if DatagramBuffer^.iWatchdog < DATAGRAM_WATCHDOG_MAX then                 // Latch it at DATAGRAM_WATCHDOG_MAX
        Inc( DatagramBuffer^.iWatchdog)                                          // Increase the Watchdog counter
    end
  end; }
end;

// *****************************************************************************
//
// procedure NMRAnetDatagrams_SendDatagramFrame;
//
//  Parameters:
//
//  Returns:
//
//  Description:
//
// *****************************************************************************
procedure NMRAnetDatagrams_SendDatagramFrame(Node: PNMRAnetNode; Buffer: PCANBuffer; Alias: Word; MessageLength: DWord; var DatagramIndex: Byte; DataByteCount: Byte; DataBytes: PCAN_DataBytes);
begin
  if DatagramIndex = 0 then
  begin                                                                         // First Frame of the Datagram....
    if MessageLength < 9 then                                                   // Single Frame Datagram
    begin
      if TryTransmitNMRABusLayerMsg(Node, Buffer, MTI_DATAGRAM_ONLY_FRAME, Alias, DataByteCount, DataBytes) then
        DatagramIndex := DatagramIndex + DataByteCount;                         // Now wait for ACK
    end else
    begin
      if TryTransmitNMRABusLayerMsg(Node, Buffer, MTI_DATAGRAM_FRAME_START, Alias, DataByteCount, DataBytes) then
        DatagramIndex := DatagramIndex + DataByteCount;
    end
  end else
  if DatagramIndex + DataByteCount > MessageLength - 1 then
  begin
    if TryTransmitNMRABusLayerMsg(Node, Buffer, MTI_DATAGRAM_FRAME_END, Alias, DataByteCount, DataBytes) then
      DatagramIndex := DatagramIndex + DataByteCount;                           // Now wait for ACK
  end else
  begin
    if TryTransmitNMRABusLayerMsg(Node, Buffer, MTI_DATAGRAM_FRAME, Alias, DataByteCount, DataBytes) then
      DatagramIndex := DatagramIndex + DataByteCount;
  end
end;

end.