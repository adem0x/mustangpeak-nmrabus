unit NMRAnetAbbreviatedConfigurationProtocol;

uses
  NMRAnetUtilities,
  CANStorage,
  NMRAnetAppDefines,
  CANDefines,
  NMRAnetDefines,
  NMRAnetAbbreviatedConfigurationProtocolDefines;
  
  
procedure NMRAnetAbbreviatedConfigurationProtocol_Initialize;
procedure NMRAnetAbbreviatedConfigurationProtocol_Process;
procedure NMRAnetAbbreviatedConfigurationProtocol_ProcessReceive;
function NMRAnetAbbreviatedConfigurationProtocol_QueueTransmit(SourceAlias, DestAlias: Word): Boolean;

  // defined in the dsPICxx_CAN_Interrupt.mpas file
  procedure StartCANMessageEngine; external;

implementation

// *****************************************************************************
//  procedure NMRAnetAbbreviatedConfigurationProtocol_Initialize
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetAbbreviatedConfigurationProtocol_Initialize;
var
  i: Integer;
begin
  ACDI_BufferList.iActiveBuffer := 0;
  for i := 0 to LEN_ACDI_BUFFER_ARRAY - 1 do
  begin
    ACDI_BufferList.List[i].State := ACDI_BUFFER_STATE_EMPTY;
    ACDI_BufferList.List[i].iState := STATE_ACDI_START;
    ACDI_BufferList.List[i].DestAlias := 0;
    ACDI_BufferList.List[i].SourceAlias := 0;
    ACDI_BufferList.List[i].iNextChar := 0;
  end;
end;

// *****************************************************************************
//  procedure NMRAnetAbbreviatedConfigurationProtocol_QueueTransmit
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetAbbreviatedConfigurationProtocol_QueueTransmit(SourceAlias, DestAlias: Word): Boolean;
var
  i: Integer;
begin
  Result := False;
  i := 0;
  while i < LEN_ACDI_BUFFER_ARRAY do
  begin
    if ACDI_BufferList.List[i].State = ACDI_BUFFER_STATE_EMPTY then
    begin
      ACDI_BufferList.List[i].State :=  ACDI_BUFFER_STATE_PROCESSING;
      ACDI_BufferList.List[i].DestAlias := DestAlias;
      ACDI_BufferList.List[i].SourceAlias := SourceAlias;
      Result := True;
      Break
    end;
    Inc(i)
  end;
end;

// *****************************************************************************
//  procedure NullChar
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NullChar(CANBuffer: PCANBuffer; Buffer: PACDI_Buffer; NextState: Byte);
begin
  CANBuffer^.DataBytes[CANBuffer^.DataCount] := #0;
  Buffer^.iNextChar := 0;
  Inc(CANBuffer^.DataCount);
  Buffer^.iTransferState := NextState;
end;

// *****************************************************************************
//  procedure LoadChars
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure LoadChars(CANBuffer: PCANBuffer; Buffer: PACDI_Buffer; Str: ^Char; StringLen: Word; NextState: Byte);
begin
  if Buffer^.iNextChar < StringLen then
  begin
    CANBuffer^.DataBytes[CANBuffer^.DataCount] := Str^;
    Inc(Str);
    Inc(Buffer^.iNextChar);
    Inc(CANBuffer^.DataCount);
  end else
    Buffer^.iTransferState := NextState;
end;

// *****************************************************************************
//  procedure CheckForVersionInsertion
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure CheckForVersionInsertion(CANBuffer: PCANBuffer; Buffer: PACDI_Buffer; TestState: Byte);
begin
  // First part of the Constant Manufacturing Section needs Version ID
  if (Buffer^.iNextChar = 0) and (Buffer^.iTransferState = TestState) then
  begin
    CANBuffer^.DataBytes[CANBuffer^.DataCount] := ACDI_VERSION;
    Inc(CANBuffer^.DataCount);
  end;
end;


// *****************************************************************************
//  procedure NMRAnetAbbreviatedConfigurationProtocol_Process
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetAbbreviatedConfigurationProtocol_Process;
var
  ActiveBuffer: PACDI_Buffer;
  Buffer: TCANBuffer;
begin
  ActiveBuffer := @ACDI_BufferList.List[ACDI_BufferList.iActiveBuffer];
  case ActiveBuffer^.iState of
    STATE_ACDI_START :
      begin
        if ActiveBuffer^.State <> ACDI_BUFFER_STATE_EMPTY then
        begin
          ActiveBuffer^.iNextChar := 0;
          ActiveBuffer^.iTransferState := ACDI_TRANSFER_MFG;
          ActiveBuffer^.iState := STATE_ACDI_TRANSMIT_CHARS;
        end;
      end;
    STATE_ACDI_TRANSMIT_CHARS :
      begin
        if not CANStorage_ListFull(@TX_NMRAnetBufferList) then
        begin
          Buffer.DataCount := 0;
          Buffer.DataBytes[Buffer.DataCount] := MTI_TYPE_SIMPLENODE_IDENTIFY_INFO_REPLY;
          Inc(Buffer.DataCount);

          CheckForVersionInsertion(@Buffer, ActiveBuffer, ACDI_TRANSFER_MFG);    // First part of the Constant Manufacturing Section needs Version ID
          
          while (ActiveBuffer^.iTransferState <> ACDI_TRANSFER_COMPLETE) and (Buffer.DataCount < 8) do
          begin
            CheckForVersionInsertion(@Buffer, ActiveBuffer, ACDI_TRANSFER_USER_NAME);       // First part of the User Section needs the Version ID as well

            case ActiveBuffer^.iTransferState of
              ACDI_TRANSFER_MFG         : LoadChars(@Buffer, ActiveBuffer, @ABBREVIATED_CDI_MFG[ActiveBuffer^.iNextChar], Length(ABBREVIATED_CDI_MFG), ACDI_MFG_NULL);
              ACDI_MFG_NULL             : NullChar(@Buffer, ActiveBuffer, ACDI_TRANSFER_MFG_NAME);
              ACDI_TRANSFER_MFG_NAME    : LoadChars(@Buffer, ActiveBuffer, @ABBREVIATED_CDI_MFG_NAME[ActiveBuffer^.iNextChar], Length(ABBREVIATED_CDI_MFG_NAME), ACDI_MFG_NAME_NULL);
              ACDI_MFG_NAME_NULL        : NullChar(@Buffer, ActiveBuffer, ACDI_TRANSMFER_MFG_HW_VER);
              ACDI_TRANSMFER_MFG_HW_VER : LoadChars(@Buffer, ActiveBuffer, @ABBREVIATED_CDI_MFG_HW_VER[ActiveBuffer^.iNextChar], Length(ABBREVIATED_CDI_MFG_HW_VER), ACDI_MFG_HW_NULL);
              ACDI_MFG_HW_NULL          : NullChar(@Buffer, ActiveBuffer, ACDI_TRANSFER_MFG_SW_VER);
              ACDI_TRANSFER_MFG_SW_VER  : LoadChars(@Buffer, ActiveBuffer, @ABBREVIATED_CDI_MFG_SW_VER[ActiveBuffer^.iNextChar], Length(ABBREVIATED_CDI_MFG_SW_VER), ACDI_MFG_SW_NULL);
              ACDI_MFG_SW_NULL          : NullChar(@Buffer, ActiveBuffer, ACDI_TRANSFER_USER_NAME);
              ACDI_TRANSFER_USER_NAME   : LoadChars(@Buffer, ActiveBuffer, @ABBREVIATED_CDI_USER_NAME[ActiveBuffer^.iNextChar], Length(ABBREVIATED_CDI_USER_NAME), ACDI_USER_NAME_NULL);
              ACDI_USER_NAME_NULL       : NullChar(@Buffer, ActiveBuffer, ACDI_TRANSMFER_USER_DESC);
              ACDI_TRANSMFER_USER_DESC  : LoadChars(@Buffer, ActiveBuffer, @ABBREVIATED_CDI_USER_DISC[ActiveBuffer^.iNextChar], Length(ABBREVIATED_CDI_USER_DISC), ACDI_USER_DESC_NULL);
              ACDI_USER_DESC_NULL       : NullChar(@Buffer, ActiveBuffer, ACDI_TRANSFER_COMPLETE);
            end;
          end;
          
          NMRAnetUtilities_CreateNMRABusMessagePacket(@Buffer, FT_PROTOCOL_ACDI, ActiveBuffer^.DestAlias, ActiveBuffer^.SourceAlias, Buffer.DataCount, nil);
          CANStorage_AddToList(@TX_NMRAnetBufferList, @Buffer);
          StartCANMessageEngine();

          if Buffer.DataCount < 8 then
          begin
            ActiveBuffer^.State := ACDI_BUFFER_STATE_EMPTY;
            ActiveBuffer^.iState := STATE_ACDI_START;
          end
        end
      end;
  end;
  
  Inc(ACDI_BufferList.iActiveBuffer);
  if ACDI_BufferList.iActiveBuffer >= LEN_ACDI_BUFFER_ARRAY then
    ACDI_BufferList.iActiveBuffer := 0;
end;

// *****************************************************************************
//  procedure NMRAnetAbbreviatedConfigurationProtocol_ProcessReceive
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetAbbreviatedConfigurationProtocol_ProcessReceive;
begin
end;


end.