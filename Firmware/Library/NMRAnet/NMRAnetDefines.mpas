unit NMRAnetDefines;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

{$I Options.inc}

uses
  CANDefines,
  NMRAnetAbbreviatedConfigurationProtocolDefines,
  NMRAnetDatagramDefines;

const
  MAX_BUS_LOGIN_TIMEOUT = 201;                                                  // Number of 1ms time tick to wait for a node to send a RID to signal a duplicate Alais

  CAN_TX_0 = 0;
  CAN_TX_1 = 1;
  CAN_TX_2 = 2;

  CAN_RX_0 = 0;
  CAN_RX_1 = 1;

  CAN_TX_PRIORITY_0 = 0;
  CAN_TX_PRIORITY_1 = 1;
  CAN_TX_PRIORITY_2 = 2;
  CAN_TX_PRIORITY_3 = 3;
  
type
  TPIVProtocolValueArray = array[6] of Byte;

// *****************************************************************************
//  Extended CAN Frames
//  29 Bits Divided as follows:
//     - 1 Bit = Priority (1 = Low Priority typical)
//     - 4 Bits = Frame Type (FT_xxxx Constants)
//     - 12 Bits = Destination Node Address Alias or Message Type (MT_xxx Constants)
//     - 12 Bits = Source Node Address Alias
//
// Frame Types.  These define what the Frame of the CAN message consists of.
const
  FT_CAN                            = $00000000;                                // Frame Type CAN Control Message
  FT_CID0                           = $07000000;                                // First 12 Bits of 48 bit Node ID
  FT_CID1                           = $06000000;                                // 2rd 12 Bits of 48 bit Node ID
  FT_CID2                           = $05000000;                                // 3nd 12 Bits of 48 bit Node ID
  FT_CID3                           = $04000000;                                // Last 12 Bits of 48 bit Node ID
  FT_CID4                           = $03000000;                                // non-OpenLCB Protocol
  FT_CID5                           = $02000000;                                // non-OpenLCB Protocol
  FT_CID6                           = $01000000;                                // non-OpenLCB Protocol
  FT_CID_MASK                       = $0F000000;
  
  FT_RID                            = $00700000;                                // Reserve ID
  FT_AMD                            = $00701000;                                // Alias Map Definition
  FT_AME                            = $00702000;                                // Alias Mapping Enquiry
  FT_AMR                            = $00703000;                                // Alias Map Reset Frame

  MTI_UNADDRESSED                   = $08000000;
  MTI_RESERVED                      = $09000000;
  MTI_DATAGRAM_ONLY_FRAME           = $0A000000;
  MTI_DATAGRAM_FRAME_START          = $0B000000;
  MTI_DATAGRAM_FRAME                = $0C000000;
  MTI_DATAGRAM_FRAME_END            = $0D000000;                                // Sub type SFT_DATAGRAM_END
  MTI_ADDRESSED                     = $0E000000;
  MTI_STREAM_DATA_SEND              = $0F000000;
  MTI_TYPE_MASK                     = $0F000000;                                // The lower 4 bits of the upper word that decodes the NMRAnet Format code of the message
  MTI_DATAGRAM_MIN                  = MTI_DATAGRAM_ONLY_FRAME;
  MTI_DATAGRAM_MAX                  = MTI_DATAGRAM_FRAME_END;

  FT_UNADDRESSED_MASK               = $0FFFF000;
  FT_INITIALIZATION_COMPLETE        = $08087000;
  FT_VERIFY_NODE_ID_NUMBER_DEST     = $0E000000;
  FT_VERIFY_NODE_ID_NUMBER          = $088A7000;
  FT_VERIFIED_NODE_ID_NUMBER        = $088B7000;
  FT_OPTIONAL_INTERACTION_REJECTED  = $0E000000;
  FT_TERMINATE_DUE_TO_ERROR         = $0E000000;
  
  FT_PROTOCOL_SUPPORT_INQUIRY       = $0E000000;
  FT_PROTOCOL_SUPPORT_RESPONSE      = $0E000000;
  
  FT_CONSUMER_IDENTIFY              = $08A4F000;                                // Databytes = EventID
  FT_CONSUMER_IDENTIFY_RANGE        = $0825F000;                                // Databytes = EventID
  FT_CONSUMER_IDENTIFIED            = $0826B000;                                // Databytes = EventID
  FT_PRODUCER_IDENDIFY              = $08A8F000;                                // Databytes = EventID
  FT_PRODUCER_IDENTIFY_RANGE        = $0829F000;                                // Databytes = EventID
  FT_PRODUCER_IDENTIFIED            = $082AB000;                                // Databytes = EventID
  FT_EVENTS_IDENTIFY_DEST           = $08000000;                                // Databytes = 2B (see MTI_IDENTIFY_EVENTS)
  FT_EVENTS_IDENTIFY                = $08AB7000;
  FT_EVENT_LEARN                    = $08ACF000;                                // Databytes = EventID
  FT_PC_EVENT_REPORT                = $08ADF000;                                // Infamouse PCER
  
  FT_PROTOCOL_ACDI                  = $0E000000;
  
  MASK_DEST_ALIAS                   = $00FFF000;                                // Masks out just the Destination Alias Address
  MASK_SOURCE_ALIAS                 = $00000FFF;                                // Masks out just the Source Alias Address


  LEN_PIV_PROTOCOL = 6;                                                         // 6 Bytes long
  PIV_PROTOCOL_ID_PROTOCOL: TPIVProtocolValueArray           = ($80, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_DATAGRAM: TPIVProtocolValueArray           = ($40, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_STREAM: TPIVProtocolValueArray             = ($20, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_CONFIGURATION: TPIVProtocolValueArray      = ($10, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_RESERVATION: TPIVProtocolValueArray        = ($08, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_PRODUCER_CONSUMER: TPIVProtocolValueArray  = ($04, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_IDENTIFICATION: TPIVProtocolValueArray     = ($02, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_TEACH_LEARN: TPIVProtocolValueArray        = ($01, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_REMOTE_BUTTON: TPIVProtocolValueArray      = ($00, $80, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_CDI: TPIVProtocolValueArray                = ($00, $40, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_DISPLAY: TPIVProtocolValueArray            = ($00, $20, $00, $00, $00, $00);
  
  // Base MTIs that reside in the CAN 8 Byte Data Fields for Addressed CAN Headers
  MTI_TYPE_VERIFY_NODE_ID_NUMBER_DEST       = $0A;                                   // Sub-Type (in first Databyte) for a MTI with a destination in the header
  MTI_TYPE_OPTIONAL_INTERACTION_REJECTED    = $0C;
  MTI_TYPE_TERMINATE_DUE_TO_ERROR           = $0D;
  // Protocol Support MTIs
  MTI_TYPE_PROTOCOL_SUPPORT_QUERY           = $2E;
  MTI_TYPE_PROTOCOL_SUPPORT_REPLY           = $2F;                                   // Datagram DataBytes: 2F xx vv vv vv vv vv vv
  // Event Exchange MTIs
  MTI_TYPE_IDENTIFY_EVENTS                  = $2B;
  // Abbreviated Configuration Decription Information
  MTI_TYPE_SIMPLENODE_IDENTIFY_INFO_REQUEST = $52;                              // Abbreviated Configuration Decription Information Request, make sure set PIP value if supported
  MTI_TYPE_SIMPLENODE_IDENTIFY_INFO_REPLY   = $53;                              // Abbreviated Configuration Decription Information Reply
  // Datagram MTIs
  MTI_TYPE_DATAGRAM_RECIEVED_OK             = $4C;
  MTI_TYPE_DATAGRAM_REJECTED                = $4D;
  // Stream MTIs
  MTI_TYPE_STREAM_INITIATE_REQUEST          = $4E;
  MTI_TYPE_STREAM_INITIATE_REPLY            = $4F;
  MTI_TYPE_STREAMDATA_PROCEED               = $6A;
  MTI_TYPE_STREAMDATA_COMPLETE              = $6B;

  // NMRABus States
  BS_INHIBITED         = $01;                                                   // CAN Frame Layer is inhibited
  BS_PERMITED          = $02;                                                   // CAN Frame Layer is permitted (Node ID's resolved with bus)
  BS_UNITIALIZED       = $04;                                                   // Message Layer has not sent its first Initialize Complete Message
  BS_INITIALIZED       = $08;                                                   // Message Layer has sent its first Initialize Complete Message
  
  STATE_NMRABUS_START                       = 0;
  STATE_NMRABUS_GENERATE_NODE_ALIAS         = 1;
  STATE_RANDOM_NUMBER_GENERATOR             = 2;
  STATE_NMRABUS_TRANSMIT_CID                = 3;
  STATE_NMRABUS_NEXT_CDI                    = 4;
  STATE_NMRABUS_WAITSTATE                   = 5;
  STATE_NMRABUS_SEND_LOGIN_RID              = 6;
  STATE_NMRABUS_SEND_LOGIN_AMD              = 8;
  STATE_NMRABUS_INITIALIZED                 = 9;
  STATE_NMRABUS_LOGIN_IDENTIFY_EVENTS       = 10;
  STATE_NMRABUS_PERMITTED                   = 11;
  STATE_NMRABUS_INHIBITED                   = 12;
  STATE_NMRABUS_DUPLICATE_FULL_ID           = 13;
  STATE_NMRABUS_TAKE_OFFLINE                = 14;
  STATE_NMRABUS_OFFLINE                     = 15;
  
  STATE_NMRABUS_RESPONSE_SEND_RID                           = 0;
  STATE_NMRABUS_RESPONSE_SEND_AMD                           = 1;
  STATE_NMRABUS_RESPONSE_SEND_VERIFIED_NODE                 = 2;
  STATE_NMRABUS_RESPONSE_SEND_PROTOCOL_SUPPORT              = 3;
  STATE_NMRABUS_RESPONSE_SEND_CONSUMER_IDENTIFIED           = 4;
  STATE_NMRABUS_RESPONSE_SEND_PRODUCER_IDENTIFIED           = 5;
  STATE_NMRABUS_RESPONSE_SEND_ALL_CONSUMER_PRODUCERS        = 6;
  STATE_NMRABUS_RESPONSE_SEND_OPTIONAL_INTERACTION_REJECTED = 7;
  STATE_NMRABUS_DATAGRAM_RECEIVED_OK                        = 8;
  STATE_NMRABUS_DATAGRAM_REJECTED                           = 9;
  STATE_NMRABUS_RESPONSE_CONSUMER_IDENTIFIED                = 10;
  STATE_NMRABUS_RESPONSE_PRODUCER_IDENTIFIED                = 11;
  STATE_NMRABUS_RESPONSE_AMR                                = 12;
  STATE_NMRABUS_RESPONSE_AMD                                = 13;
  STATE_NMRABUS_RESPONSE_PC_EVENT_REPORT                    = 14;
  STATE_NMRABUS_VERIFIED_NODE_ID                            = 15;
  STATE_NMRABUS_SEND_ACDI_REQUEST                           = 16;
  STATE_NMRABUS_ACDI_REPLY                                  = 17;
  
  LEN_QUEUED_ACTION_LIST                  = 2;                                 // Number of complex Actions that can be queued up
  
  // Simple Response Codes for NMRAnet CAN responses
  SRC_DUPLICATE_ALIAS                       = $0001;                            // Duplicate Alais Detected that was not a CID message, need to regenerate an Alias
  SRC_DUPLICATE_NODE_ID                     = $0002;                            // Send a Procducer/Consumer Message that a Duplicate 48 Bit node ID was detected, very bad...
  SRC_SEND_RID                              = $0004;                            // Duplicate Alias Detected that was a CID so tell the node we own that Alias
  SRC_SEND_AMD                              = $0008;                            // Send an Alias Map Definition
  // CAN Messages received that require no response
  // NMRAnet level responses
  SRC_SEND_VERIFIED_NODE                    = $0010;                            // Send a Verified Node message
  SRC_SEND_ALL_CONSUMER_PRODUCER_IDENTIFIED = $0020;                            // Send all Producers/Consumers defined

  // Complex Response Codes (see TQueuedResponse)
  CRC_EMPTY                                 = $0000;                            // Response Queue slot is empty
  CRC_SEND_PROTOCOL_SUPPORT                 = $0001;                            // Send a Protocol Support Response to a destination node
  CRC_SEND_CONSUMER_IDENTIFIED              = $0002;                            // Send a Consumer Identifed message for the Event ID in the DataBytes of the TQueuedResponse
  CRC_SEND_PRODUCER_IDENTIFIED              = $0004;                            // Send a Producer Identifed message for the Event ID in the DataBytes of the TQueuedResponse
  CRC_SEND_OPTIONAL_INTERACTION_REJECTED    = $0005;                            // Send an Optional Interaction Rejected with the passed dest node and Code in the Databytes
  // Do not require a response, for notification
  CRC_DATAGRAM_RECEIVED_OK                  = $0006;                            // Received a Datagram OK message addressed to us
  CRC_DATAGRAM_REJECTED                     = $0007;                            // Received a Datagram Rejected message addressed to us
  CRC_CONSUMER_IDENTIFIED                   = $0008;                            // Received a Consumer Idendified message addressed to us
  CRC_PRODUCER_IDENTIFIED                   = $0009;                            // Received a Producer Identified message addressed to us
  CRC_AMR                                   = $000A;                            // Received a Alias Map Reset
  CRC_AMD                                   = $000B;                            // Received an Alias Map Definition that did NOT have a duplicate ID to ours (that would force a SRC_DUPLICATE_NODE_ID Response
  CRC_PC_EVENT_REPORT                       = $000C;                            // Received a Producer Consumer Event Report
  CRC_VERIFIED_NODE_ID                      = $000D;                            // Received a Verified Node ID Message
  CRC_ACDI_REQUEST                          = $000E;                            // Recevied a Abbreviated Configuration Description Information Request
  CRC_ACDI_REPLY                            = $000F;                            // Recevied a Abbreviated Configuration Description Information Reply

  QAS_EMPTY                                 = $00;                              // The Queued Action is not allcoated
  QAS_ALLOCATED                             = $01;                              // The Queued Action is allocated
  
type
  TNodeID = array[0..1] of DWORD;                                               // WARNING READ THIS:::::   The Bottom 3 Bytes = [0] and the Top 3 Bytes = [1] The ID is not continious across the both DWords the upper nibble of the bottom DWord is not used
  // When a message is received on the CAN bus the logic decodes the message and
  // separates the message into different types of Responses.  Some messages require
  // a response that is a simple message without needed to know any information, these
  // are defined as "SimpleActionFlags".  The logic simply sets the flag to tell the
  // main message loop to send the simple response.  This also allows for multiple requests
  // to be summed together into a single response.  Other actions need to know more information
  // such as the node Alias the action needs to be sent to.  These are stored in the QueuedActionList
  
const
  RMB_EMPTY               = $00;                                                // Buffer is empty and available
  RMB_ALLOCATED           = $01;                                                // Buffer is allocated but may be in Process, need to check for inprocess flags
  RMB_INPROCESS_DATAGRAM  = $02;                                                // Buffer is process of receiving a Datagram
  RMB_INPROCESS_STREAM    = $04;                                                // Buffer is in process of receiving a Stream
  RMB_INPROCESS_CDI       = $08;                                                // Buffer is in process of receiving a CDI
  RMB_INPROCESS_ACDI      = $10;                                                // Buffer is in process of receiving a ACDI
  
type
  TDataBuffer = record
    Count: Byte;                                                                // Number of Databytes that are valid
    DataBytes: TCAN_DataBytes;                                                  // Depends on nCode, could be EventID, Datagram type, etc
  end;
  
  TReceivedMessageBuffer = record
    nCode: Word;                                                                // When a message is received a code is assigned to it.  See the CRC_xxx constants
    SourceAlias: Word;                                                          // The node that the message was sent from
    DestAlias: Word;                                                            // The node the message was sent to (if not addressed will be 0);
    DataBuffer: TDataBuffer;                                                    // Data sent in the CAN buffer
    State: Byte;                                                                // State of the Message buffer, see the RMB_xxx constants
    DatagramReceive: PDatagramBuffer;                                           // Dynamically allocated only when needed
    DatagramTransmit: PDatagramBuffer;                                          // Dynamically allocated only when needed
    ACDI_TransmitBuffer: PACDI_TransmitBuffer;                                  // Dynamically allocated only when needed
    ACDI_ReceiveBuffer: PACDI_ReceiveBuffer;                                    // Dynamically allocated only when needed
    Next: ^Word;
    Prev: ^Word;
  end;
  PReceivedMessageBuffer = ^TReceivedMessageBuffer;
    
type
  TQueuedAction = record                                                        // When a message is received that needs a response that contains a destination
    nCode: Word;                                                                // What the message was, see CRC_xxxx codes
    FromAlias: Word;                                                            // Destination the info needed to response is queued up in this structure to be acted on in the main
    DataCount: Byte;                                                            // Number of Databytes that are valid
    DataBytes: TCAN_DataBytes;                                                  // depends on the nCode, could be EventID, etc
  end;
  PQueuedAction = ^TQueuedAction;
  
  TQueuedActionList = array[0..LEN_QUEUED_ACTION_LIST-1] of TQueuedAction;      // List of responses the NMRABus_Process loop needs to handle
  
  TQueuedActions = record
    List: TQueuedActionList;                                                    // List of complex Actions to be handled in the NMRABus_Process loop
    SimpleActionFlags: Word;                                                    // List of simple Actions that do not need any information to respond to in the NMRABus_Process loop.  See SRC_xxx constants
    iState: Byte;                                                               // Statemachine Index
    Tag: Byte;                                                                  // MultiUse Flag, just be careful state don't overwrite it, Use 1) CID state for logging into bus  Use 2) Tracking the number of Event IDs when sending them all
    BufferOverrunCount: Word;                                                   // Track how many messages we missed
    State: Byte;                                                                // QAS_xxx flags
  end;
  PQueuedActions = ^TQueuedActions;
  
const
  NIDS_VERIFIED         = $0001;                                                // Node ID is verified

type
  TNodeIDs = record
    ID: TNodeID;
    AliasID: Word;
    State: Word;                                                                // See the NIDS_xxxx constants
  end;
  
  TNodeInfo = record
    ID: TNodeID;                                                                // Unique 48 Bit ID for Node
    Seed: TNodeID;                                                              // Seed for Random Number Generator in case we have to reseed because of a duplicate ID
    AliasID: Word;                                                              // 12 Bit Alias ID
  end;
  
  TVirtualNodeInfo = record                                                     // The ID can be the Physical ID + Index of the vNode if the NodeIDs are reserved for the vNodes.....
    Seed: TNodeID;                                                              // Seed for Random Number Generator in case we have to reseed because of a duplicate ID
    AliasID: Word;                                                              // 12 Bit Alias ID
  end;

  TNMRAnetNode = record
    Node: TNodeInfo;                                                            // Information about a Node
    LoginTimeCount: Integer;                                                    // Increment through the Global Timer to time out when the Spec for waiting for other nodes to send the RID for a duplicate Alias ID
    State: Word;                                                                // See the BS_xxxx flags; State of the Bus; these are ONLY CHANGED OUTSIDE OF an interrupt and concidered READ-ONLY inside of an interrupt
    iStateMachine: Byte;                                                        // Statemachine index for the main bus login
    iCID: Byte;
    Actions: PQueuedActions;                                                    // Actions the NMRABus_Process loop looks at to response to received messages
    DatagramReceive: PDatagramBuffer;                                           // Dynamically allocated only when needed
    DatagramTransmit: PDatagramBuffer;                                          // Dynamically allocated only when needed
    DatagramOverflowList: TDatagramOverflowList;                                // List that contains Nodes that tried to send datagrams but we did not have a free buffer.  They are queued to send a Buffer_Full response
    ACDI_TransmitBuffer: PACDI_TransmitBuffer;                                  // Dynamically allocated only when needed
    ACDI_ReceiveBuffer: PACDI_ReceiveBuffer;                                    // Dynamically allocated only when needed
  end;
  PNMRAnetNode = ^TNMRAnetNode;
  
type
  TSimpleActionCallbackFunc = procedure(NodeBuffer: PNMRAnetNode; Action: Word);                      // Action is the SRC_xxxx code of the Action
  PSimpleActionCallbackFunc = ^TSimpleActionCallbackFunc;
  TComplexActionCallbackFunc = procedure(NodeBuffer: PNMRAnetNode; Action: PQueuedAction);
  PComplexActionCallbackFunc = ^TComplexActionCallbackFunc;
  
type
  TACDI_ReceiveCallbackFunc = procedure(NodeBuffer: PNMRAnetNode; ACDI_Buffer: PACDI_ReceiveBuffer);
  PACDI_ReceiveCallbackFunc = ^TACDI_ReceiveCallbackFunc;
  
type
  TDatagramTaskCallbackFunc = procedure(NodeBuffer: PNMRAnetNode; Datagram: PDatagramBuffer; var Handled: Boolean);
  PDatagramTaskCallbackFunc = ^TDatagramTaskCallbackFunc;
  
var
  SimpleActionCallbackFunc: PSimpleActionCallbackFunc;
  ComplexActionCallbackFunc: PComplexActionCallbackFunc;
var
   ACDI_ReceiveCallbackFunc: PACDI_ReceiveCallbackFunc;                         // Called when a ACDI message is received
var
  DatagramCallbackFunc: PDatagramTaskCallbackFunc;                                  // Callback to the user app from the NMRADatagrams.mpas when a datagram is received that is not a special datagram defined in the following...
  DatagramTrainControlCallbackFunc: PDatagramTaskCallbackFunc;                      // Callback to the user app from the NMRADatagrams.mpas when a Train Control datagram is received
  DatagramMemConfigurationCallbackFunc: PDatagramTaskCallbackFunc;                  // Callback to the user app from the NMRADatagrams.mpas when a Memory Configuration datagram is received
  

  MaxTime_StateMachine: Word;
  MaxTime_RX: Word;
  
  NMRAnetNode: TNMRAnetNode;
  QueuedActions: TQueuedActions;

implementation

end.