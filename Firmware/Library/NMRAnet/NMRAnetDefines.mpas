unit NMRAnetDefines;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

uses
  NMRAnetBufferPoolsDefines,
  CANDefines,
  NMRAnetAbbreviatedConfigurationProtocolDefines,
  NMRAnetDatagramDefines;
  
{$I Options.inc}

const
  MAX_BUS_LOGIN_TIMEOUT = 3;                                                  // Number of 100ms time tick to wait for a node to send a RID to signal a duplicate Alais

  CAN_TX_0 = 0;
  CAN_TX_1 = 1;
  CAN_TX_2 = 2;

  CAN_RX_0 = 0;
  CAN_RX_1 = 1;

  CAN_TX_PRIORITY_0 = 0;
  CAN_TX_PRIORITY_1 = 1;
  CAN_TX_PRIORITY_2 = 2;
  CAN_TX_PRIORITY_3 = 3;
  
type
  TPIVProtocolValueArray = array[6] of Byte;

// *****************************************************************************
//  Extended CAN Frames
//  29 Bits Divided as follows:
//     - 1 Bit = Priority (1 = Low Priority typical)
//     - 4 Bits = Frame Type (FT_xxxx Constants)
//     - 12 Bits = Destination Node Address Alias or Message Type (MT_xxx Constants)
//     - 12 Bits = Source Node Address Alias
//
// Frame Types.  These define what the Frame of the CAN message consists of.
const
  FT_CAN                            = $00000000;                                // Frame Type CAN Control Message
  FT_CID0                           = $07000000;                                // First 12 Bits of 48 bit Node ID
  FT_CID1                           = $06000000;                                // 2rd 12 Bits of 48 bit Node ID
  FT_CID2                           = $05000000;                                // 3nd 12 Bits of 48 bit Node ID
  FT_CID3                           = $04000000;                                // Last 12 Bits of 48 bit Node ID
  FT_CID4                           = $03000000;                                // non-OpenLCB Protocol
  FT_CID5                           = $02000000;                                // non-OpenLCB Protocol
  FT_CID6                           = $01000000;                                // non-OpenLCB Protocol
  FT_CID_MASK                       = $07000000;
  
  FT_RID                            = $00700000;                                // Reserve ID
  FT_AMD                            = $00701000;                                // Alias Map Definition
  FT_AME                            = $00702000;                                // Alias Mapping Enquiry
  FT_AMR                            = $00703000;                                // Alias Map Reset Frame

  MTI_UNADDRESSED                   = $08000000;
  MTI_RESERVED                      = $09000000;
  MTI_DATAGRAM_ONLY_FRAME           = $0A000000;
  MTI_DATAGRAM_FRAME_START          = $0B000000;
  MTI_DATAGRAM_FRAME                = $0C000000;
  MTI_DATAGRAM_FRAME_END            = $0D000000;                                // Sub type SFT_DATAGRAM_END
  MTI_ADDRESSED                     = $0E000000;
  MTI_STREAM_DATA_SEND              = $0F000000;
  MTI_TYPE_MASK                     = $0F000000;                                // The lower 4 bits of the upper word that decodes the NMRAnet Format code of the message

  // Base MTIs that reside in the CAN 8 Byte Data Fields for Addressed CAN Headers
  MTI_EXTENSION_VERIFY_NODE_ID_NUMBER_DEST       = $0A;                         // Sub-Type (in first Databyte) for a MTI with a destination in the header
  MTI_EXTENSION_OPTIONAL_INTERACTION_REJECTED    = $0C;
  MTI_EXTENSION_TERMINATE_DUE_TO_ERROR           = $0D;
  // Protocol Support MTIs
  MTI_EXTENSION_PROTOCOL_SUPPORT_QUERY           = $2E;
  MTI_EXTENSION_PROTOCOL_SUPPORT_REPLY           = $2F;                         // Datagram DataBytes: 2F xx vv vv vv vv vv vv
  // Event Exchange MTIs
  MTI_EXTENSION_IDENTIFY_EVENTS                  = $2B;
  // Abbreviated Configuration Decription Information
  MTI_EXTENSION_SIMPLENODE_IDENTIFY_INFO_REQUEST = $52;                         // Abbreviated Configuration Decription Information Request, make sure set PIP value if supported
  MTI_EXTENSION_SIMPLENODE_IDENTIFY_INFO_REPLY   = $53;                         // Abbreviated Configuration Decription Information Reply
  // Datagram MTIs
  MTI_EXTENSION_DATAGRAM_RECIEVED_OK             = $4C;
  MTI_EXTENSION_DATAGRAM_REJECTED                = $4D;
  // Stream MTIs
  MTI_EXTENSION_STREAM_INITIATE_REQUEST          = $4E;
  MTI_EXTENSION_STREAM_INITIATE_REPLY            = $4F;
  MTI_EXTENSION_STREAMDATA_PROCEED               = $6A;
  MTI_EXTENSION_STREAMDATA_COMPLETE              = $6B;

  FT_UNADDRESSED_MASK               = $0FFFF000;
  
  FT_INITIALIZATION_COMPLETE        = $08087000;
  FT_VERIFY_NODE_ID_NUMBER_DEST     = $0E000000;
  FT_VERIFY_NODE_ID_NUMBER          = $088A7000;
  FT_VERIFIED_NODE_ID_NUMBER        = $088B7000;
  FT_OPTIONAL_INTERACTION_REJECTED  = $0E000000;
  FT_TERMINATE_DUE_TO_ERROR         = $0E000000;
  
  FT_PROTOCOL_SUPPORT_INQUIRY       = $0E000000;
  FT_PROTOCOL_SUPPORT_REPLY         = $0E000000;
  
  FT_CONSUMER_IDENTIFY              = $08A4F000;                                // Databytes = EventID
  FT_CONSUMER_IDENTIFY_RANGE        = $0825F000;                                // Databytes = EventID
  FT_CONSUMER_IDENTIFIED_UNKNOWN    = $0826B000;                                // Databytes = EventID
  FT_CONSUMER_IDENTIFIED_SET        = $08268000;                                // Databytes = EventID
  FT_CONSUMER_IDENTIFIED_CLEAR      = $08269000;                                // Databytes = EventID
  FT_CONSUMER_IDENTIFIED_RESERVED   = $0826A000;                                // Databytes = EventID
  FT_PRODUCER_IDENDIFY              = $08A8F000;                                // Databytes = EventID
  FT_PRODUCER_IDENTIFY_RANGE        = $0829F000;                                // Databytes = EventID
  FT_PRODUCER_IDENTIFIED_UNKNOWN    = $082AB000;                                // Databytes = EventID
  FT_PRODUCER_IDENTIFIED_SET        = $082A8000;                                // Databytes = EventID
  FT_PRODUCER_IDENTIFIED_CLEAR      = $082A9000;                                // Databytes = EventID
  FT_PRODUCER_IDENTIFIED_RESERVED   = $082AA000;                                // Databytes = EventID
  FT_EVENTS_IDENTIFY_DEST           = $08000000;                                // Databytes = 2B (see MTI_IDENTIFY_EVENTS)
  FT_EVENTS_IDENTIFY                = $08AB7000;
  FT_EVENT_LEARN                    = $08ACF000;                                // Databytes = EventID
  FT_PC_EVENT_REPORT                = $08ADF000;                                // Infamouse PCER
  
  FT_PROTOCOL_ACDI                  = $0E000000;
  
  MASK_DEST_ALIAS                   = $00FFF000;                                // Masks out just the Destination Alias Address
  MASK_SOURCE_ALIAS                 = $00000FFF;                                // Masks out just the Source Alias Address


  LEN_PIV_PROTOCOL = 6;                                                         // 6 Bytes long
  PIV_PROTOCOL_ID_PROTOCOL: TPIVProtocolValueArray           = ($80, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_DATAGRAM: TPIVProtocolValueArray           = ($40, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_STREAM: TPIVProtocolValueArray             = ($20, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_CONFIGURATION: TPIVProtocolValueArray      = ($10, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_RESERVATION: TPIVProtocolValueArray        = ($08, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_PRODUCER_CONSUMER: TPIVProtocolValueArray  = ($04, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_IDENTIFICATION: TPIVProtocolValueArray     = ($02, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_TEACH_LEARN: TPIVProtocolValueArray        = ($01, $00, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_REMOTE_BUTTON: TPIVProtocolValueArray      = ($00, $80, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_CDI: TPIVProtocolValueArray                = ($00, $40, $00, $00, $00, $00);
  PIV_PROTOCOL_ID_DISPLAY: TPIVProtocolValueArray            = ($00, $20, $00, $00, $00, $00);

  STATE_NMRABUS_START                       = 0;
  STATE_NMRABUS_GENERATE_NODE_ALIAS         = 1;
  STATE_RANDOM_NUMBER_GENERATOR             = 2;
  STATE_NMRABUS_TRANSMIT_CID                = 3;
  STATE_NMRABUS_NEXT_CDI                    = 4;
  STATE_NMRABUS_WAITSTATE                   = 5;
  STATE_NMRABUS_SEND_LOGIN_RID              = 6;
  STATE_NMRABUS_SEND_LOGIN_AMD              = 8;
  STATE_NMRABUS_INITIALIZED                 = 9;
  STATE_NMRABUS_LOGIN_IDENTIFY_EVENTS       = 10;
  STATE_NMRABUS_PERMITTED                   = 11;
  STATE_NMRABUS_INHIBITED                   = 12;
  STATE_NMRABUS_DUPLICATE_FULL_ID           = 13;
  STATE_NMRABUS_TAKE_OFFLINE                = 14;
  STATE_NMRABUS_OFFLINE                     = 15;
  
  STATE_NMRABUS_RESPONSE_SEND_RID                           = 0;
  STATE_NMRABUS_RESPONSE_SEND_AMD                           = 1;
  STATE_NMRABUS_RESPONSE_SEND_VERIFIED_NODE                 = 2;
  STATE_NMRABUS_RESPONSE_SEND_PROTOCOL_SUPPORT              = 3;
  STATE_NMRABUS_RESPONSE_SEND_CONSUMER_IDENTIFIED           = 4;
  STATE_NMRABUS_RESPONSE_SEND_PRODUCER_IDENTIFIED           = 5;
  STATE_NMRABUS_RESPONSE_SEND_ALL_CONSUMER_PRODUCERS        = 6;
  STATE_NMRABUS_RESPONSE_SEND_OPTIONAL_INTERACTION_REJECTED = 7;
  STATE_NMRABUS_DATAGRAM_RECEIVED_OK                        = 8;
  STATE_NMRABUS_DATAGRAM_REJECTED                           = 9;
  STATE_NMRABUS_RESPONSE_CONSUMER_IDENTIFIED                = 10;
  STATE_NMRABUS_RESPONSE_PRODUCER_IDENTIFIED                = 11;
  STATE_NMRABUS_RESPONSE_AMR                                = 12;
  STATE_NMRABUS_RESPONSE_AMD                                = 13;
  STATE_NMRABUS_RESPONSE_PC_EVENT_REPORT                    = 14;
  STATE_NMRABUS_VERIFIED_NODE_ID                            = 15;
  STATE_NMRABUS_SEND_ACDI_REQUEST                           = 16;
  STATE_NMRABUS_ACDI_REPLY                                  = 17;
  


type
  TNodeID = array[0..1] of DWORD;                                               // WARNING READ THIS:::::   The Bottom 3 Bytes = [0] and the Top 3 Bytes = [1] The ID is not continious across the both DWords the upper nibble of the bottom DWord is not used
  // When a message is received on the CAN bus the logic decodes the message and
  // separates the message into different types of Responses.  Some messages require
  // a response that is a simple message without needed to know any information, these
  // are defined as "SimpleActionFlags".  The logic simply sets the flag to tell the
  // main message loop to send the simple response.  This also allows for multiple requests
  // to be summed together into a single response.  Other actions need to know more information
  // such as the node Alias the action needs to be sent to.  These are stored in the QueuedActionList
  
// MOVE TO OPTIONS.INC or NMRAnetAppDefines.mpas
const
  MAX_BASE_BUFFER_POOL             = 4;                                         // Number of Base Buffers to allocate for Messages
  MAX_DATA_BUFFER_POOL             = 4;                                         // Number of CAN DataByte Buffers to allocate for Messages
  MAX_DATAGRAM_BUFFER_POOL         = 2;                                         // Number of Datagram Buffers to allocate for Messages
  MAX_ACDI_RECEIVE_BUFFER_POOL     = 2;                                         // Number of ACDI Buffers to allocate for Messages
  MAX_ACDI_TRANSMIT_BUFFER_POOL    = 1;                                         // Number of ACDI Buffers to allocate for Messages


type
  TDataBuffer = record                                                          // Overlays TBaseBuffer..........
    State: Byte;                                                                // State of Buffer, see CBS_xxx constants
    Alias: Word;                                                                // Alias associated with the buffer (Destination or Source depending on if the buffer is a Rx or Tx buffer)
    Next: Pointer;                                                              // Pointer to the next Message Buffer
    mCode: Byte;                                                                // Message Code for what the message was (not implemented on some buffers so be careful
    Count: Byte;                                                                // Number of Databytes that are valid
    DataBytes: TCAN_DataBytes;                                                  // Depends on nCode, could be EventID, Datagram type, etc
  end;
  PDataBuffer = ^TDataBuffer;

type
  TNodeIDs = record
    ID: TNodeID;
    AliasID: Word;
  end;
  
  TNodeInfo = record
    ID: TNodeID;                                                                // Unique 48 Bit ID for Node
    Seed: TNodeID;                                                              // Seed for Random Number Generator in case we have to reseed because of a duplicate ID
    AliasID: Word;                                                              // 12 Bit Alias ID
  end;

const
  // NMRABus States
  NS_EMPTY                = $00;
  NS_ALLOCATED            = $01;
  NS_PERMITTED            = $02;                                                // NodeState CAN Frame Layer is permitted (Node ID's resolved with bus)
  NS_INITIALIZED          = $04;                                                // NodeState Message Layer has sent its first Initialize Complete Message
  NS_VIRTUAL              = $08;                                                // NodeState If is a virtual node
  NS_ENUMERATING_EVENTS   = $10;                                                // Node is enumerating all events
  NS_IDENTIFYING_PRODUCERS = $20;
  NS_IDENTIFYING_CONSUMERS = $40;
  
  // MsgFlags in order of precidence (= 0 highest precidence)
  MF_DUPLICATE_NODE_ID        = $01;                                            // MsgFlag, a Duplicate Node ID was detected, critical fault
  MF_DUPLICATE_ALIAS          = $02;                                            // MsgFlag, a Duplicate Alias was Detected, critical fault
  MF_DUPLICATE_ALIAS_RID      = $04;                                            // MsgFlag, a Duplicate Alias was Detected during a CID message, not a fault just need to respond to claim the Alias

  MF_ALIAS_MAP_ENQUIRY        = $08;                                            // MsgFlag, an AMD message need to be responded to
  MF_VERIFY_NODE_ID           = $10;                                            // MsgFlag, a Verify Node ID message needs to be responded to
  MF_IDENTIFY_ALL_EVENTS      = $20;                                            // MsgFlag, an Identify Events message needs to be responded to

type
  TNMRAnetNodeLoginInfo = record
    TimeCounter: Byte;
    iCID: Byte;
  end;
  
  TNMRAnetNode = record
    State: Byte;                                                                // See the NS_xxxx flags; State of the Node
    Node: TNodeInfo;                                                            // Information about a Node
    Login: TNMRAnetNodeLoginInfo;                                               // Login Information
    MsgFlags: Byte;                                                             // Message Flags for messages that do not require information to be passed to the Node
    iStateMachine: Byte;                                                        // Statemachine index for the main bus login
    EventCounter: Word;                                                         // Counts the Events when enumerating them
    MsgBuffer: PBaseBuffer;                                                     // Messages to handle in a linked list
    DatagramOverflowList: TDatagramOverflowList;                                // List that contains Nodes that tried to send datagrams but we did not have a free buffer.  They are queued to send a Buffer_Full response
  end;
  PNMRAnetNode = ^TNMRAnetNode;
  
type
  TSimpleActionCallbackFunc = procedure(NodeBuffer: PNMRAnetNode);                      // Action is the SRC_xxxx code of the Action
  PSimpleActionCallbackFunc = ^TSimpleActionCallbackFunc;
  TComplexActionCallbackFunc = procedure(NodeBuffer: PNMRAnetNode);
  PComplexActionCallbackFunc = ^TComplexActionCallbackFunc;
  
type
  TACDI_ReceiveCallbackFunc = procedure(NodeBuffer: PNMRAnetNode; ACDI_Buffer: PACDI_ReceiveBuffer);
  PACDI_ReceiveCallbackFunc = ^TACDI_ReceiveCallbackFunc;
  
type
  TDatagramTaskCallbackFunc = procedure(NodeBuffer: PNMRAnetNode; Datagram: PDatagramBuffer; var Handled: Boolean);
  PDatagramTaskCallbackFunc = ^TDatagramTaskCallbackFunc;
  
var
  SimpleActionCallbackFunc: PSimpleActionCallbackFunc;
  ComplexActionCallbackFunc: PComplexActionCallbackFunc;
var
   ACDI_ReceiveCallbackFunc: PACDI_ReceiveCallbackFunc;                         // Called when a ACDI message is received
var
  DatagramCallbackFunc: PDatagramTaskCallbackFunc;                                  // Callback to the user app from the NMRADatagrams.mpas when a datagram is received that is not a special datagram defined in the following...
  DatagramTrainControlCallbackFunc: PDatagramTaskCallbackFunc;                      // Callback to the user app from the NMRADatagrams.mpas when a Train Control datagram is received
  DatagramMemConfigurationCallbackFunc: PDatagramTaskCallbackFunc;                  // Callback to the user app from the NMRADatagrams.mpas when a Memory Configuration datagram is received
  

  MaxTime_StateMachine: Word;
  MaxTime_RX: Word;


implementation

end.