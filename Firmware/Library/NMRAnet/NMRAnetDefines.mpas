unit NMRAnetDefines;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

{$I Options.inc}

uses
  CANDefines;

const
  MAX_BUS_LOGIN_TIMEOUT = 201;              // Number of 1ms time tick to wait for a node to send a RID to signal a duplicate Alais

  CAN_TX_0 = 0;
  CAN_TX_1 = 1;
  CAN_TX_2 = 2;

  CAN_RX_0 = 0;
  CAN_RX_1 = 1;

  CAN_TX_PRIORITY_0 = 0;
  CAN_TX_PRIORITY_1 = 1;
  CAN_TX_PRIORITY_2 = 2;
  CAN_TX_PRIORITY_3 = 3;

// *****************************************************************************
//  Extended CAN Frames
//  29 Bits Divided as follows:
//     - 1 Bit = Priority (1 = Low Priority typical)
//     - 4 Bits = Frame Type (FT_xxxx Constants)
//     - 12 Bits = Destination Node Address Alias or Message Type (MT_xxx Constants)
//     - 12 Bits = Source Node Address Alias
//
// Frame Types.  These define what the Frame of the CAN message consists of.
const
  FT_CAN                            = $00000000;                                // Frame Type CAN Control Message
  FT_CID0                           = $07000000;                                // First 12 Bits of 48 bit Node ID
  FT_CID1                           = $06000000;                                // 2rd 12 Bits of 48 bit Node ID
  FT_CID2                           = $05000000;                                // 3nd 12 Bits of 48 bit Node ID
  FT_CID3                           = $04000000;                                // Last 12 Bits of 48 bit Node ID
  FT_CID4                           = $03000000;                                // non-OpenLCB Protocol
  FT_CID5                           = $02000000;                                // non-OpenLCB Protocol
  FT_CID6                           = $01000000;                                // non-OpenLCB Protocol

  
  FT_CID_MASK                       = $07000000;
  FT_RID                            = $00700000;                                // Reserve ID
  FT_AMD                            = $00701000;                                // Alias Map Definition
  FT_AME                            = $00702000;                                // Alias Mapping Enquiry
  FT_AMR                            = $00703000;                                // Alias Map Reset Frame

  MTI_UNADDRESSED                   = $08000000;
  MTI_RESERVED                      = $09000000;
  MTI_DATAGRAM_ONLY_FRAME           = $0A000000;
  MTI_DATAGRAM_FRAME_START          = $0B000000;
  MTI_DATAGRAM_FRAME                = $0C000000;
  MTI_DATAGRAM_FRAME_END            = $0D000000;                                // Sub type SFT_DATAGRAM_END
  MTI_ADDRESSED                     = $0E000000;
  MTI_STREAM_DATA_SEND              = $0F000000;
  MTI_TYPE_MASK                     = $0F000000;                                // The lower 4 bits of the upper word that decodes the NMRAnet Format code of the message
  MTI_DATAGRAM_MIN                  = MTI_DATAGRAM_ONLY_FRAME;
  MTI_DATAGRAM_MAX                  = MTI_DATAGRAM_FRAME_END;

  FT_UNADDRESSED_MASK               = $0FFFF000;
  FT_INITIALIZATION_COMPLETE        = $08087000;
  FT_VERIFY_NODE_ID_NUMBER_DEST     = $0E000000;
  FT_VERIFY_NODE_ID_NUMBER_NO_DEST  = $088A7000;
  FT_VERIFIED_NODE_ID_NUMBER        = $088B7000;
  FT_OPTIONAL_INTERACTION_REJECTED  = $0E000000;
  FT_TERMINATE_DUE_TO_ERROR         = $0E000000;
  
  FT_CONSUMER_IDENTIFY              = $08A4F000;                                // Databytes = EventID
  FT_CONSUMER_IDENTIFY_RANGE        = $0825F000;                                // Databytes = EventID
  FT_CONSUMER_IDENTIFIED            = $0826B000;                                // Databytes = EventID
  FT_PRODUCER_IDENDIFY              = $08A8F000;                                // Databytes = EventID
  FT_PRODUCER_IDENTIFY_RANGE        = $0829F000;                                // Databytes = EventID
  FT_PRODUCER_IDENTIFIED            = $082AB000;                                // Databytes = EventID
  FT_EVENTS_IDENTIFY_DEST           = $08000000;                                // Databytes = 2B (see MTI_IDENTIFY_EVENTS)
  FT_EVENTS_IDENTIFY_NO_DEST        = $08AB7000;
  FT_EVENT_LEARN                    = $08ACF000;                                // Databytes = EventID
  FT_PC_EVENT_REPORT                = $08ADF000;                                // Infamouse PCER
  
  MASK_DEST_ALIAS                   = $00FFF000;                                // Masks out just the Destination Alias Address
  MASK_SOURCE_ALIAS                 = $00000FFF;                                // Masks out just the Source Alias Address
  
  PIP_PROTOCOL_SUPPORT_INQUIRY      = $08000000;
  PIP_PROTOCOL_SUPPORT_RESPONSE     = $08000000;
  PIV_PROTOCOL_ID_PROTOCOL          = $800000;                                  // vv vv vv vv vv vv
  PIV_PROTOCOL_ID_DATAGRAM          = $400000;                                  // vv vv vv vv vv vv
  PIV_PROTOCOL_ID_STREAM            = $200000;                                  // vv vv vv vv vv vv
  PIV_PROTOCOL_ID_CONFIGURATION     = $100000;                                  // vv vv vv vv vv vv
  PIV_PROTOCOL_ID_RESERVATION       = $080000;                                  // vv vv vv vv vv vv
  PIV_PROTOCOL_ID_PRODUCER_CONSUMER = $040000;                                  // vv vv vv vv vv vv
  PIV_PROTOCOL_ID_IDENTIFICATION    = $020000;                                  // vv vv vv vv vv vv
  PIV_PROTOCOL_ID_TEACH_LEARN       = $010000;                                  // vv vv vv vv vv vv
  PIV_PROTOCOL_ID_REMOTE_BUTTON     = $008000;                                  // vv vv vv vv vv vv
  PIV_PROTOCOL_ID_CDI               = $004000;                                  // vv vv vv vv vv vv
  PIV_PROTOCOL_ID_DISPLAY           = $002000;                                  // vv vv vv vv vv vv
  
  // Base MTIs that reside in the CAN 8 Byte Data Fields for Addressed CAN Headers
  MTI_VERIFY_NODE_DEST                 = $0A;                                   // Sub-Type (in first Databyte) for a MTI with a destination in the header
  MTI_OPTIONAL_INTERACTION_REJECTED    = $0C;
  MTI_TERMINATE_DUE_TO_ERROR           = $0D;
  // Protocol Support MTIs
  MTI_PROTOCOL_SUPPORT_QUERY           = $2E;
  MTI_PROTOCOL_SUPPORT_REPLY           = $2F;                                   // Datagram DataBytes: 2F xx vv vv vv vv vv vv
  // Event Exchange MTIs
  MTI_IDENTIFY_EVENTS                  = $2B;
  // Other MTIs
  MTI_SIMPLENODE_IDENTIFY_INFO_REQUEST = $52;
  MTI_SIMPLENODE_IDENTIFY_INFO_REPLY   = $53;
  // Datagram MTIs
  MTI_DATAGRAM_RECIEVED_OK             = $4C;
  MTI_DATAGRAM_REJECTED                = $4D;
  // Stream MTIs
  MTI_STREAM_INITIATE_REQUEST          = $4E;
  MTI_STREAM_INITIATE_REPLY            = $4F;
  MTI_STREAMDATA_PROCEED               = $6A;
  MTI_STREAMDATA_COMPLETE              = $6B;


  // NMRABus States
  BS_INHIBITED         = $01;                                                   // CAN Frame Layer is inhibited
  BS_PERMITED          = $02;                                                   // CAN Frame Layer is permitted (Node ID's resolved with bus)
  BS_UNITIALIZED       = $04;                                                   // Message Layer has not sent its first Initialize Complete Message
  BS_INITIALIZED       = $08;                                                   // Message Layer has sent its first Initialize Complete Message
  
  STATE_NMRABUS_START                       = 0;
  STATE_NMRABUS_GENERATE_NODE_ALIAS         = 1;
  STATE_RANDOM_NUMBER_GENERATOR             = 2;
  STATE_NMRABUS_TRANSMIT_CID                = 3;
  STATE_NMRABUS_NEXT_CDI                    = 4;
  STATE_NMRABUS_WAITSTATE                   = 5;
  STATE_NMRABUS_SEND_LOGIN_RID              = 6;
  STATE_NMRABUS_SEND_LOGIN_AMD              = 8;
  STATE_NMRABUS_INITIALIZED                 = 9;
  STATE_NMRABUS_PERMITTED                   = 10;
  STATE_NMRABUS_INHIBITED                   = 11;
  STATE_NMRABUS_DUPLICATE_FULL_ID           = 12;
  STATE_NMRABUS_TAKE_OFFLINE                = 13;
  STATE_NMRABUS_OFFLINE                     = 14;
  
  STATE_RESPONSE_START                      = 0;
  STATE_RESPONSE_SIMPLE_RESPONSE            = 1;
  STATE_RESPONSE_NEXT_SIMPLE_RESPONSE       = 2;
  STATE_RESPONSE_COMPLEX_RESPONSE           = 3;
  STATE_RESPONSE_NEXT_COMPLEX_RESPONSE      = 4;
  
  
  STATE_SIMPLE_RESPONSE_SEND_AMD            = 0;
  STATE_SIMPLE_RESPONSE_SEND_RID            = 1;

  LEN_QUEUED_RESPONSE_LIST                  = 4;                                // Number of complex Responses that can be queued up
  
  // CAN responses
  SRF_DUPLICATE_ALIAS                       = $0001;                            // Duplicate Alais Detected that was not a CID message, need to regenerate an Alias
  SRF_DUPLICATE_NODE_ID                     = $0002;                            // Send a Procducer/Consumer Message that a Duplicate 48 Bit node ID was detected, very bad...
  SRF_SEND_RID                              = $0004;                            // Duplicate Alias Detected that was a CID so tell the node we own that Alias
  SRF_SEND_AMD                              = $0008;                            // Send an Alias Map Definition
  // NMRAnet level responses
  SRF_SEND_VERIFIED_NODE                    = $0010;                            // Send a Verified Node message
  SRF_SEND_PROTOCOL_SUPPORT                 = $0020;                            // Send what Protocols we support

  
type
  TNodeID = array[0..1] of DWORD;                                                // The Bottom 3 Bytes = [0] and the Top 3 Bytes = [1]
  
  // When a message is received on the CAN bus the logic decodes the message and
  // separates the message into different types of Responses.  Some messages require
  // a response that is a simple message without needed to know any information, these
  // are defined as "SimpleResponseFlags".  The logic simply sets the flag to tell the
  // main message loop to send the simple response.  This also allows for multiple requests
  // to be summed together into a single response.  Other responses need to know more information
  // such as the node Alias the response needs to be sent to.  These are stored in the QueuedResponseList
  
  TQueuedResponse = record                                                      // When a message is received that needs a response that contains a destination
    ResponseCode: Byte;                                                         // node or needs to decode the DataBytes to understand what to respond with
    DestinationNodeAlias: Word;                                                 // the info needed to response is queued up in this structure to be acted on in the main
    DataBytes: TCAN_DataBytes;                                                  // NMRABus_Process loop
  end;
  
  TQueuedResponseList = array[0..LEN_QUEUED_RESPONSE_LIST] of TQueuedResponse;      // List of responses the NMRABus_Process loop needs to handle
  
  TQueuedResponses = record
    List: TQueuedResponseList;                                                  // List of complex Responses to be handled in the NMRABus_Process loop
    SimpleResponseFlags: Word;                                                  // List of simple Responses that do not need any information to respond to in the NMRABus_Process loop.  See SRF_xxx constants
    ListIndex: Byte;                                                            // Next index in the List to Access
    SimpleIndexMask: Word;                                                      // Next Bit Mask in the SimpleResponseFlags
    iState: Byte;                                                               // Statemachine Index
    iCDI: Byte;                                                                 // CID state for logging into bus
  end;

  TNMRABus = record
    Node_ID: TNodeID;                           // Unique 48 Bit ID for Node
    Unique_ID_Global_Seed: TNodeID;             // Seed for Random Number Generator in case we have to reseed because of a duplicate ID
    Node_Alias_ID: Word;                        // 12 Bit Alias ID
    LoginTimeCount: Integer;                    // Increment through the Global Timer to time out when the Spec for waiting for other nodes to send the RID for a duplicate Alias ID
    State: Word;                                // See the BS_xxxx flags; State of the Bus; these are ONLY CHANGED OUTSIDE OF an interrupt and concedered READ-ONLY inside of an interrupt
    Interrupt_State: Byte;                      // See the BSI_xxxx flags; State of the Bus Messaging System that is running through the interrupts, these are ONLY CHANGED FROM WITHIN the interrupt and concidered READ-ONLY outside of the interrupt
    iState: Byte;                               // Statemachine index for the main bus login
    Responses: TQueuedResponses;                // Responses the NMRABus_Process loop looks at to response to received messages
  end;
  
var
  NMRABus: TNMRABus;

implementation

end.