unit NMRAnetCANReceive;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:
//    Implements NMRAnet CAN Receive StateMachine.  The user program does not need
//    to interact with this statemachine unless it needs to hook in for special purposes
//
// ******************************************************************************

uses
  NMRAnetDefines,
  NMRAnetUtilities,
  NMRAnetDatagrams,
  NMRAnetDatagramDefines,
  CANDefines;
  
type
  TPacketHandlerFunc = procedure(CANBuffer: PCANBuffer; var DoDefault: Boolean);
  PPacketHandlerFunc = ^TPacketHandlerFunc;
  
  procedure NMRAnetCANReceive_Initialize;
  function NMRAnetCANReceive_Permited: Boolean;
  procedure NMRAnetCANReceive_SetCANLayerReceiveHook(HookFunc: PPacketHandlerFunc);       // WARNING:  The Hook is called from within the Interrupt Handler.....
  procedure NMRAnetCANReceive_SetNMRANetLayerReceiveHook(HookFunc: PPacketHandlerFunc);   // WARNING:  The Hook is called from within the Interrupt Handler.....

  // callbacks from the CAN interrupts used in the xxxxx_CAN_Interrupt.mpas units
  procedure ReceivedOnFilter0(Buffer: PCANBuffer);
  procedure ReceivedOnFilter1(Buffer: PCANBuffer);
  procedure ReceivedOnFilter2(Buffer: PCANBuffer);
  procedure ReceivedOnFilter3(Buffer: PCANBuffer);
  procedure ReceivedOnFilter4(Buffer: PCANBuffer);
  procedure ReceivedOnFilter5(Buffer: PCANBuffer);
  procedure ReceivedOnFilter6(Buffer: PCANBuffer);
  
  // defined in the dsPICxx_CAN_Interrupt.mpas file
  procedure StartCANMessageEngine; external;
  procedure EnableCANInterrupt(Enable: Boolean); external;

implementation

var
  CANLayerReceiveHook: PPacketHandlerFunc;
  NMRAnetLayerReceiveHook: PPacketHandlerFunc;
  
// ****************************************************************************
// procedure NMRAnetCANReceive_Initialize
//
//  Description:
//
// ****************************************************************************
procedure NMRAnetCANReceive_Initialize;
begin
  CANLayerReceiveHook := PPacketHandlerFunc( nil);
  NMRAnetLayerReceiveHook := PPacketHandlerFunc( nil);
end;
  
// ****************************************************************************
// procedure NMRAnetCANReceive_SetCANLayerReceiveHook
//
//  Description:
//
// ****************************************************************************
procedure NMRAnetCANReceive_SetCANLayerReceiveHook(HookFunc: PPacketHandlerFunc);
begin
  CANLayerReceiveHook := HookFunc
end;

// ****************************************************************************
// procedure NMRAnetCANReceive_SetNMRANetLayerReceiveHook
//
//  Description:
//
// ****************************************************************************
procedure NMRAnetCANReceive_SetNMRANetLayerReceiveHook(HookFunc: PPacketHandlerFunc);
begin
  NMRAnetLayerReceiveHook := HookFunc
end;

// *****************************************************************************
//  function NMRAnetCANReceive_Permited
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetCANReceive_Permited: Boolean;
begin
  Result := NMRABus.State and BS_PERMITED = BS_PERMITED
end;

// ****************************************************************************
// procedure GetComplexResponseBuffer
//
//  Description:   Returns first available ComplexResponseBuffer
//
// ****************************************************************************
function GetComplexResponseBuffer: PQueuedResponse;
var
  i, Count: Integer;
begin
  Result := nil; 
  i := 0;
  while i < LEN_QUEUED_RESPONSE_LIST do
  begin
    if NMRABus.Responses.List[i].nCode = CRC_EMPTY then
    begin
      Result := @NMRABus.Responses.List[i];
      Exit
    end;
    Inc(i);
  end;
end;

// ****************************************************************************
// procedure StoreComplexResponse
//
//  Description:   Called when the CAN receiver detects a duplicate Alias.
//
//
// ****************************************************************************
procedure StoreComplexResponse(CANBuffer: PCANBuffer; nCode, NodeAlias: Word; DataBytes: PCAN_DataBytes; DataCount: Byte);
var
  Buffer: PQueuedResponse;
begin
  // SHOULD WE CHECK FOR DUPLICATED RESPONSES IN THE LIST HERE??????????????????????????????????????????????
  // &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
  Buffer := GetComplexResponseBuffer;
  if Buffer <> nil then
  begin
    Buffer^.nCode := nCode;
    Buffer^.NodeAlias := NodeAlias;
    Buffer^.DataCount := DataCount;
    if DataBytes <> nil then
      Buffer^.DataBytes := DataBytes^
  end else
    Inc(NMRABus.Responses.BufferOverrunCount)
end;

// ****************************************************************************
// procedure ReceivedEqualAliasID
//
//  Description:   Called when the CAN receiver detects a duplicate Alias.
//
//  Response Layer:
//                 CAN Layer
//
//  Response Type:
//                 Simple Response
//
// ****************************************************************************
procedure ReceivedEqualAliasID(CANBuffer: PCANBuffer);
begin
  if (CANBuffer^.ID and FT_CID_MASK <= FT_CID0) and (CANBuffer^.ID and FT_CID_MASK >= FT_CID6) then // If it is a CID message then force calling node to try again for an Alias this one is ours
    NMRABus.Responses.SimpleResponseFlags := NMRABus.Responses.SimpleResponseFlags or SRC_SEND_RID
  else
    NMRABus.Responses.SimpleResponseFlags := NMRABus.Responses.SimpleResponseFlags or SRC_DUPLICATE_ALIAS
end;

// ****************************************************************************
// procedure ReceivedAliasMappingDefinition
//
//  Response Layer:
//                 CAN Layer
//
//  Response Type:
//                 Simple Response
//
// ****************************************************************************
procedure ReceivedAliasMappingDefinition(CANBuffer: PCANBuffer);
var
  NodeID: TNodeID;
begin
  NMRAnetUtilities_PacketBytesToNodeID(@CANBuffer^, NodeID);                    // Extract the 48 Bit ID
  if NMRAnetUtilities_EqualNodeID(NodeID) then                                  // If addressed to us then respond
    NMRABus.Responses.SimpleResponseFlags := NMRABus.Responses.SimpleResponseFlags or SRC_DUPLICATE_NODE_ID;
end;

// ****************************************************************************
// procedure ReceivedAliasMappingEnquiry
//
//  Response Layer:
//                 CAN Layer
//
//  Response Type:
//                 Simple Response
//
// ****************************************************************************
procedure ReceivedAliasMappingEnquiry(CANBuffer: PCANBuffer);
var
  NodeID: TNodeID;
begin
  if CANBuffer^.DataCount = 6 then
  begin
    NMRAnetUtilities_PacketBytesToNodeID(CANBuffer, NodeID);              // Extract the 48 Bit ID
    if NMRAnetUtilities_EqualNodeID(NodeID) then                          // If addressed to us then respond
      NMRABus.Responses.SimpleResponseFlags := NMRABus.Responses.SimpleResponseFlags or SRC_SEND_AMD;
  end else
    NMRABus.Responses.SimpleResponseFlags := NMRABus.Responses.SimpleResponseFlags or SRC_SEND_AMD;
end;

// ****************************************************************************
// procedure ReceivedUnAddressedMessage
//
//  Response Layer:
//                 NMRAnet Layer
//
//  Response Type:
//                 Simple/Complex Response
//
// ****************************************************************************
procedure ReceivedUnAddressedMessage(CANBuffer: PCANBuffer);
var
  s1: array[23] of char;
  NodeID: TNodeID;
begin

  longwordtohex(CANBuffer^.ID and FT_UNADDRESSED_MASK, s1);
  UART1_Write_Text('UnAddressed: ');
  UART1_Write_Text(s1+LF);
  

  case CANBuffer^.ID and FT_UNADDRESSED_MASK of
    FT_VERIFY_NODE_ID_NUMBER         : begin
                                         if CANBuffer^.DataCount = 0 then       // THIS IS NOT CLEAR IN THE SPEC
                                           NMRABus.Responses.SimpleResponseFlags := NMRABus.Responses.SimpleResponseFlags or SRC_SEND_VERIFIED_NODE
                                         else
                                         if CANBuffer^.DataCount = 6 then       // THIS IS NOT CLEAR IN THE SPEC
                                         begin
                                           NMRAnetUtilities_PacketBytesToNodeID(@CANBuffer^, NodeID);                    // Extract the 48 Bit ID
                                           if NMRAnetUtilities_EqualNodeID(NodeID) then                                  // If addressed to us then respond
                                            NMRABus.Responses.SimpleResponseFlags := NMRABus.Responses.SimpleResponseFlags or SRC_SEND_VERIFIED_NODE
                                         end
                                       end;
//    FT_VERIFIED_NODE_ID_NUMBER       : begin end; // TODO
    FT_CONSUMER_IDENTIFY             : begin end; // TODO
//    FT_CONSUMER_IDENTIFIED           : begin end; // TODO
    FT_CONSUMER_IDENTIFY_RANGE       : begin end; // TODO
    FT_PRODUCER_IDENDIFY             : begin end; // TODO
//    FT_PRODUCER_IDENTIFIED           : begin end; // TODO
    FT_PRODUCER_IDENTIFY_RANGE       : begin end; // TODO
    FT_EVENT_LEARN                   : begin end; // TODO
    FT_EVENTS_IDENTIFY               : NMRABus.Responses.SimpleResponseFlags := NMRABus.Responses.SimpleResponseFlags or SRC_ALL_CONSUMER_PRODUCER_IDENTIFIED;
    FT_PC_EVENT_REPORT               : begin end; // TODO
  end
end;



// ****************************************************************************
// procedure ReceivedAddressedMessage
//
//  Response Layer:
//                 NMRAnet Layer
//
//  Response Type:
//                 Simple/Complex Response on an addressed message that is NOT a Datagram or Stream
//
// ****************************************************************************
procedure ReceivedAddressedMessage(CANBuffer: PCANBuffer);
var
  Buffer: PQueuedResponse;
  DataBytes: TCAN_DataBytes;
begin

  UART1_Write_Text('Addressed'+LF);
  
  if NMRAnetUtilities_IsAddressedMessageToNode(CANBuffer) then
  begin
    case CANBuffer^.Databytes[0] of
      MTI_VERIFY_NODE_ID_NUMBER_DEST       : NMRABus.Responses.SimpleResponseFlags := NMRABus.Responses.SimpleResponseFlags or SRC_SEND_VERIFIED_NODE;
      MTI_PROTOCOL_SUPPORT_QUERY           : begin
                                                 // Nodes send things like :X1EAAAE8DN2F030405060765;
                                               NMRAnetUtilities_LoadCANData(DataBytes, $2F, $03, $04, $05, $06, $07, $65, $00); // TODO THIS IS MADE UP>>>>>>>>>>>>>>>>>>>>
                                               StoreComplexResponse(CANBuffer, CRC_SEND_PROTOCOL_SUPPORT, CANBuffer^.ID and MASK_SOURCE_ALIAS, @DataBytes, 7);
                                             end;
//      MTI_PROTOCOL_SUPPORT_REPLY           : begin end;  // TODO
//      MTI_OPTIONAL_INTERACTION_REJECTED    : begin end;  // TODO
//      MTI_TERMINATE_DUE_TO_ERROR           : begin end;  // TODO
      MTI_IDENTIFY_EVENTS                  : NMRABus.Responses.SimpleResponseFlags := NMRABus.Responses.SimpleResponseFlags or SRC_ALL_CONSUMER_PRODUCER_IDENTIFIED;
      MTI_SIMPLENODE_IDENTIFY_INFO_REQUEST : begin end;  // TODO
      MTI_SIMPLENODE_IDENTIFY_INFO_REPLY   : begin end;  // TODO
//      MTI_DATAGRAM_RECIEVED_OK             : begin end;  // TODO
//      MTI_DATAGRAM_REJECTED                : begin end;  // TODO
//      MTI_STREAM_INITIATE_REPLY            : begin end;  // TODO
//      MTI_STREAM_INITIATE_REQUEST          : begin end;  // TODO
//      MTI_STREAMDATA_COMPLETE              : begin end;  // TODO
//      MTI_STREAMDATA_PROCEED               : begin end;  // TODO
    end
  end
end;

// ****************************************************************************
// procedure ReceivedDatagramMessage
//
//  Response Layer:
//                 NMRAnet Layer
//
//  Response Type:
//                 Simple/Complex Response
//
// ****************************************************************************
procedure ReceivedDatagramMessage(CANBuffer: PCANBuffer);
begin
  if NMRAnetUtilities_IsAddressedMessageToNode(CANBuffer) then
    NMRAnetDatagrams_ProcessReceive(CANBuffer)
end;

// ****************************************************************************
// procedure ReceivedStreamMessage
//
//  Response Layer:
//                 NMRAnet Layer
//
//  Response Type:
//                 Simple/Complex Response
//
// ****************************************************************************
procedure ReceivedStreamMessage(CANBuffer: PCANBuffer);
begin
  if NMRAnetUtilities_IsAddressedMessageToNode(CANBuffer) then
  begin
  end
end;

// *****************************************************************************
//  procedure ReceivedOnFilter0
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 0 which is defined
//                  as any CAN level message (bit 26 = 0)
//
// *****************************************************************************
procedure ReceivedOnFilter0(CANBuffer: PCANBuffer);                             // CAN Layer Message
var
  DoDefault: Boolean;
begin

UART1_Write_Text('CAN'+LF);

  DoDefault := True;
  if CANLayerReceiveHook <> nil then
    CANLayerReceiveHook(CANBuffer, DoDefault);
  if DoDefault then
  begin
    if NMRAnetUtilities_EqualAliasID(CANBuffer^.ID and MASK_SOURCE_ALIAS) then  // This is ALWAYS checked regardless of permitted state
      ReceivedEqualAliasID(CANBuffer);

    if NMRAnetCANReceive_Permited then
    begin
      case CANBuffer^.ID and FT_UNADDRESSED_MASK of
        FT_AME : ReceivedAliasMappingEnquiry(CANBuffer);
        FT_AMD : ReceivedAliasMappingDefinition(CANBuffer);
      end
    end;
  end;
end;

// *****************************************************************************
//  procedure ReceivedOnFilter1
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 1 which is defined
//                  as any NMRABus level message (bit 26 = 1)
//
// *****************************************************************************
procedure ReceivedOnFilter1(CANBuffer: PCANBuffer);                             // NMRAnet Layer Message
var
  DoDefault: Boolean;
begin

  UART1_Write_Text('NMRAnet'+LF);

  DoDefault := True;
  if NMRAnetLayerReceiveHook <> nil then
    NMRAnetLayerReceiveHook(CANBuffer, DoDefault);                              // Allow the program to have a crack at the message handler

  if DoDefault then
  begin
    if NMRAnetUtilities_EqualAliasID(CANBuffer^.ID and MASK_SOURCE_ALIAS) then  // This is ALWAYS checked regardless of permitted state
      ReceivedEqualAliasID(CANBuffer);

    if NMRAnetCANReceive_Permited then
    begin
      case CANBuffer^.ID and MTI_TYPE_MASK of
        MTI_UNADDRESSED              : ReceivedUnAddressedMessage(CANBuffer);
        MTI_RESERVED                 : begin end;
        MTI_DATAGRAM_ONLY_FRAME,
        MTI_DATAGRAM_FRAME_START,
        MTI_DATAGRAM_FRAME,
        MTI_DATAGRAM_FRAME_END       : ReceivedDatagramMessage(CANBuffer);
        MTI_ADDRESSED                : ReceivedAddressedMessage(CANBuffer);
        MTI_STREAM_DATA_SEND         : ReceivedStreamMessage(CANBuffer);
      end;
    end;
  end;
end;

// *****************************************************************************
//  procedure ReceivedOnFilter2
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 2
//
// *****************************************************************************
procedure ReceivedOnFilter2(Buffer: PCANBuffer);
begin
  // Not used for NMRABus
end;

// *****************************************************************************
//  procedure ReceivedOnFilter3
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 3
//
// *****************************************************************************
procedure ReceivedOnFilter3(Buffer: PCANBuffer);
begin
  // Not used for NMRABus
end;

// *****************************************************************************
//  procedure ReceivedOnFilter4
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 4
//
// *****************************************************************************
procedure ReceivedOnFilter4(Buffer: PCANBuffer);
begin
  // Not used for NMRABus
end;

// *****************************************************************************
//  procedure ReceivedOnFilter5
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 5
//
// *****************************************************************************
procedure ReceivedOnFilter5(Buffer: PCANBuffer);
begin
  // Not used for NMRABus
end;

// *****************************************************************************
//  procedure ReceivedOnFilter6
//     Parameters:
//     Returns:
//
//     Description: WARNING: CALLED FROM RX COMPLETE INTERRUPT
//                  Called when a message passes Filter 6
//
// *****************************************************************************
procedure ReceivedOnFilter6(Buffer: PCANBuffer);
begin
  // Not used for NMRABus
end;

end.