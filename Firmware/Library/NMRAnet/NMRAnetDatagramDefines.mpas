unit NMRAnetDatagramDefines;

uses
  CANDefines;
  
{$I Options.inc}

type
  TDatagramErrorCode = array[0..1] of Byte;
  PDatagramErrorCode = ^TDatagramErrorCode;

const
  DATAGRAM_RESULT_REJECTED                                : TDatagramErrorCode = ($00, $00);
  // Errors that will cause sender to not retry
  DATAGRAM_RESULT_REJECTED_PERMANENT_ERROR                : TDatagramErrorCode = ($10, $00);
  DATAGRAM_RESULT_REJECTED_INFORMATION_LOGGED             : TDatagramErrorCode = ($10, $10);
  DATAGRAM_RESULT_REJECTED_SOURCE_NOT_PERMITTED           : TDatagramErrorCode = ($10, $20);
  DATAGRAM_RESULT_REJECTED_SOURCE_DATAGRAMS_NOT_ACCEPTED  : TDatagramErrorCode = ($10, $40);
  
  DATAGRAM_RESULT_REJECTED_BUFFER_FULL                    : TDatagramErrorCode = ($20, $00);
  
  DATAGRAM_RESULT_REJECTED_OUT_OF_ORDER                   : TDatagramErrorCode = ($60, $00);

  DATAGRAM_RESULT_REJECTED_NO_RESENT_MASK                 : TDatagramErrorCode = ($10, $00);
  DATAGRAM_RESULT_REJECTED_RESEND_MASK                    : TDatagramErrorCode = ($20, $00);
  DATAGRAM_RESULT_REJECTED_TRANSPORT_ERROR_MASK           : TDatagramErrorCode = ($40, $00);


  LEN_DATAGRAM       = 72;                                                      // How many Bytes in the datagram
  LEN_DATAGRAM_RECEIVE_ARRAY = 2;                                               // How many Datagram buffers to have
  LEN_DATAGRAM_TRANSMIT_ARRAY = 1;                                              // How many Transmit buffer to have
  LEN_DATAGRAM_BUFFER_OVERFLOW_LIST = 2;                                        // How many Datagram requests to buffer if there is no buffer available to service them

  // Datagram Buffer States
  DATAGRAM_BUFFER_EMPTY               = 0;                                      // [RX/TX] The Datagram Packet Buffer is empty
  DATAGRAM_BUFFER_IN_PROCESS          = 1;                                      // [RX/TX] The Datagram Packet Buffer is currently collecting/transmitting frames
  DATAGRAM_BUFFER_TRANSFER_COMPLETE   = 2;                                      // [RX/TX] The Datagram Packet has responded to the sender and ready for use (DATAGRAM_REJECTED_BUFFER_FULL response needed)

  // Datagram Receive Statemachine States
  STATE_DATAGRAM_RECEIVE_START         = 0;                                     // Receive Statemachine states
  STATE_DATAGRAM_RECEIVE_COMPLETE      = 1;
  STATE_DATAGRAM_HANDLED_MESSASGE      = 2;
  STATE_DATAGRAM_UNHANDLED_MESSAGE     = 3;
  STATE_DATAGRAM_SENDING_RESPONSE      = 4;
  STATE_DATAGRAM_ERROR_RESPONSES       = 5;

  // Datagram Transmit Statemachine States
  STATE_DATAGRAM_TRANSMIT_START                          = 0;                   // Transmit Statemachine states
  STATE_DATAGRAM_TRANSMIT_SINGLE_FRAME                   = 1;
  STATE_DATAGRAM_TRANSMIT_WAIT_FOR_RESPONSE_SINGLE_FRAME = 2;
  STATE_DATAGRAM_TRANSMIT_MULTI_FRAME                    = 3;
  STATE_DATAGRAM_TRANSMIT_WAIT_FOR_RESPONSE_MULTI_FRAME  = 4;


  DATAGRAM_WATCHDOG_MAX = 10000;                                                // 1ms counts before the datagram is declared abandon
  DATAGRAM_MAX_RETRY_COUNT = 3;                                                 // Number of try a datagram will try to be resent
  
  DATAGRAM_MAX_FRAME_COUNT = 9;                                                 // Maximum number of Frames (segments) in a Datagram


  // The first byte in a datagram is a command byte that allows datagrams to be "tagged" as special through these codes
  // The first byte is always reserved for this special purpose
  DATAGRAM_TYPE_CONFIGURATION               = $20;                              // Memory Configuration Protocol
  DATAGRAM_TYPE_TRAIN_CONTROL               = $30;                              // Train Control Protocol
  DATAGRAM_TYPE_TWO_BYTE_CMD_MASK           = $E0;                              // Next two bytes are command bytes and not data
  DATAGRAM_TYPE_SIX_BYTE_CMD_MASK           = $F0;                              // Next six bytes are command bytes and not data
  
type
  TDatagram = array[0..LEN_DATAGRAM-1] of Byte;
  PDatagram = ^TDatagram;
  
  TBufferOverflowList = array[LEN_DATAGRAM_BUFFER_OVERFLOW_LIST] of Word;
  
  TDatagramError = record
    MTI: Byte;
    SubType: TDatagramErrorCode;
  end;
  
  TDatagramBuffer = record
    DataBytes: TDatagram;                                                       // The bytes sent in the datagram
    Alias: Word;                                                                // The Source Node that sent the datagram if this is a RX buffer, else it is the Target Node that is being sent
    State: Byte;                                                                // The State of the Packet Buffer see DATAGRAM_xxxx contants
    iByteCount: Byte;                                                           // The number of bytes recevied as they come in, or the number of bytes to transmit
    iFrameCount: Byte;                                                          // Counts the number of Frames received/transmitted
    iWatchdog: Word;                                                            // Increments every 1ms or so to allow detecting a datagram that was abandon and never sent the End message or during transmit the Target Node never responds
    ErrorCode: TDatagramError;                                                  // Tracks any errors that occur through the MTI/Error Codes send as the first few bytes in the datagram
    iRetransmit: Byte;                                                          // Number of times the Datagram was attempted to transmit use to test before not trying any more
    iStateMachine: Byte;                                                        // Each Datagram Buffer holds it own place in the global statemachine, this allow interleaving and no deadlock when a target node is not responding
  end;
  
  PDatagramBuffer = ^TDatagramBuffer;
  TDatagramReceiveBufferArray = array[0..LEN_DATAGRAM_RECEIVE_ARRAY-1] of TDatagramBuffer;
  TDatagramTransmitBufferArray = array[0..LEN_DATAGRAM_TRANSMIT_ARRAY-1] of TDatagramBuffer;


  TDatagramReceive = record                                                     // Buffer to hold the datagram coming into the node
    List: TDatagramReceiveBufferArray;
    iActiveDatagram: Byte;                                                      // Datagram in the List that is being examamied by the statemachine
    BufferOverflowList: TBufferOverflowList;                                    // List that contains Nodes that tried to send datagrams but we did not have a free buffer.  They are queued to send a Buffer_Full response
  end;
  
  TDatagramTransmit = record                                                    // Buffer to hold datagrams being send by the node
    List: TDatagramTransmitBufferArray;
    iActiveDatagram: Byte;                                                      // Datagram in the List that is being examamied by the statemachine
  end;
  
implementation

end.