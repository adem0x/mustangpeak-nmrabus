unit NMRAnetUtilities;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

{$I Options.inc}

uses
  NMRAnetAppDefines,
  NMRAnetDefines,
  CANDefines,
  NMRAnetDatagramDefines;


procedure NMRAnetUtilities_LoadFramePacketDataWith48BitNodeID(Packet: PCANBuffer);
procedure NMRAnetUtilities_CreateCANControlFramePacket(VariableField: DWord; Packet: PCANBuffer);
procedure NMRAnetUtilities_CreateNMRABusMessagePacket(Packet: PCANBuffer; VariableField: DWord; DestinationAliasID: Word; ByteCount: Byte; DataBytes: PCAN_DataBytes);
function NMRAnetUtilities_ExtractDestinationAlias(Packet: PCANBuffer): Word;
function NMRAnetUtilities_ExtractSourceAlias(Packet: PCANBuffer): Word;
procedure NMRAnetUtilities_PacketBytesToNodeID(Packet: PCANBuffer; var NodeID: TNodeID; iStartByte: Byte);
function NMRAnetUtilities_EqualNodeID(var NodeID: TNodeID): boolean;
function NMRAnetUtilities_CompareNodeIDs(var NodeID1, NodeID2: TNodeID): boolean;
function NMRAnetUtilities_EqualAliasID(AliasID: Word): Boolean;
function NMRAnetUtilities_CompareAliasIDs(AliasID1, AliasID2: Word): Boolean;
function NMRAnetUtilities_EqualDestinationAlias(Packet: PCANBuffer): Boolean;
procedure NMRAnetUtilities_LoadNodeID(var NodeID: TNodeID; Upper, Lower: DWORD);
procedure NMRAnetUtilities_PsudoRandomNumberGenerator;
function NMRAnetUtilities_GenerateID_Alias_From_Global_Seed: Word;
procedure NMRAnetUtilities_CreateAliasID(Regenerate: Boolean);
procedure NMRAnetUtilities_RecreateAliasID;
function NMRAnetUtilities_IsAddressedMessageToNode(Packet: PCANBuffer): Boolean;
function NMRAnetUtilities_IsAddressedMessage(Packet: PCANBuffer): Boolean;
procedure NMRAnetUtilities_LoadCANData(var DataBytes: TCAN_DataBytes; Byte0, Byte1, Byte2, Byte3, Byte4, Byte5, Byte6, Byte7: Byte);
procedure NMRAnetUtilities_ZeroCANData(var DataBytes: TCAN_DataBytes);
function NMRAnetUtilities_PackBytesLo(Packet: PCANBuffer): DWord;
function NMRAnetUtilities_PackBytesHi(Packet: PCANBuffer): DWord;
function NMRAnetUtilities_SupportsEventAsProducer(DataBytes: PEventID): Boolean;
function NMRAnetUtilities_SupportsEventAsConsumer(DataBytes: PEventID): Boolean;
procedure NMRANetUtilities_LoadDatagramResultBytes(Datagram: PDatagramBuffer; MTI: Byte; CodeType: PDatagramErrorCode);

implementation

  
// *****************************************************************************
//  procedure NMRAnetUtilities_LoadFramePacketDataWith48BitNodeID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_LoadFramePacketDataWith48BitNodeID(Packet: PCANBuffer);
begin
  Packet^.DataCount := 6;
  Packet^.DataBytes[0] := NMRABus.Node.ID[1] shr 16;  // But these all need the 48 Bit Full ID in the Byte Fields
  Packet^.DataBytes[1] := NMRABus.Node.ID[1] shr 8;
  Packet^.DataBytes[2] := NMRABus.Node.ID[1];
  Packet^.DataBytes[3] := NMRABus.Node.ID[0] shr 16;
  Packet^.DataBytes[4] := NMRABus.Node.ID[0] shr 8;
  Packet^.DataBytes[5] := NMRABus.Node.ID[0];
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_CreateCANControlFramePacket
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_CreateCANControlFramePacket(VariableField: DWord; Packet: PCANBuffer);
begin
  Packet^.DataCount := 0;
  Packet^.State := Packet^.State or CBS_EXTENDED;
  Packet^.ID := $10000000 or VariableField or NMRABus.Node.AliasID;  // RID, AMD, AME, AMR are all covered with the Reserved bit, Variable Field value and Source Node Alias
  if VariableField = FT_CID0 then Packet^.ID := Packet^.ID or (NMRABus.Node.ID[1] and $00FFF000) else
  if VariableField = FT_CID1 then Packet^.ID := Packet^.ID or ((NMRABus.Node.ID[1] shl 12) and $00FFF000) else
  if VariableField = FT_CID2 then Packet^.ID := Packet^.ID or (NMRABus.Node.ID[0] and $00FFF000) else
  if VariableField = FT_CID3 then Packet^.ID := Packet^.ID or ((NMRABus.Node.ID[0] shl 12) and $00FFF000);

  if (VariableField = FT_AMD) or (VariableField = FT_AME) or (VariableField = FT_AMR) then
    NMRAnetUtilities_LoadFramePacketDataWith48BitNodeID(Packet);
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_CreateNMRABusMessagePacket
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_CreateNMRABusMessagePacket(Packet: PCANBuffer; VariableField: DWord; DestinationAliasID: Word; ByteCount: Byte; DataBytes: PCAN_DataBytes);
begin
  Packet^.DataCount := ByteCount;
  if DataBytes <> nil then
  begin
    Packet^.DataCount := ByteCount;
    Packet^.DataBytes := DataBytes^;
  end;
  Packet^.State := Packet^.State or CBS_EXTENDED;
  Packet^.ID := $10000000 or VariableField or NMRABus.Node.AliasID;
  if DestinationAliasID <> 0 then
    Packet^.ID := Packet^.ID or DWORD(DestinationAliasID shl 12);

 if (VariableField = FT_INITIALIZATION_COMPLETE) or (VariableField = FT_VERIFIED_NODE_ID_NUMBER) then
    NMRAnetUtilities_LoadFramePacketDataWith48BitNodeID(Packet);
end;

// *****************************************************************************
//  function NMRAnetUtilities_ExtractDestinationAlias
//     Parameters:
//     Returns:
//
//     Description: Extracts the Destination ID packed in the ID if it is available
//
// *****************************************************************************
function NMRAnetUtilities_ExtractDestinationAlias(Packet: PCANBuffer): Word;
begin
  Result := 0;
  if Packet^.ID and MTI_TYPE_MASK > MTI_UNADDRESSED then
    Result := DWord( (Packet^.ID and MASK_DEST_ALIAS) shr 12)
end;

// *****************************************************************************
//  function NMRAnetUtilities_ExtractSourceAlias
//     Parameters:
//     Returns:
//
//     Description: Extracts the Source ID packed in the ID if it is available
//
// *****************************************************************************
function NMRAnetUtilities_ExtractSourceAlias(Packet: PCANBuffer): Word;
begin
  Result := Packet^.ID and MASK_SOURCE_ALIAS
end;

// *****************************************************************************
//  function NMRAnetUtilities_PacketBytesToNodeID
//     Parameters:
//     Returns:
//
//     Description: Extracts the NodeID from the 8 CAN bytes in the passed Packet
//  Requires that the packet contains a valid NodeID in the bytes.
//
// *****************************************************************************
procedure NMRAnetUtilities_PacketBytesToNodeID(Packet: PCANBuffer; var NodeID: TNodeID; iStartByte: Byte);
begin
  NodeID[1] := Packet^.DataBytes[iStartByte+2];
  NodeID[1] := NodeID[1] or Packet^.DataBytes[iStartByte+1] shl 8;
  NodeID[1] := NodeID[1] or Packet^.DataBytes[iStartByte] shl 16;
  NodeID[0] := Packet^.DataBytes[iStartByte+5];
  NodeID[0] := NodeID[0] or Packet^.DataBytes[iStartByte+4] shl 8;
  NodeID[0] := NodeID[0] or Packet^.DataBytes[iStartByte+3] shl 16;
end;

// *****************************************************************************
//  function NMRAnetUtilities_EqualAliasID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_EqualNodeID(var NodeID: TNodeID): boolean;
begin
  Result := (NodeID[1] = NMRABus.Node.ID[1]) and (NodeID[0] = NMRABus.Node.ID[0])
end;

// *****************************************************************************
//  function NMRAnetUtilities_CompareNodeIDs
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_CompareNodeIDs(var NodeID1, NodeID2: TNodeID): boolean;
begin
  Result := (NodeID1[1] = NodeID2[1]) and (NodeID1[0] = NodeID2[0])
end;

// *****************************************************************************
//  function NMRAnetUtilities_EqualDestinationAlias
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_EqualDestinationAlias(Packet: PCANBuffer): Boolean;
begin
  Result := NMRAnetUtilities_EqualAliasID(NMRAnetUtilities_ExtractDestinationAlias(Packet))
end;

// *****************************************************************************
//  function NMRAnetUtilities_EqualAliasID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_EqualAliasID(AliasID: Word): Boolean;
begin
  Result := AliasID = NMRABus.Node.AliasID
end;

// *****************************************************************************
//  function NMRAnetUtilities_CompareAliasID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_CompareAliasIDs(AliasID1, AliasID2: Word): Boolean;
begin
  Result := AliasID1 = AliasID2
end;

// *****************************************************************************
//  procedure LoadNodeID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_LoadNodeID(var NodeID: TNodeID; Upper, Lower: DWORD);
begin
  NodeID[0] := Lower;
  NodeID[1] := Upper;
end;

// *****************************************************************************
//  procedure PsudoRandomNumberGenerator
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_PsudoRandomNumberGenerator;
var
  temp1,              // Upper 24 Bits of temp 48 bit number
  temp2: DWORD;       // Lower 24 Bits of temp 48 Bit number
begin
  temp1 := ((NMRABus.Node.Seed[1] shl 9) or ((NMRABus.Node.Seed[0] shr 15) and $000001FF)) and $00FFFFFF;   // x(i+1)(2^9 + 1)*x(i) + C  = 2^9 * x(i) + x(i) + C
  temp2 := (NMRABus.Node.Seed[0] shl 9) and $00FFFFFF;                                                                  // Calculate 2^9 * x

  NMRABus.Node.Seed[0] := NMRABus.Node.Seed[0] + temp2 + $7A4BA9;   // Now y = 2^9 * x so all we have left is x(i+1) = y + x + c
  NMRABus.Node.Seed[1] := NMRABus.Node.Seed[1] + temp1 + $1B0CA3;

  NMRABus.Node.Seed[1] := (NMRABus.Node.Seed[1] and $00FFFFFF) or (NMRABus.Node.Seed[0] and $FF000000) shr 24;   // Handle the carries of the lower 24 bits into the upper
  NMRABus.Node.Seed[0] := NMRABus.Node.Seed[0] and $00FFFFFF;
end;

// *****************************************************************************
//  function NMRAnetUtilities_GenerateID_Alias_From_Global_Seed
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_GenerateID_Alias_From_Global_Seed: Word;
begin
  Result := (NMRABus.Node.Seed[0] xor NMRABus.Node.Seed[1] xor (NMRABus.Node.Seed[0] shr 12) xor (NMRABus.Node.Seed[1] shr 12)) and $00000FFF;
end;

// *****************************************************************************
//  procedure CreateAliasID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_CreateAliasID(Regenerate: Boolean);
begin
  if Regenerate then
    NMRAnetUtilities_PsudoRandomNumberGenerator;
  NMRABus.Node.AliasID := NMRAnetUtilities_GenerateID_Alias_From_Global_Seed;
  if NMRABus.Node.AliasID = 0 then
  begin
    NMRAnetUtilities_PsudoRandomNumberGenerator;
    NMRABus.Node.AliasID := NMRAnetUtilities_GenerateID_Alias_From_Global_Seed;
  end
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_RecreateAliasID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_RecreateAliasID;
begin
  NMRAnetUtilities_CreateAliasID(True)
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_IsAddressedMessage
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_IsAddressedMessage(Packet: PCANBuffer): Boolean;
begin
  Result := Packet^.ID and MTI_TYPE_MASK > MTI_UNADDRESSED
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_IsAddressedMessageToNode
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_IsAddressedMessageToNode(Packet: PCANBuffer): Boolean;
begin
  if NMRAnetUtilities_IsAddressedMessage(Packet) then
    Result := NMRAnetUtilities_EqualAliasID(  NMRAnetUtilities_ExtractDestinationAlias(Packet))
  else
    Result := False
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_IsDatagramMsg
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_IsDatagramMsg(Packet: PCANBuffer): Boolean;
begin
  Result := ((Packet^.ID and MTI_TYPE_MASK) >= MTI_DATAGRAM_FRAME_START) and ((Packet^.ID and MTI_TYPE_MASK) <= MTI_DATAGRAM_FRAME_END)
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_IsAddressedDatagramToNode
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_IsAddressedDatagramToNode(Packet: PCANBuffer): Boolean;
begin
  Result := NMRAnetUtilities_IsAddressedMessageToNode(Packet) and NMRAnetUtilities_IsDatagramMsg(Packet)
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_LoadCANData
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_LoadCANData(var DataBytes: TCAN_DataBytes; Byte0, Byte1, Byte2, Byte3, Byte4, Byte5, Byte6, Byte7: Byte);
begin
  DataBytes[0] := Byte0;
  DataBytes[1] := Byte1;
  DataBytes[2] := Byte2;
  DataBytes[3] := Byte3;
  DataBytes[4] := Byte4;
  DataBytes[5] := Byte5;
  DataBytes[6] := Byte6;
  DataBytes[7] := Byte7;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_ZeroCANData
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_ZeroCANData(var DataBytes: TCAN_DataBytes);
var
  i: Integer;
begin
  for i := 0 to CAN_DATA_LEN - 1 do
    DataBytes[i] := 0;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_PackBytesLo
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_PackBytesLo(Packet: PCANBuffer): DWord;
begin
  Result := Packet^.DataBytes[3];
  Result := Result shr 8;
  Result := Packet^.DataBytes[2];
  Result := Result shr 8;
  Result := Packet^.DataBytes[1];
  Result := Result shr 8;
  Result := Packet^.DataBytes[0];
  Result := Result shr 8;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_PackBytesHi
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_PackBytesHi(Packet: PCANBuffer): DWord;
begin
  Result := Packet^.DataBytes[7];
  Result := Result shr 8;
  Result := Packet^.DataBytes[6];
  Result := Result shr 8;
  Result := Packet^.DataBytes[5];
  Result := Result shr 8;
  Result := Packet^.DataBytes[4];
  Result := Result shr 8;
end;

// *****************************************************************************
//  procedure EqualEventID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function EqualEventID(Event1, Event2: PEventID): Boolean;
var
  i: Integer;
begin
  Result := True;
  i := 0;
  while (i < 8) and Result do
  begin
    if Event1^[i] <> Event2^[i] then
    begin
      Result := False;
      Break
    end;
    Inc(i);
  end;
end;


// *****************************************************************************
//  procedure NMRAnetUtilities_SupportsEventAsProducer
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_SupportsEventAsProducer(DataBytes: PEventID): Boolean;
var
  i: Integer;
begin
  Result := False;
  i := 0;
  while (i < MAX_SUPPORTED_EVENTS_PRODUCED) do
  begin
    if EqualEventID(@SUPPORTED_EVENTS_PRODUCED[i], DataBytes) then
    begin
      Result := True;
      Break
    end;
    Inc(i)
  end;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_SupportsEventAsConsumer
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_SupportsEventAsConsumer(DataBytes: PEventID): Boolean;
var
  i: Integer;
begin
  Result := False;
  i := 0;
  while (i < MAX_SUPPORTED_EVENTS_CONSUMED) and not Result do
  begin
    if EqualEventID(@SUPPORTED_EVENTS_CONSUMED[i], DataBytes) then
    begin
      Result := True;
      Exit
    end;
    Inc(i)
  end
end;


procedure NMRANetUtilities_LoadDatagramResultBytes(Datagram: PDatagramBuffer; MTI: Byte; CodeType: PDatagramErrorCode);
begin
  Datagram^.ErrorCode.MTI := MTI;
  if CodeType <> nil then
  begin
    Datagram^.iByteCount := 3;
    Datagram^.ErrorCode.SubType[0] := CodeType^[0];
    Datagram^.ErrorCode.SubType[1] := CodeType^[1];
  end else
    Datagram^.iByteCount := 1
end;

end.