unit NMRAnetUtilities;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

{$I Options.inc}

uses
  NMRAnetNodeDefines,
  NMRAnetEventDefines,
  NMRAnetAppDefines,
  NMRAnetDefines,
  CANDefines,
  NMRAnetBufferPoolsDefines,
  NMRAnetDatagramDefines;
  
procedure NMRAnetUtilities_LoadFramePacketDataWith48BitNodeID(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer);
procedure NMRAnetUtilities_CreateCANControlFramePacket(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer; VariableField: DWord);
procedure NMRAnetUtilities_CreateNMRABusMessagePacket(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer; VariableField: DWord; DestinationAliasID: Word; ByteCount: Byte; DataBytes: PCAN_DataBytes);
function NMRAnetUtilities_ExtractDestinationAlias(Packet: PCANBuffer): Word;
function NMRAnetUtilities_ExtractSourceAlias(Packet: PCANBuffer): Word;
procedure NMRAnetUtilities_PacketBytesToNodeID(DataBytes: PCAN_DataBytes; var NodeID: TNodeID; iStartByte: Byte);
function NMRAnetUtilities_EqualNodeID(NodeBuffer: PNMRAnetNode; var NodeID: TNodeID): boolean;
function NMRAnetUtilities_CompareNodeIDs(var NodeID1, NodeID2: TNodeID): boolean;
function NMRAnetUtilities_EqualAliasID(NodeBuffer: PNMRAnetNode; AliasID: Word): Boolean;
function NMRAnetUtilities_CompareAliasIDs(AliasID1, AliasID2: Word): Boolean;
function NMRAnetUtilities_EqualDestinationAlias(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer): Boolean;
procedure NMRAnetUtilities_LoadNodeID(var NodeID: TNodeID; Upper, Lower: DWORD);
procedure NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed(var Seed: TNodeID);
function NMRAnetUtilities_CreateAliasID(var Seed: TNodeID; Regenerate: Boolean): Word;
function NMRAnetUtilities_RecreateAliasID(var Seed: TNodeID): Word;
function NMRAnetUtilities_IsAddressedMessageToNode(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer): Boolean;
function NMRAnetUtilities_IsAddressedMessage(Packet: PCANBuffer): Boolean;
procedure NMRAnetUtilities_LoadCANData(var DataBytes: TCAN_DataBytes; Byte0, Byte1, Byte2, Byte3, Byte4, Byte5, Byte6, Byte7: Byte);
procedure NMRAnetUtilities_ZeroCANData(var DataBytes: TCAN_DataBytes);
function NMRAnetUtilities_PackBytesLo(Packet: PCANBuffer): DWord;
function NMRAnetUtilities_PackBytesHi(Packet: PCANBuffer): DWord;

function NMRAnetUtilities_SupportsEventAsProducer(DataBytes: PEventID): Boolean;
function NMRAnetUtilities_SupportsEventAsConsumer(DataBytes: PEventID): Boolean;
function NMRAnetUtilities_SupportsVNodeEventAsProducer(DataBytes: PEventID): Boolean;
function NMRAnetUtilities_SupportsVNodeEventAsConsumer(DataBytes: PEventID): Boolean;
function NMRAnetUtilities_EqualEventID(Event1, Event2: PEventID): Boolean;

procedure NMRANetUtilities_LoadDatagramResultBytes(Datagram: PDatagramBuffer; MTI: Byte; CodeType: PDatagramErrorCode);

procedure NMRAnetUtilities_BaseBufferLink(Node: PNMRAnetNode; Buffer: PBaseBuffer);
procedure NMRAnetUtilities_BaseBufferUnLink(Node: PNMRAnetNode; Buffer: PBaseBuffer);
procedure NMRAnetUtilities_DataBufferLink(Node: PNMRAnetNode; Buffer: PDataBuffer);
procedure NMRAnetUtilities_DataBufferUnLink(Node: PNMRAnetNode; Buffer: PDataBuffer);
procedure NMRAnetUtilities_DatagramBufferLink(Node: PNMRAnetNode; Buffer: PDatagramBuffer);
procedure NMRAnetUtilities_DatagramBufferUnLink(Node: PNMRAnetNode; Buffer: PDatagramBuffer);
function NMRAnetUtilities_FindInProcessDatagram(Node: PNMRAnetNode; Alias: Word; var Buffer: PDatagramBuffer): Boolean;
function NMRAnetUtilities_FindCompletedDatagram(Node: PNMRAnetNode; Alias: Word; var Buffer: PDatagramBuffer): Boolean;
function NMRAnetUtilities_FindOutgoingDatagram(Node: PNMRAnetNode; var Buffer: PDatagramBuffer; ProcessingOnly: Boolean): Boolean;
function NMRAnetUtilities_FindInDatagramByState(Node: PNMRAnetNode; Alias: Word; var Buffer: PDatagramBuffer; AState: Byte; AnyBit: Boolean): Boolean;
function NMRAnetUtilities_FindDatagramErrorReply(Node: PNMRAnetNode; Alias: Word; var Buffer: PBaseBuffer): Boolean;

function NMRAnetUtilities_NextBaseBuffer(Node: PNMRAnetNode): PBaseBuffer;
function NMRAnetUtilities_NextDataBuffer(Node: PNMRAnetNode): PDataBuffer;
function NMRAnetUtilities_NextDatagramBuffer(Node: PNMRAnetNode): PDatagramBuffer;


var
  s1: array[32] of char;
  s2: array[32] of char;
  
implementation

  
// *****************************************************************************
//  procedure NMRAnetUtilities_LoadFramePacketDataWith48BitNodeID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_LoadFramePacketDataWith48BitNodeID(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer);
begin
  Packet^.DataCount := 6;
  Packet^.DataBytes[0] := NodeBuffer^.Node.ID[1] shr 16;  // But these all need the 48 Bit Full ID in the Byte Fields
  Packet^.DataBytes[1] := NodeBuffer^.Node.ID[1] shr 8;
  Packet^.DataBytes[2] := NodeBuffer^.Node.ID[1];
  Packet^.DataBytes[3] := NodeBuffer^.Node.ID[0] shr 16;
  Packet^.DataBytes[4] := NodeBuffer^.Node.ID[0] shr 8;
  Packet^.DataBytes[5] := NodeBuffer^.Node.ID[0];
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_CreateCANControlFramePacket
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_CreateCANControlFramePacket(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer; VariableField: DWord);
begin
  Packet^.DataCount := 0;
  Packet^.State := Packet^.State or CBS_EXTENDED;
  Packet^.ID := $10000000 or VariableField or NodeBuffer^.Node.AliasID;  // RID, AMD, AME, AMR are all covered with the Reserved bit, Variable Field value and Source Node Alias
  if VariableField = MTI_CID0 then Packet^.ID := Packet^.ID or (NodeBuffer^.Node.ID[1] and $00FFF000) else
  if VariableField = MTI_CID1 then Packet^.ID := Packet^.ID or ((NodeBuffer^.Node.ID[1] shl 12) and $00FFF000) else
  if VariableField = MTI_CID2 then Packet^.ID := Packet^.ID or (NodeBuffer^.Node.ID[0] and $00FFF000) else
  if VariableField = MTI_CID3 then Packet^.ID := Packet^.ID or ((NodeBuffer^.Node.ID[0] shl 12) and $00FFF000);

  if (VariableField = MTI_AMD) or (VariableField = MTI_AME) or (VariableField = MTI_AMR) then
    NMRAnetUtilities_LoadFramePacketDataWith48BitNodeID(NodeBuffer, Packet);
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_CreateNMRABusMessagePacket
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_CreateNMRABusMessagePacket(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer; VariableField: DWord; DestinationAliasID: Word; ByteCount: Byte; DataBytes: PCAN_DataBytes);
begin
  Packet^.DataCount := ByteCount;
  if DataBytes <> nil then
  begin
    Packet^.DataCount := ByteCount;
    Packet^.DataBytes := DataBytes^;
  end;
  Packet^.State := Packet^.State or CBS_EXTENDED;
  Packet^.ID := $10000000 or VariableField or NodeBuffer^.Node.AliasID;

// TEMPORARY TEST
 // if (VariableField = MTI_SIMPLE_NODE_IDENTIFY_INFO) then
 //   if DataBytes^[0] = MTI_EXTENSION_SIMPLENODE_IDENTIFY_INFO_REPLY then
  //    Packet^.ID := Packet^.ID and not $10000000;
      

  if DestinationAliasID <> 0 then
    Packet^.ID := Packet^.ID or DWORD(DestinationAliasID shl 12);

 if (VariableField = MTI_INITIALIZATION_COMPLETE) or (VariableField = MTI_VERIFIED_NODE_ID_NUMBER) then
    NMRAnetUtilities_LoadFramePacketDataWith48BitNodeID(NodeBuffer, Packet);
end;

// *****************************************************************************
//  function NMRAnetUtilities_ExtractDestinationAlias
//     Parameters:
//     Returns:
//
//     Description: Extracts the Destination ID packed in the ID if it is available
//
// *****************************************************************************
function NMRAnetUtilities_ExtractDestinationAlias(Packet: PCANBuffer): Word;
begin
  Result := 0;
  if Packet^.ID and MTI_TYPE_MASK > MTI_UNADDRESSED then
    Result := DWord( (Packet^.ID and MASK_DEST_ALIAS) shr 12)
end;

// *****************************************************************************
//  function NMRAnetUtilities_ExtractSourceAlias
//     Parameters:
//     Returns:
//
//     Description: Extracts the Source ID packed in the ID if it is available
//
// *****************************************************************************
function NMRAnetUtilities_ExtractSourceAlias(Packet: PCANBuffer): Word;
begin
  Result := Packet^.ID and MASK_SOURCE_ALIAS
end;

// *****************************************************************************
//  function NMRAnetUtilities_PacketBytesToNodeID
//     Parameters:
//     Returns:
//
//     Description: Extracts the NodeID from the 8 CAN bytes in the passed Packet
//  Requires that the packet contains a valid NodeID in the bytes.
//
// *****************************************************************************
procedure NMRAnetUtilities_PacketBytesToNodeID(DataBytes: PCAN_DataBytes; var NodeID: TNodeID; iStartByte: Byte);
begin
  NodeID[1] := DataBytes^[iStartByte+2];
  NodeID[1] := NodeID[1] or DataBytes^[iStartByte+1] shl 8;
  NodeID[1] := NodeID[1] or DataBytes^[iStartByte] shl 16;
  NodeID[0] := DataBytes^[iStartByte+5];
  NodeID[0] := NodeID[0] or DataBytes^[iStartByte+4] shl 8;
  NodeID[0] := NodeID[0] or DataBytes^[iStartByte+3] shl 16;
end;

// *****************************************************************************
//  function NMRAnetUtilities_EqualAliasID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_EqualNodeID(NodeBuffer: PNMRAnetNode; var NodeID: TNodeID): boolean;
begin
  Result := (NodeID[1] = NodeBuffer^.Node.ID[1]) and (NodeID[0] = NodeBuffer^.Node.ID[0])
end;

// *****************************************************************************
//  function NMRAnetUtilities_CompareNodeIDs
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_CompareNodeIDs(var NodeID1, NodeID2: TNodeID): boolean;
begin
  Result := (NodeID1[1] = NodeID2[1]) and (NodeID1[0] = NodeID2[0])
end;

// *****************************************************************************
//  function NMRAnetUtilities_EqualDestinationAlias
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_EqualDestinationAlias(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer): Boolean;
begin
  Result := NMRAnetUtilities_EqualAliasID(NodeBuffer, NMRAnetUtilities_ExtractDestinationAlias(Packet))
end;

// *****************************************************************************
//  function NMRAnetUtilities_EqualAliasID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_EqualAliasID(NodeBuffer: PNMRAnetNode; AliasID: Word): Boolean;
begin
  Result := AliasID = NodeBuffer^.Node.AliasID
end;

// *****************************************************************************
//  function NMRAnetUtilities_CompareAliasID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_CompareAliasIDs(AliasID1, AliasID2: Word): Boolean;
begin
  Result := AliasID1 = AliasID2
end;

// *****************************************************************************
//  procedure LoadNodeID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_LoadNodeID(var NodeID: TNodeID; Upper, Lower: DWORD);
begin
  NodeID[0] := Lower;
  NodeID[1] := Upper;
end;

// *****************************************************************************
//  procedure PsudoRandomNumberGenerator
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed(var Seed: TNodeID);
var
  temp1,              // Upper 24 Bits of temp 48 bit number
  temp2: DWORD;       // Lower 24 Bits of temp 48 Bit number
begin
  temp1 := ((Seed[1] shl 9) or ((Seed[0] shr 15) and $000001FF)) and $00FFFFFF;   // x(i+1)(2^9 + 1)*x(i) + C  = 2^9 * x(i) + x(i) + C
  temp2 := (Seed[0] shl 9) and $00FFFFFF;                                                                  // Calculate 2^9 * x

  Seed[0] := Seed[0] + temp2 + $7A4BA9;   // Now y = 2^9 * x so all we have left is x(i+1) = y + x + c
  Seed[1] := Seed[1] + temp1 + $1B0CA3;

  Seed[1] := (Seed[1] and $00FFFFFF) or (Seed[0] and $FF000000) shr 24;   // Handle the carries of the lower 24 bits into the upper
  Seed[0] := Seed[0] and $00FFFFFF;
end;

// *****************************************************************************
//  function NMRAnetUtilities_GenerateID_Alias_From_Global_Seed
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_GenerateID_Alias_From_Seed(var Seed: TNodeID): Word;
begin
  Result := (Seed[0] xor Seed[1] xor (Seed[0] shr 12) xor (Seed[1] shr 12)) and $00000FFF;
end;

// *****************************************************************************
//  procedure CreateAliasID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_CreateAliasID(var Seed: TNodeID; Regenerate: Boolean): Word;
begin
  if Regenerate then
    NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed(Seed);
  Result := NMRAnetUtilities_GenerateID_Alias_From_Seed(Seed);
  if Result = 0 then
  begin
    NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed(Seed);
    Result := NMRAnetUtilities_GenerateID_Alias_From_Seed(Seed);
  end
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_RecreateAliasID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_RecreateAliasID(var Seed: TNodeID): Word;
begin
  Result := NMRAnetUtilities_CreateAliasID(Seed, True)
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_IsAddressedMessage
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_IsAddressedMessage(Packet: PCANBuffer): Boolean;
begin
  Result := Packet^.ID and MTI_TYPE_MASK > MTI_UNADDRESSED
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_IsAddressedMessageToNode
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_IsAddressedMessageToNode(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer; ): Boolean;
begin
  if NMRAnetUtilities_IsAddressedMessage(Packet) then
    Result := NMRAnetUtilities_EqualAliasID(NodeBuffer, NMRAnetUtilities_ExtractDestinationAlias(Packet))
  else
    Result := False
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_IsDatagramMsg
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_IsDatagramMsg(Packet: PCANBuffer): Boolean;
begin
  Result := ((Packet^.ID and MTI_TYPE_MASK) >= MTI_DATAGRAM_FRAME_START) and ((Packet^.ID and MTI_TYPE_MASK) <= MTI_DATAGRAM_FRAME_END)
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_IsAddressedDatagramToNode
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_IsAddressedDatagramToNode(NodeBuffer: PNMRAnetNode; Packet: PCANBuffer): Boolean;
begin
  Result := NMRAnetUtilities_IsAddressedMessageToNode(NodeBuffer, Packet) and NMRAnetUtilities_IsDatagramMsg(Packet)
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_LoadCANData
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_LoadCANData(var DataBytes: TCAN_DataBytes; Byte0, Byte1, Byte2, Byte3, Byte4, Byte5, Byte6, Byte7: Byte);
begin
  DataBytes[0] := Byte0;
  DataBytes[1] := Byte1;
  DataBytes[2] := Byte2;
  DataBytes[3] := Byte3;
  DataBytes[4] := Byte4;
  DataBytes[5] := Byte5;
  DataBytes[6] := Byte6;
  DataBytes[7] := Byte7;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_ZeroCANData
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_ZeroCANData(var DataBytes: TCAN_DataBytes);
var
  i: Integer;
begin
  for i := 0 to CAN_DATA_LEN - 1 do
    DataBytes[i] := 0;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_PackBytesLo
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_PackBytesLo(Packet: PCANBuffer): DWord;
begin
  Result := Packet^.DataBytes[3];
  Result := Result shr 8;
  Result := Packet^.DataBytes[2];
  Result := Result shr 8;
  Result := Packet^.DataBytes[1];
  Result := Result shr 8;
  Result := Packet^.DataBytes[0];
  Result := Result shr 8;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_PackBytesHi
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_PackBytesHi(Packet: PCANBuffer): DWord;
begin
  Result := Packet^.DataBytes[7];
  Result := Result shr 8;
  Result := Packet^.DataBytes[6];
  Result := Result shr 8;
  Result := Packet^.DataBytes[5];
  Result := Result shr 8;
  Result := Packet^.DataBytes[4];
  Result := Result shr 8;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_EqualEventID
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_EqualEventID(Event1, Event2: PEventID): Boolean;
var
  i: Integer;
begin
  Result := True;
  i := 0;
  while (i < 8) and Result do
  begin
    if Event1^[i] <> Event2^[i] then
    begin
      Result := False;
      Break
    end;
    Inc(i);
  end;
end;


// *****************************************************************************
//  procedure NMRAnetUtilities_SupportsEventAsProducer
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_SupportsEventAsProducer(DataBytes: PEventID): Boolean;
{$IFDEF SUPPORT_AT_LEAST_ONE_PRODUCED_EVENT}
var
  i: Integer;
{$ENDIF}
begin
  Result := False;
  {$IFDEF SUPPORT_AT_LEAST_ONE_PRODUCED_EVENT}
  i := 0;
  while (i < MAX_SUPPORTED_EVENTS_PRODUCED) do
  begin
    if NMRAnetUtilities_EqualEventID(@SUPPORTED_EVENTS_PRODUCED[i], DataBytes) then
    begin
      Result := True;
      Break
    end;
    Inc(i)
  end;
  {$ENDIF}
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_SupportsEventAsConsumer
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_SupportsEventAsConsumer(DataBytes: PEventID): Boolean;
{$IFDEF SUPPORT_AT_LEAST_ONE_CONSUMED_EVENT}
var
  i: Integer;
{$ENDIF}
begin
  Result := False;
  {$IFDEF SUPPORT_AT_LEAST_ONE_CONSUMED_EVENT}
  i := 0;
  while (i < MAX_SUPPORTED_EVENTS_CONSUMED) and not Result do
  begin
    if NMRAnetUtilities_EqualEventID(@SUPPORTED_EVENTS_CONSUMED[i], DataBytes) then
    begin
      Result := True;
      Exit
    end;
    Inc(i)
  end
  {$ENDIF}
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_SupportsVNodeEventAsProducer
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_SupportsVNodeEventAsProducer(DataBytes: PEventID): Boolean;
{$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_PRODUCED_EVENT}
var
  i: Integer;
{$ENDIF}
begin
  Result := False;
  {$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_PRODUCED_EVENT}
  i := 0;
  while (i < MAX_VNODE_SUPPORTED_EVENTS_PRODUCED) do
  begin
    if NMRAnetUtilities_EqualEventID(@SUPPORTED_VNODE_EVENTS_PRODUCED[i], DataBytes) then
    begin
      Result := True;
      Break
    end;
    Inc(i)
  end;
  {$ENDIF}
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_SupportsVNodeEventAsConsumer
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_SupportsVNodeEventAsConsumer(DataBytes: PEventID): Boolean;
{$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_CONSUMED_EVENT}
var
  i: Integer;
{$ENDIF}
begin
  Result := False;
  {$IFDEF SUPPORT_AT_LEAST_ONE_VNODE_CONSUMED_EVENT}
  i := 0;
  while (i < MAX_VNODE_SUPPORTED_EVENTS_CONSUMED) and not Result do
  begin
    if NMRAnetUtilities_EqualEventID(@SUPPORTED_VNODE_EVENTS_CONSUMED[i], DataBytes) then
    begin
      Result := True;
      Exit
    end;
    Inc(i)
  end
  {$ENDIF}
end;


// *****************************************************************************
//  procedure NMRANetUtilities_LoadDatagramResultBytes
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRANetUtilities_LoadDatagramResultBytes(Datagram: PDatagramBuffer; MTI: Byte; CodeType: PDatagramErrorCode);
begin
  Datagram^.ErrorCode.MTI := MTI;
  if CodeType <> nil then
  begin
    Datagram^.iByteCount := 3;
    Datagram^.ErrorCode.SubType[0] := CodeType^[0];
    Datagram^.ErrorCode.SubType[1] := CodeType^[1];
  end else
    Datagram^.iByteCount := 1
end;


// *****************************************************************************
//  procedure NMRAnetUtilities_BaseBufferLink
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_BaseBufferLink(Node: PNMRAnetNode; Buffer: PBaseBuffer);
var
  Temp: PBaseBuffer;
begin
  if Node^.BaseBuffers = nil then
    Node^.BaseBuffers := Buffer
  else begin                                  // Tack it to the end of the chain
    Temp := Node^.BaseBuffers;
    while Temp^.Next <> nil do
      Temp := Temp^.Next;
    Temp^.Next := Buffer
  end
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_BaseBufferUnLink
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_BaseBufferUnLink(Node: PNMRAnetNode; Buffer: PBaseBuffer);
var
  Temp, Parent: PBaseBuffer;
begin
  if Node^.BaseBuffers <> nil then
  begin
    if Node^.BaseBuffers = Buffer then           // Root Buffer match case is easy
      Node^.BaseBuffers := Node^.BaseBuffers^.Next
    else begin
      Parent := Node^.BaseBuffers;                // Already know it is not the root buffer so setup for the first level down
      Temp := Node^.BaseBuffers^.Next;
      while (Temp <> nil) and (Temp <> Buffer) do
      begin
        Parent := Temp;
        Temp := Temp^.Next
      end;
      if Temp <> nil then
        Parent^.Next := Temp^.Next
    end
  end;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_DataBufferLink
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_DataBufferLink(Node: PNMRAnetNode; Buffer: PDataBuffer);
var
  Temp: PDataBuffer;
begin
  if Node^.DataBuffers = nil then
    Node^.DataBuffers := Buffer
  else begin                                  // Tack it to the end of the chain
    Temp := Node^.DataBuffers;
    while Temp^.Next <> nil do
      Temp := Temp^.Next;
    Temp^.Next := Buffer
  end
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_DataBufferUnLink
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_DataBufferUnLink(Node: PNMRAnetNode; Buffer: PDataBuffer);
var
  Temp, Parent: PDataBuffer;
begin
  if Node^.DataBuffers <> nil then
  begin
    if Node^.DataBuffers = Buffer then           // Root Buffer match case is easy
      Node^.DataBuffers := Node^.DataBuffers^.Next
    else begin
      Parent := Node^.DataBuffers;                // Already know it is not the root buffer so setup for the first level down
      Temp := Node^.DataBuffers^.Next;
      while (Temp <> nil) and (Temp <> Buffer) do
      begin
        Parent := Temp;
        Temp := Temp^.Next
      end;
      if Temp <> nil then
        Parent^.Next := Temp^.Next
    end
  end;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_DatagramBufferLink
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_DatagramBufferLink(Node: PNMRAnetNode; Buffer: PDatagramBuffer);
var
  Temp: PDatagramBuffer;
begin
  if Node^.DatagramBuffers = nil then
    Node^.DatagramBuffers := Buffer
  else begin                                  // Tack it to the end of the chain
    Temp := Node^.DatagramBuffers;
    while Temp^.Next <> nil do
      Temp := Temp^.Next;
    Temp^.Next := Buffer
  end
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_DatagramBufferUnLink
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
procedure NMRAnetUtilities_DatagramBufferUnLink(Node: PNMRAnetNode; Buffer: PDatagramBuffer);
var
  Temp, Parent: PDatagramBuffer;
begin
  if Node^.DatagramBuffers <> nil then
  begin
    if Node^.DatagramBuffers = Buffer then           // Root Buffer match case is easy
      Node^.DatagramBuffers := Node^.DatagramBuffers^.Next
    else begin
      Parent := Node^.DatagramBuffers;                // Already know it is not the root buffer so setup for the first level down
      Temp := Node^.DatagramBuffers^.Next;
      while (Temp <> nil) and (Temp <> Buffer) do
      begin
        Parent := Temp;
        Temp := Temp^.Next
      end;
      if Temp <> nil then
        Parent^.Next := Temp^.Next
    end
  end;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_FindInDatagramByState
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_FindInDatagramByState(Node: PNMRAnetNode; Alias: Word; var Buffer: PDatagramBuffer; AState: Byte; AnyBit: Boolean): Boolean;
var
  Temp: PDatagramBuffer;
begin
  Result := False;
  Temp := Node^.DatagramBuffers;
  while Temp <> nil do
  begin
    if Temp^.Alias = Alias then
    begin
      if AnyBit then
      begin
        if Temp^.State and AState <> 0 then
        begin
          Buffer := Temp;
          Result := True;
          Break
        end;
      end else
      begin
        if Temp^.State and AState = AState then
        begin
          Buffer := Temp;
          Result := True;
          Break
        end;
      end
    end;
    Temp := Temp^.Next
  end;
end;


// *****************************************************************************
//  procedure NMRAnetUtilities_FindInProcessDatagram
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_FindInProcessDatagram(Node: PNMRAnetNode; Alias: Word; var Buffer: PDatagramBuffer): Boolean;
begin
  Result := NMRAnetUtilities_FindInDatagramByState(Node, Alias, Buffer, CBS_PROCESSING, False);
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_FindCompletedDatagram
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_FindCompletedDatagram(Node: PNMRAnetNode; Alias: Word; var Buffer: PDatagramBuffer): Boolean;
begin
  Result := NMRAnetUtilities_FindInDatagramByState(Node, Alias, Buffer, CBS_TRANSFER_COMPLETE, False);
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_FindOutgoingDatagram;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
function NMRAnetUtilities_FindOutgoingDatagram(Node: PNMRAnetNode; var Buffer: PDatagramBuffer; ProcessingOnly: Boolean): Boolean;
var
  Temp: PDatagramBuffer;
  AState: Byte;
begin
  Result := False;
  AState := CBS_OUTGOING;
  if ProcessingOnly then
    AState := AState or CBS_PROCESSING;
    
  Temp := Node^.DatagramBuffers;
  while Temp <> nil do
  begin
    if Temp^.State and AState = AState then
    begin
      Buffer := Temp;
      Result := True;
      Break
    end;
    Temp := Temp^.Next
  end;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_FindDatagramErrorReply
//     Parameters:
//     Returns:
//
//     Description:
//
// *****************************************************************************
function NMRAnetUtilities_FindDatagramErrorReply(Node: PNMRAnetNode; Alias: Word; var Buffer: PBaseBuffer): Boolean;
var
  Temp: PBaseBuffer;
begin
  Result := False;
  Temp := Node^.BaseBuffers;
  while Temp <> nil do
  begin
    if Temp^.Alias = Alias then
    begin
      if (Temp^.mCode = BMC_DATAGRAM_BUFFER_FULL) or (Temp^.mCode = BMC_DATAGRAM_OUT_OF_ORDER) or (Temp^.mCode = BMC_DATAGRAM_NOT_ACCEPTED) then
      begin
        Buffer := Temp;
        Result := True;
        Break
      end;
    end;
    Temp := Temp^.Next
  end;
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_NextBaseBuffer
//     Parameters:
//     Returns:
//
//     Description:
//
// ***************************************************************************
function NMRAnetUtilities_NextBaseBuffer(Node: PNMRAnetNode): PBaseBuffer;
begin
  Result := Node^.BaseBuffers;
  if Result <> nil then
  begin
    while Result^.State and CBS_PROCESSING <> 0 do      // Skip over any In Process Buffers
    begin
      Result := Result^.Next;
      if Result = nil then
        Break
    end
  end
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_NextDataBuffer
//     Parameters:
//     Returns:
//
//     Description:
//
// ***************************************************************************
function NMRAnetUtilities_NextDataBuffer(Node: PNMRAnetNode): PDataBuffer;
begin
  Result := Node^.DataBuffers;
  if Result <> nil then
  begin
    while Result^.State and CBS_PROCESSING <> 0 do      // Skip over any In Process Buffers
    begin
      Result := Result^.Next;
      if Result = nil then
        Break
    end
  end
end;

// *****************************************************************************
//  procedure NMRAnetUtilities_NextDatagramBuffer
//     Parameters:
//     Returns:
//
//     Description:
//
// ***************************************************************************
function NMRAnetUtilities_NextDatagramBuffer(Node: PNMRAnetNode): PDatagramBuffer;
begin
  Result := Node^.DatagramBuffers;
  if Result <> nil then
  begin
    while Result^.State and CBS_TRANSFER_COMPLETE = 0 do    // Use only Complete Transfers
    begin
      Result := Result^.Next;
      if Result = nil then
        Break
    end
  end
end;

end.